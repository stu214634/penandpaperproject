{"version":3,"file":"LocationsView-BVK9eHty.js","sources":["../../node_modules/@mui/icons-material/ExpandLess.js","../../node_modules/@mui/icons-material/MusicNote.js","../../src/pages/LocationsView.tsx"],"sourcesContent":["\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"m12 8-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z\"\n}), 'ExpandLess');","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12 3v10.55c-.59-.34-1.27-.55-2-.55-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4V7h4V3z\"\n}), 'MusicNote');","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport {\n  Box,\n  Grid,\n  Card,\n  CardContent,\n  Typography,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  MenuItem,\n  Select,\n  FormControl,\n  InputLabel,\n  Chip,\n  Divider,\n  IconButton,\n  Collapse,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n  CardActions,\n  FormControlLabel,\n  Switch,\n  Paper,\n  Alert,\n  Tooltip,\n  InputAdornment,\n  Snackbar,\n  FormHelperText,\n  Autocomplete\n} from '@mui/material';\nimport AddIcon from '@mui/icons-material/Add';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess';\nimport SaveIcon from '@mui/icons-material/Save';\nimport MusicNoteIcon from '@mui/icons-material/MusicNote';\nimport VolumeUpIcon from '@mui/icons-material/VolumeUp';\nimport HelpIcon from '@mui/icons-material/Help';\nimport ImageIcon from '@mui/icons-material/Image';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { useStore } from '../store';\nimport { AssetManager } from '../services/assetManager';\nimport { AudioTrackPanel } from '../components/AudioTrackPanel';\nimport MarkdownContent from '../components/MarkdownContent';\n\nexport const LocationsView: React.FC = () => {\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState('');\n  const [newLocation, setNewLocation] = useState({\n    name: '',\n    description: '',\n    backgroundMusic: '',\n    entrySound: '',\n    imageUrl: '',\n    descriptionType: 'markdown' as 'markdown' | 'image' | 'pdf',\n    parentLocationId: '',\n    coordinates: [0, 0] as [number, number],\n    mixWithParent: false,\n    connectedLocations: [] as string[]\n  });\n  \n  // Currently edited location\n  const [editingLocation, setEditingLocation] = useState<string | null>(null);\n  \n  // Available audio files\n  const [audioFiles, setAudioFiles] = useState<string[]>([]);\n  \n  // Available image files\n  const [imageFiles, setImageFiles] = useState<string[]>([]);\n  \n  // Status for save operation\n  const [isSaving, setIsSaving] = useState(false);\n  \n  // Expanded locations state\n  const [expandedLocations, setExpandedLocations] = useState<Record<string, boolean>>({});\n\n  const [showDescriptionDialog, setShowDescriptionDialog] = useState(false);\n  const [viewingLocationDescription, setViewingLocationDescription] = useState<string>(\"\");\n  const [viewingLocationName, setViewingLocationName] = useState<string>(\"\");\n\n  const { \n    locations, \n    addLocation, \n    updateLocation,\n    deleteLocation, \n    getAllTopLevelLocations, \n    getSublocationsByParentId, \n    saveDataToIndexedDB \n  } = useStore();\n  \n  const topLevelLocations = getAllTopLevelLocations();\n\n  // Load audio files on component mount\n  useEffect(() => {\n    const loadAssets = async () => {\n      try {\n        const audioAssets = await AssetManager.getAssets('audio');\n        setAudioFiles(audioAssets.map(asset => asset.name));\n        \n        const imageAssets = await AssetManager.getAssets('images');\n        setImageFiles(imageAssets.map(asset => asset.name));\n      } catch (error) {\n        console.error('Error loading assets:', error);\n      }\n    };\n    \n    loadAssets();\n  }, []);\n\n  const handleAddLocation = () => {\n    addLocation({\n      name: newLocation.name,\n      description: newLocation.description,\n      backgroundMusic: newLocation.backgroundMusic || undefined,\n      entrySound: newLocation.entrySound || undefined,\n      imageUrl: newLocation.imageUrl || undefined,\n      descriptionType: newLocation.descriptionType,\n      coordinates: newLocation.coordinates.every(coord => coord !== 0) ? newLocation.coordinates : undefined,\n      parentLocationId: newLocation.parentLocationId || undefined,\n      mixWithParent: newLocation.mixWithParent,\n      connectedLocations: newLocation.connectedLocations.length > 0 ? newLocation.connectedLocations : undefined\n    });\n    \n    setIsAddDialogOpen(false);\n    resetNewLocationForm();\n    showSnackbar('Location added successfully');\n  };\n  \n  const resetNewLocationForm = () => {\n    setNewLocation({ \n      name: '', \n      description: '', \n      backgroundMusic: '', \n      entrySound: '',\n      imageUrl: '',\n      descriptionType: 'markdown' as 'markdown' | 'image' | 'pdf',\n      parentLocationId: '',\n      coordinates: [0, 0],\n      mixWithParent: false,\n      connectedLocations: []\n    });\n  };\n\n  const toggleLocationExpand = (locationId: string) => {\n    setExpandedLocations(prev => ({\n      ...prev,\n      [locationId]: !prev[locationId]\n    }));\n  };\n  \n  // Open edit dialog for a location\n  const handleEditLocation = (locationId: string) => {\n    const location = locations.find(loc => loc.id === locationId);\n    if (location) {\n      setEditingLocation(locationId);\n      setNewLocation({\n        name: location.name,\n        description: location.description,\n        backgroundMusic: location.backgroundMusic || '',\n        entrySound: location.entrySound || '',\n        imageUrl: location.imageUrl || '',\n        descriptionType: location.descriptionType || 'markdown',\n        parentLocationId: location.parentLocationId || '',\n        coordinates: location.coordinates || [0, 0],\n        mixWithParent: location.mixWithParent || false,\n        connectedLocations: location.connectedLocations || []\n      });\n      setIsEditDialogOpen(true);\n    }\n  };\n  \n  // Save edited location\n  const handleSaveLocation = () => {\n    if (editingLocation) {\n      updateLocation(editingLocation, {\n        name: newLocation.name,\n        description: newLocation.description,\n        backgroundMusic: newLocation.backgroundMusic || undefined,\n        entrySound: newLocation.entrySound || undefined,\n        imageUrl: newLocation.imageUrl || undefined,\n        descriptionType: newLocation.descriptionType,\n        coordinates: newLocation.coordinates.every(coord => coord !== 0) ? newLocation.coordinates : undefined,\n        parentLocationId: newLocation.parentLocationId || undefined,\n        mixWithParent: newLocation.mixWithParent,\n        connectedLocations: newLocation.connectedLocations.length > 0 ? newLocation.connectedLocations : undefined\n      });\n      \n      setIsEditDialogOpen(false);\n      resetNewLocationForm();\n      setEditingLocation(null);\n      showSnackbar('Location updated successfully');\n    }\n  };\n  \n  // Confirm and delete a location\n  const handleDeleteLocation = (locationId: string) => {\n    if (window.confirm('Are you sure you want to delete this location? This cannot be undone.')) {\n      deleteLocation(locationId);\n      showSnackbar('Location deleted successfully');\n    }\n  };\n  \n  // Save all data to IndexedDB\n  const handleSaveData = async () => {\n    setIsSaving(true);\n    try {\n      const result = await saveDataToIndexedDB();\n      showSnackbar(result.message);\n    } catch (error) {\n      showSnackbar(`Error saving data: ${error instanceof Error ? error.message : String(error)}`);\n    } finally {\n      setIsSaving(false);\n    }\n  };\n  \n  // Show a snackbar message\n  const showSnackbar = (message: string) => {\n    setSnackbarMessage(message);\n    setSnackbarOpen(true);\n  };\n  \n  // Close snackbar\n  const handleCloseSnackbar = () => {\n    setSnackbarOpen(false);\n  };\n  \n  // Recursive function to render all locations with nested structure\n  const renderLocation = (location: any, level = 0) => {\n    const isExpanded = expandedLocations[location.id] || false;\n    const sublocations = getSublocationsByParentId(location.id);\n    const hasSublocations = sublocations.length > 0;\n    \n    return (\n      <Box key={location.id} sx={{ mb: 2 }}>\n        <Card>\n          <CardContent>\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\n              <Box>\n                <Typography variant=\"h6\" component=\"div\">\n                  {location.name}\n                </Typography>\n                \n                {location.imageUrl && (\n                  <Box sx={{ \n                    mt: 1, \n                    mb: 2, \n                    display: 'flex', \n                    flexDirection: 'column',\n                    alignItems: 'center',\n                    height: 140,\n                    overflow: 'hidden',\n                    borderRadius: 1,\n                    border: '1px solid #ddd'\n                  }}>\n                    <Typography variant=\"caption\" sx={{ mt: 0.5, color: 'text.secondary', fontStyle: 'italic' }}>\n                      Map Background:\n                    </Typography>\n                    <Box sx={{ flex: 1, display: 'flex', justifyContent: 'center', alignItems: 'center', width: '100%' }}>\n                      <img \n                        src={`/images/${location.imageUrl}`}\n                        alt={`Map of ${location.name}`}\n                        style={{ \n                          maxWidth: '100%', \n                          maxHeight: '100%',\n                          objectFit: 'contain' \n                        }}\n                        onError={async (e) => {\n                          try {\n                            if (location.imageUrl) {\n                              const imageUrl = await AssetManager.getAssetUrl('images', location.imageUrl);\n                              if (imageUrl) {\n                                (e.target as HTMLImageElement).src = imageUrl;\n                              }\n                            }\n                          } catch (error) {\n                            console.error('Error loading location image:', error);\n                          }\n                        }}\n                      />\n                    </Box>\n                  </Box>\n                )}\n                \n                <Box\n                  onClick={() => {\n                    setViewingLocationDescription(location.description);\n                    setViewingLocationName(location.name);\n                    setShowDescriptionDialog(true);\n                  }}\n                  sx={{ \n                    cursor: 'pointer',\n                    '&:hover': {\n                      backgroundColor: 'rgba(0, 0, 0, 0.04)'\n                    },\n                    borderRadius: 1,\n                    p: 1,\n                    mt: 1\n                  }}\n                >\n                  <Box \n                    sx={{\n                      display: '-webkit-box',\n                      WebkitLineClamp: 2,\n                      WebkitBoxOrient: 'vertical',\n                      overflow: 'hidden',\n                      textOverflow: 'ellipsis'\n                    }}\n                  >\n                    <MarkdownContent content={location.description} />\n                  </Box>\n                  {location.description.length > 100 && (\n                    <Typography \n                      variant=\"caption\" \n                      color=\"primary\" \n                      sx={{ display: 'block', mt: 0.5 }}\n                    >\n                      Click to view full description\n                    </Typography>\n                  )}\n                </Box>\n                \n                <Box sx={{ mt: 1, display: 'flex', flexWrap: 'wrap', gap: 1 }}>\n                  {location.backgroundMusic && (\n                    <Chip \n                      icon={<MusicNoteIcon />} \n                      label={`Music: ${location.backgroundMusic}`} \n                      size=\"small\" \n                      variant=\"outlined\" \n                    />\n                  )}\n                  \n                  {location.entrySound && (\n                    <Chip \n                      icon={<VolumeUpIcon />} \n                      label={`Sound: ${location.entrySound}`} \n                      size=\"small\" \n                      variant=\"outlined\" \n                    />\n                  )}\n                  \n                  {location.coordinates && (\n                    <Chip \n                      label={`Coords: ${location.coordinates[0]}, ${location.coordinates[1]}`} \n                      size=\"small\" \n                      variant=\"outlined\" \n                    />\n                  )}\n                  \n                  {location.mixWithParent && (\n                    <Chip \n                      label=\"Mixes with parent\" \n                      size=\"small\" \n                      color=\"primary\" \n                      variant=\"outlined\" \n                    />\n                  )}\n                  \n                  {location.connectedLocations && location.connectedLocations.length > 0 && (\n                    <Chip \n                      label={`${location.connectedLocations.length} Connected Locations`}\n                      size=\"small\"\n                      color=\"success\"\n                      variant=\"outlined\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        const connectedNames = location.connectedLocations\n                          .map((id: string) => locations.find(loc => loc.id === id)?.name || 'Unknown')\n                          .join(', ');\n                        alert(`Connected to: ${connectedNames}`);\n                      }}\n                    />\n                  )}\n                </Box>\n              </Box>\n              \n              <Box>\n                <IconButton onClick={() => handleEditLocation(location.id)}>\n                  <EditIcon />\n                </IconButton>\n                <IconButton onClick={() => handleDeleteLocation(location.id)}>\n                  <DeleteIcon />\n                </IconButton>\n                {hasSublocations && (\n                  <IconButton onClick={() => toggleLocationExpand(location.id)}>\n                    {isExpanded ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n                  </IconButton>\n                )}\n              </Box>\n            </Box>\n          </CardContent>\n          \n          <CardActions sx={{ justifyContent: 'flex-end', pt: 0 }}>\n            <Button \n              size=\"small\" \n              startIcon={<AddIcon />}\n              onClick={() => {\n                setNewLocation({\n                  ...newLocation,\n                  parentLocationId: location.id\n                });\n                setIsAddDialogOpen(true);\n              }}\n            >\n              Add Sublocation\n            </Button>\n          </CardActions>\n        </Card>\n        \n        {/* Sublocations */}\n        {hasSublocations && isExpanded && (\n          <Box sx={{ pl: 4, mt: 1 }}>\n            {sublocations.map(subloc => renderLocation(subloc, level + 1))}\n          </Box>\n        )}\n      </Box>\n    );\n  };\n\n  return (\n    <Box sx={{ p: 3, maxWidth: 1200, mx: 'auto' }}>\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n        <Typography variant=\"h4\">Locations</Typography>\n        <Box>\n          <Button \n            variant=\"outlined\" \n            color=\"success\" \n            startIcon={<SaveIcon />} \n            onClick={handleSaveData}\n            disabled={isSaving}\n            sx={{ mr: 2 }}\n          >\n            {isSaving ? 'Saving...' : 'Save Changes'}\n          </Button>\n          \n          <Button \n            variant=\"contained\" \n            startIcon={<AddIcon />} \n            onClick={() => {\n              resetNewLocationForm();\n              setIsAddDialogOpen(true);\n            }}\n          >\n            Add Location\n          </Button>\n        </Box>\n      </Box>\n      \n      {locations.length === 0 ? (\n        <Paper sx={{ p: 3, textAlign: 'center' }}>\n          <Typography variant=\"h6\" color=\"text.secondary\" gutterBottom>\n            No Locations Yet\n          </Typography>\n          <Typography variant=\"body1\" color=\"text.secondary\" paragraph>\n            Add your first location to get started.\n          </Typography>\n          <Button \n            variant=\"contained\" \n            startIcon={<AddIcon />} \n            onClick={() => setIsAddDialogOpen(true)}\n          >\n            Add Location\n          </Button>\n        </Paper>\n      ) : (\n        // Locations list\n        <Box>\n          {topLevelLocations.map(location => renderLocation(location))}\n        </Box>\n      )}\n      \n      {/* Add Location Dialog */}\n      <Dialog open={isAddDialogOpen} onClose={() => setIsAddDialogOpen(false)} maxWidth=\"md\" fullWidth>\n        <DialogTitle>Add New Location</DialogTitle>\n        <DialogContent>\n          <Grid container spacing={2} sx={{ mt: 0.5 }}>\n            <Grid item xs={12} md={6}>\n              <TextField\n                label=\"Name\"\n                fullWidth\n                value={newLocation.name}\n                onChange={(e) => setNewLocation({ ...newLocation, name: e.target.value })}\n              />\n            </Grid>\n            \n            <Grid item xs={12} md={6}>\n              <Autocomplete\n                options={locations}\n                value={locations.find(loc => loc.id === newLocation.parentLocationId) || null}\n                onChange={(_, newValue) => setNewLocation({ \n                  ...newLocation, \n                  parentLocationId: newValue?.id || '' \n                })}\n                getOptionLabel={(option) => option.name}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    label=\"Parent Location\"\n                    fullWidth\n                  />\n                )}\n                isOptionEqualToValue={(option, value) => option.id === value.id}\n              />\n            </Grid>\n            \n            <Grid item xs={12}>\n              <FormControl fullWidth>\n                <InputLabel>Description Type</InputLabel>\n                <Select\n                  value={newLocation.descriptionType}\n                  label=\"Description Type\"\n                  onChange={(e) => setNewLocation({ \n                    ...newLocation, \n                    descriptionType: e.target.value as 'markdown' | 'image' | 'pdf' \n                  })}\n                >\n                  <MenuItem value=\"markdown\">Markdown</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n            \n            <Grid item xs={12}>\n              <TextField\n                label=\"Description\"\n                fullWidth\n                multiline\n                rows={3}\n                value={newLocation.description}\n                onChange={(e) => setNewLocation({ ...newLocation, description: e.target.value })}\n              />\n            </Grid>\n\n            {newLocation.descriptionType === 'markdown' && (\n              <Grid item xs={12}>\n                <Typography variant=\"subtitle2\" sx={{ mt: 1, mb: 1 }}>\n                  Preview\n                </Typography>\n                <Paper \n                  sx={{ \n                    p: 2, \n                    height: '200px', \n                    overflow: 'auto',\n                    bgcolor: 'background.default',\n                    border: 1,\n                    borderColor: 'divider'\n                  }}\n                >\n                  <MarkdownContent content={newLocation.description} />\n                </Paper>\n              </Grid>\n            )}\n            \n            <Grid item xs={12}>\n              <Autocomplete\n                multiple\n                options={locations.filter(loc => loc.id !== newLocation.parentLocationId)}\n                value={locations.filter(loc => newLocation.connectedLocations.includes(loc.id))}\n                onChange={(_, newValue) => setNewLocation({ \n                  ...newLocation, \n                  connectedLocations: newValue.map(item => item.id) \n                })}\n                getOptionLabel={(option) => option.name}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    label=\"Connected Locations\"\n                    fullWidth\n                    helperText=\"Select locations that are connected to this one\"\n                  />\n                )}\n                isOptionEqualToValue={(option, value) => option.id === value.id}\n                renderTags={(value, getTagProps) =>\n                  value.map((option, index) => (\n                    <Chip\n                      label={option.name}\n                      {...getTagProps({ index })}\n                      key={option.id}\n                    />\n                  ))\n                }\n              />\n            </Grid>\n            \n            <Grid item xs={12} md={6}>\n              <Autocomplete\n                options={audioFiles}\n                value={newLocation.backgroundMusic}\n                onChange={(_, newValue) => setNewLocation({ \n                  ...newLocation, \n                  backgroundMusic: newValue || '' \n                })}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    label=\"Background Music\"\n                    fullWidth\n                  />\n                )}\n                freeSolo\n              />\n            </Grid>\n            \n            <Grid item xs={12} md={6}>\n              <Autocomplete\n                options={audioFiles}\n                value={newLocation.entrySound}\n                onChange={(_, newValue) => setNewLocation({ \n                  ...newLocation, \n                  entrySound: newValue || '' \n                })}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    label=\"Entry Sound\"\n                    fullWidth\n                  />\n                )}\n                freeSolo\n              />\n            </Grid>\n            \n            <Grid item xs={12} md={6}>\n              <Autocomplete\n                options={imageFiles}\n                value={newLocation.imageUrl}\n                onChange={(_, newValue) => setNewLocation({ \n                  ...newLocation, \n                  imageUrl: newValue || '' \n                })}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    label=\"Background Image\"\n                    fullWidth\n                  />\n                )}\n                freeSolo\n              />\n            </Grid>\n            \n            <Grid item xs={12} md={6}>\n              <Grid container spacing={1}>\n                <Grid item xs={6}>\n                  <TextField\n                    label=\"X Coordinate\"\n                    type=\"number\"\n                    fullWidth\n                    value={newLocation.coordinates[0]}\n                    onChange={(e) => setNewLocation({\n                      ...newLocation,\n                      coordinates: [parseFloat(e.target.value), newLocation.coordinates[1]]\n                    })}\n                    InputProps={{\n                      inputProps: { min: 0, max: 1, step: 0.01 }\n                    }}\n                  />\n                </Grid>\n                <Grid item xs={6}>\n                  <TextField\n                    label=\"Y Coordinate\"\n                    type=\"number\"\n                    fullWidth\n                    value={newLocation.coordinates[1]}\n                    onChange={(e) => setNewLocation({\n                      ...newLocation,\n                      coordinates: [newLocation.coordinates[0], parseFloat(e.target.value)]\n                    })}\n                    InputProps={{\n                      inputProps: { min: 0, max: 1, step: 0.01 }\n                    }}\n                  />\n                </Grid>\n              </Grid>\n            </Grid>\n            \n            <Grid item xs={12}>\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={newLocation.mixWithParent}\n                    onChange={(e) => setNewLocation({ ...newLocation, mixWithParent: e.target.checked })}\n                  />\n                }\n                label=\"Mix audio with parent location\"\n              />\n              <Tooltip title=\"When enabled, entering this location will play its audio alongside the parent location's audio.\">\n                <IconButton size=\"small\">\n                  <HelpIcon fontSize=\"small\" />\n                </IconButton>\n              </Tooltip>\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setIsAddDialogOpen(false)}>Cancel</Button>\n          <Button \n            onClick={handleAddLocation} \n            variant=\"contained\"\n            disabled={!newLocation.name}\n          >\n            Add Location\n          </Button>\n        </DialogActions>\n      </Dialog>\n      \n      {/* Edit Location Dialog */}\n      <Dialog open={isEditDialogOpen} onClose={() => setIsEditDialogOpen(false)} maxWidth=\"md\" fullWidth>\n        <DialogTitle>Edit Location</DialogTitle>\n        <DialogContent>\n          <Grid container spacing={2} sx={{ mt: 0.5 }}>\n            <Grid item xs={12} md={6}>\n              <TextField\n                label=\"Name\"\n                fullWidth\n                value={newLocation.name}\n                onChange={(e) => setNewLocation({ ...newLocation, name: e.target.value })}\n              />\n            </Grid>\n            \n            <Grid item xs={12} md={6}>\n              <Autocomplete\n                options={locations.filter(loc => loc.id !== editingLocation)}\n                value={locations.find(loc => loc.id === newLocation.parentLocationId) || null}\n                onChange={(_, newValue) => setNewLocation({ \n                  ...newLocation, \n                  parentLocationId: newValue?.id || '' \n                })}\n                getOptionLabel={(option) => option.name}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    label=\"Parent Location\"\n                    fullWidth\n                  />\n                )}\n                isOptionEqualToValue={(option, value) => option.id === value.id}\n              />\n            </Grid>\n            \n            <Grid item xs={12}>\n              <FormControl fullWidth>\n                <InputLabel>Description Type</InputLabel>\n                <Select\n                  value={newLocation.descriptionType}\n                  label=\"Description Type\"\n                  onChange={(e) => setNewLocation({ \n                    ...newLocation, \n                    descriptionType: e.target.value as 'markdown' | 'image' | 'pdf' \n                  })}\n                >\n                  <MenuItem value=\"markdown\">Markdown</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n            \n            <Grid item xs={12}>\n              <TextField\n                label=\"Description\"\n                fullWidth\n                multiline\n                rows={3}\n                value={newLocation.description}\n                onChange={(e) => setNewLocation({ ...newLocation, description: e.target.value })}\n              />\n            </Grid>\n\n            {newLocation.descriptionType === 'markdown' && (\n              <Grid item xs={12}>\n                <Typography variant=\"subtitle2\" sx={{ mt: 1, mb: 1 }}>\n                  Preview\n                </Typography>\n                <Paper \n                  sx={{ \n                    p: 2, \n                    height: '200px', \n                    overflow: 'auto',\n                    bgcolor: 'background.default',\n                    border: 1,\n                    borderColor: 'divider'\n                  }}\n                >\n                  <MarkdownContent content={newLocation.description} />\n                </Paper>\n              </Grid>\n            )}\n            \n            <Grid item xs={12}>\n              <Autocomplete\n                multiple\n                options={locations.filter(loc => loc.id !== editingLocation && loc.id !== newLocation.parentLocationId)}\n                value={locations.filter(loc => newLocation.connectedLocations.includes(loc.id))}\n                onChange={(_, newValue) => setNewLocation({ \n                  ...newLocation, \n                  connectedLocations: newValue.map(item => item.id) \n                })}\n                getOptionLabel={(option) => option.name}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    label=\"Connected Locations\"\n                    fullWidth\n                    helperText=\"Select locations that are connected to this one\"\n                  />\n                )}\n                isOptionEqualToValue={(option, value) => option.id === value.id}\n                renderTags={(value, getTagProps) =>\n                  value.map((option, index) => (\n                    <Chip\n                      label={option.name}\n                      {...getTagProps({ index })}\n                      key={option.id}\n                    />\n                  ))\n                }\n              />\n            </Grid>\n            \n            <Grid item xs={12} md={6}>\n              <Autocomplete\n                options={audioFiles}\n                value={newLocation.backgroundMusic}\n                onChange={(_, newValue) => setNewLocation({ \n                  ...newLocation, \n                  backgroundMusic: newValue || '' \n                })}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    label=\"Background Music\"\n                    fullWidth\n                  />\n                )}\n                freeSolo\n              />\n            </Grid>\n            \n            <Grid item xs={12} md={6}>\n              <Autocomplete\n                options={audioFiles}\n                value={newLocation.entrySound}\n                onChange={(_, newValue) => setNewLocation({ \n                  ...newLocation, \n                  entrySound: newValue || '' \n                })}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    label=\"Entry Sound\"\n                    fullWidth\n                  />\n                )}\n                freeSolo\n              />\n            </Grid>\n            \n            <Grid item xs={12} md={6}>\n              <Autocomplete\n                options={imageFiles}\n                value={newLocation.imageUrl}\n                onChange={(_, newValue) => setNewLocation({ \n                  ...newLocation, \n                  imageUrl: newValue || '' \n                })}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    label=\"Background Image\"\n                    fullWidth\n                  />\n                )}\n                freeSolo\n              />\n            </Grid>\n            \n            <Grid item xs={12} md={6}>\n              <Grid container spacing={1}>\n                <Grid item xs={6}>\n                  <TextField\n                    label=\"X Coordinate\"\n                    type=\"number\"\n                    fullWidth\n                    value={newLocation.coordinates[0]}\n                    onChange={(e) => setNewLocation({\n                      ...newLocation,\n                      coordinates: [parseFloat(e.target.value), newLocation.coordinates[1]]\n                    })}\n                    InputProps={{\n                      inputProps: { min: 0, max: 1, step: 0.01 }\n                    }}\n                  />\n                </Grid>\n                <Grid item xs={6}>\n                  <TextField\n                    label=\"Y Coordinate\"\n                    type=\"number\"\n                    fullWidth\n                    value={newLocation.coordinates[1]}\n                    onChange={(e) => setNewLocation({\n                      ...newLocation,\n                      coordinates: [newLocation.coordinates[0], parseFloat(e.target.value)]\n                    })}\n                    InputProps={{\n                      inputProps: { min: 0, max: 1, step: 0.01 }\n                    }}\n                  />\n                </Grid>\n              </Grid>\n            </Grid>\n            \n            <Grid item xs={12}>\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={newLocation.mixWithParent}\n                    onChange={(e) => setNewLocation({ ...newLocation, mixWithParent: e.target.checked })}\n                  />\n                }\n                label=\"Mix audio with parent location\"\n              />\n              <Tooltip title=\"When enabled, entering this location will play its audio alongside the parent location's audio.\">\n                <IconButton size=\"small\">\n                  <HelpIcon fontSize=\"small\" />\n                </IconButton>\n              </Tooltip>\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setIsEditDialogOpen(false)}>Cancel</Button>\n          <Button \n            onClick={handleSaveLocation} \n            variant=\"contained\"\n            disabled={!newLocation.name}\n          >\n            Save Changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n      \n      {/* Snackbar for notifications */}\n      <Snackbar\n        open={snackbarOpen}\n        autoHideDuration={6000}\n        onClose={handleCloseSnackbar}\n        message={snackbarMessage}\n      />\n      \n      {/* Include the AudioTrackPanel */}\n      <AudioTrackPanel />\n      \n      {/* Description Dialog */}\n      <Dialog\n        open={showDescriptionDialog}\n        onClose={() => setShowDescriptionDialog(false)}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>\n          {viewingLocationName} - Description\n          <IconButton\n            aria-label=\"close\"\n            onClick={() => setShowDescriptionDialog(false)}\n            sx={{ position: 'absolute', right: 8, top: 8 }}\n          >\n            <CloseIcon />\n          </IconButton>\n        </DialogTitle>\n        <DialogContent dividers>\n          <MarkdownContent content={viewingLocationDescription} />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setShowDescriptionDialog(false)}>Close</Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n}; "],"names":["_interopRequireDefault","require$$0","ExpandLess","default_1","_createSvgIcon","require$$1","_jsxRuntime","require$$2","MusicNote","LocationsView","isAddDialogOpen","setIsAddDialogOpen","useState","isEditDialogOpen","setIsEditDialogOpen","snackbarOpen","setSnackbarOpen","snackbarMessage","setSnackbarMessage","newLocation","setNewLocation","editingLocation","setEditingLocation","audioFiles","setAudioFiles","imageFiles","setImageFiles","isSaving","setIsSaving","expandedLocations","setExpandedLocations","showDescriptionDialog","setShowDescriptionDialog","viewingLocationDescription","setViewingLocationDescription","viewingLocationName","setViewingLocationName","locations","addLocation","updateLocation","deleteLocation","getAllTopLevelLocations","getSublocationsByParentId","saveDataToIndexedDB","useStore","topLevelLocations","useEffect","audioAssets","AssetManager","asset","imageAssets","error","handleAddLocation","coord","resetNewLocationForm","showSnackbar","toggleLocationExpand","locationId","prev","handleEditLocation","location","loc","handleSaveLocation","handleDeleteLocation","handleSaveData","result","message","handleCloseSnackbar","renderLocation","level","isExpanded","sublocations","hasSublocations","Box","jsxs","Card","jsx","CardContent","Typography","e","imageUrl","MarkdownContent","Chip","MusicNoteIcon","VolumeUpIcon","connectedNames","id","_a","IconButton","EditIcon","DeleteIcon","ExpandLessIcon","ExpandMoreIcon","CardActions","Button","AddIcon","subloc","SaveIcon","Paper","Dialog","DialogTitle","DialogContent","Grid","TextField","Autocomplete","_","newValue","option","params","value","FormControl","InputLabel","Select","MenuItem","item","getTagProps","index","createElement","FormControlLabel","Switch","Tooltip","HelpIcon","DialogActions","Snackbar","AudioTrackPanel","CloseIcon"],"mappings":"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","x_google_ignoreList":[0,1]}
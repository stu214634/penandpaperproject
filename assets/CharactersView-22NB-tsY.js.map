{"version":3,"file":"CharactersView-22NB-tsY.js","sources":["../../node_modules/@mui/icons-material/Store.js","../../node_modules/@mui/icons-material/Inventory.js","../../node_modules/@mui/icons-material/VideogameAsset.js","../../src/pages/CharactersView.tsx"],"sourcesContent":["\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M20 4H4v2h16zm1 10v-2l-1-5H4l-1 5v2h1v6h10v-6h4v6h2v-6zm-9 4H6v-4h6z\"\n}), 'Store');","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M20 2H4c-1 0-2 .9-2 2v3.01c0 .72.43 1.34 1 1.69V20c0 1.1 1.1 2 2 2h14c.9 0 2-.9 2-2V8.7c.57-.35 1-.97 1-1.69V4c0-1.1-1-2-2-2m-5 12H9v-2h6zm5-7H4V4l16-.02z\"\n}), 'Inventory');","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M21 6H3c-1.1 0-2 .9-2 2v8c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2m-10 7H8v3H6v-3H3v-2h3V8h2v3h3zm4.5 2c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5m4-3c-.83 0-1.5-.67-1.5-1.5S18.67 9 19.5 9s1.5.67 1.5 1.5-.67 1.5-1.5 1.5\"\n}), 'VideogameAsset');","import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  Button,\n  Card,\n  CardContent,\n  CardActions,\n  Grid,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  IconButton,\n  Paper,\n  Chip,\n  Divider,\n  Snackbar,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n  Alert,\n  CircularProgress,\n  Tabs,\n  Tab,\n  Autocomplete,\n  Tooltip\n} from '@mui/material';\nimport AddIcon from '@mui/icons-material/Add';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport SaveIcon from '@mui/icons-material/Save';\nimport PersonIcon from '@mui/icons-material/Person';\nimport StoreIcon from '@mui/icons-material/Store';\nimport InventoryIcon from '@mui/icons-material/Inventory';\nimport PlaceIcon from '@mui/icons-material/Place';\nimport SportsKabaddiIcon from '@mui/icons-material/SportsKabaddi';\nimport VideogameAssetIcon from '@mui/icons-material/VideogameAsset';\nimport HelpIcon from '@mui/icons-material/Help';\nimport ReactMarkdown from 'react-markdown';\nimport { useStore } from '../store';\nimport { AudioTrackPanel } from '../components/AudioTrackPanel';\nimport { AssetManager } from '../services/assetManager';\nimport { Character } from '../store';\nimport MarkdownContent from '../components/MarkdownContent';\n\nexport const CharactersView: React.FC = () => {\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState('');\n  const [isSaving, setIsSaving] = useState(false);\n  const [imageAssets, setImageAssets] = useState<string[]>([]);\n  \n  const { \n    characters, \n    addCharacter, \n    updateCharacter, \n    deleteCharacter, \n    saveDataToIndexedDB,\n    locations\n  } = useStore();\n  \n  // New character form data\n  const [newCharacter, setNewCharacter] = useState({\n    name: '',\n    description: '',\n    type: 'npc' as 'npc' | 'merchant' | 'enemy' | 'player',\n    locationId: '',\n    descriptionType: 'markdown' as 'markdown' | 'image' | 'pdf',\n    descriptionAssetName: '',\n    hp: 10 as number | string  // Modified to allow string during editing\n  });\n  \n  // Currently editing character id\n  const [editingCharacter, setEditingCharacter] = useState<string | null>(null);\n  \n  // Load image assets\n  useEffect(() => {\n    if (isAddDialogOpen || isEditDialogOpen) {\n      const loadAssets = async () => {\n        const imageAssetsData = await AssetManager.getAssets('images');\n        setImageAssets(imageAssetsData.map(asset => asset.name));\n      };\n      loadAssets();\n    }\n  }, [isAddDialogOpen, isEditDialogOpen]);\n  \n  // Add a new character\n  const handleAddCharacter = () => {\n    const character: Omit<Character, 'id'> = {\n      name: newCharacter.name,\n      description: newCharacter.description,\n      type: newCharacter.type,\n      hp: typeof newCharacter.hp === 'string' \n           ? (parseInt(newCharacter.hp) || 1) \n           : (newCharacter.hp || 1)  // Ensure we always have a valid number\n    };\n    \n    if (newCharacter.locationId) {\n      character.locationId = newCharacter.locationId;\n    }\n    \n    character.descriptionType = newCharacter.descriptionType;\n    \n    if (newCharacter.descriptionAssetName) {\n      character.descriptionAssetName = newCharacter.descriptionAssetName;\n    }\n    \n    addCharacter(character);\n    \n    setIsAddDialogOpen(false);\n    resetCharacterForm();\n    showSnackbar('Character added successfully');\n  };\n  \n  // Reset the character form\n  const resetCharacterForm = () => {\n    setNewCharacter({\n      name: '',\n      description: '',\n      type: 'npc',\n      locationId: '',\n      descriptionType: 'markdown',\n      descriptionAssetName: '',\n      hp: 10\n    });\n  };\n  \n  // Open edit dialog for a character\n  const handleEditCharacter = (characterId: string) => {\n    const character = characters.find(char => char.id === characterId);\n    if (character) {\n      setEditingCharacter(characterId);\n      setNewCharacter({\n        name: character.name,\n        description: character.description,\n        type: character.type,\n        locationId: character.locationId || '',\n        descriptionType: character.descriptionType || 'markdown',\n        descriptionAssetName: character.descriptionAssetName || '',\n        hp: character.hp\n      });\n      setIsEditDialogOpen(true);\n    }\n  };\n  \n  // Save edited character\n  const handleSaveCharacter = () => {\n    if (editingCharacter) {\n      const characterUpdate: Partial<Omit<Character, 'id'>> = {\n        name: newCharacter.name,\n        description: newCharacter.description,\n        type: newCharacter.type,\n        hp: typeof newCharacter.hp === 'string' \n            ? (parseInt(newCharacter.hp) || 1) \n            : (newCharacter.hp || 1),  // Ensure we always have a valid number\n        descriptionType: newCharacter.descriptionType\n      };\n      \n      if (newCharacter.locationId) {\n        characterUpdate.locationId = newCharacter.locationId;\n      }\n      \n      if (newCharacter.descriptionAssetName) {\n        characterUpdate.descriptionAssetName = newCharacter.descriptionAssetName;\n      }\n      \n      updateCharacter(editingCharacter, characterUpdate);\n      \n      setIsEditDialogOpen(false);\n      resetCharacterForm();\n      showSnackbar('Character updated successfully');\n    }\n  };\n  \n  // Confirm and delete a character\n  const handleDeleteCharacter = (characterId: string) => {\n    if (window.confirm('Are you sure you want to delete this character? This cannot be undone.')) {\n      deleteCharacter(characterId);\n      showSnackbar('Character deleted successfully');\n    }\n  };\n  \n  // Save all data to IndexedDB\n  const handleSaveData = async () => {\n    setIsSaving(true);\n    try {\n      const result = await saveDataToIndexedDB();\n      showSnackbar(result.message);\n    } catch (error) {\n      showSnackbar(`Error saving data: ${error instanceof Error ? error.message : String(error)}`);\n    } finally {\n      setIsSaving(false);\n    }\n  };\n  \n  // Show a snackbar message\n  const showSnackbar = (message: string) => {\n    setSnackbarMessage(message);\n    setSnackbarOpen(true);\n  };\n  \n  // Close snackbar\n  const handleCloseSnackbar = () => {\n    setSnackbarOpen(false);\n  };\n  \n  // Render a character card\n  const renderCharacterCard = (character: Character) => {\n    const location = character.locationId \n      ? locations.find(loc => loc.id === character.locationId)\n      : null;\n      \n    return (\n      <Grid item xs={12} sm={6} md={5} key={character.id}>\n        <Card>\n          <CardContent>\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\n              <Box>\n                <Typography variant=\"h6\">\n                  {character.name}\n                </Typography>\n                \n                <Box sx={{ display: 'flex', alignItems: 'center', mt: 1 }}>\n                  <Chip\n                    icon={\n                      character.type === 'npc' ? <PersonIcon /> : \n                      character.type === 'merchant' ? <StoreIcon /> : \n                      character.type === 'enemy' ? <SportsKabaddiIcon /> :\n                      <VideogameAssetIcon />\n                    }\n                    label={\n                      character.type === 'npc' ? 'NPC' : \n                      character.type === 'merchant' ? 'Merchant' : \n                      character.type === 'enemy' ? 'Enemy' : 'Player'\n                    }\n                    size=\"small\"\n                    color={\n                      character.type === 'npc' ? 'primary' : \n                      character.type === 'merchant' ? 'secondary' : \n                      character.type === 'enemy' ? 'error' : \n                      'success'\n                    }\n                    variant=\"outlined\"\n                  />\n                  \n                  {location && (\n                    <Chip\n                      icon={<PlaceIcon />}\n                      label={location.name}\n                      size=\"small\"\n                      color=\"info\"\n                      variant=\"outlined\"\n                      sx={{ ml: 1 }}\n                    />\n                  )}\n                  <Chip\n                    label={`HP: ${character.hp}`}\n                    size=\"small\"\n                    color=\"default\"\n                    variant=\"outlined\"\n                    sx={{ ml: 1 }}\n                  />\n                </Box>\n                \n                <Box sx={{ mt: 1, mb: 2 }}>\n                  {character.descriptionType === 'markdown' && (\n                    <MarkdownContent \n                      content={character.description} \n                      sx={{\n                        '& table': {\n                          display: 'block',\n                          maxWidth: '100%',\n                          overflow: 'auto',\n                          whiteSpace: 'nowrap',\n                        },\n                        '& th, & td': {\n                          px: 1,\n                          py: 0.5,\n                          fontSize: '0.8rem',\n                        }\n                      }}\n                    />\n                  )}\n                  {character.descriptionType !== 'markdown' && (\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      {character.description}\n                    </Typography>\n                  )}\n                </Box>\n                \n                {character.inventory && character.inventory.length > 0 && (\n                  <>\n                    <Divider sx={{ my: 2 }} />\n                    <Typography variant=\"subtitle2\" gutterBottom>\n                      <InventoryIcon fontSize=\"small\" sx={{ verticalAlign: 'middle', mr: 0.5 }} />\n                      Inventory ({character.inventory.length})\n                    </Typography>\n                    <List dense>\n                      {character.inventory.slice(0, 3).map((item: any) => (\n                        <ListItem key={item.id} disablePadding>\n                          <ListItemText \n                            primary={item.name} \n                            secondary={`Qty: ${item.quantity}${item.price ? ` - Price: ${item.price}` : ''}`} \n                          />\n                        </ListItem>\n                      ))}\n                      {character.inventory.length > 3 && (\n                        <ListItem disablePadding>\n                          <ListItemText \n                            primary={`+ ${character.inventory.length - 3} more items`} \n                            primaryTypographyProps={{ variant: 'caption' }}\n                          />\n                        </ListItem>\n                      )}\n                    </List>\n                  </>\n                )}\n              </Box>\n              \n              <Box>\n                <IconButton onClick={() => handleEditCharacter(character.id)}>\n                  <EditIcon />\n                </IconButton>\n                <IconButton onClick={() => handleDeleteCharacter(character.id)}>\n                  <DeleteIcon />\n                </IconButton>\n              </Box>\n            </Box>\n          </CardContent>\n        </Card>\n      </Grid>\n    );\n  };\n  \n  return (\n    <Box sx={{ p: 3, maxWidth: 1200, mx: 'auto' }}>\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n        <Typography variant=\"h4\">Characters</Typography>\n        <Box>\n          <Button \n            variant=\"outlined\" \n            color=\"success\" \n            startIcon={<SaveIcon />} \n            onClick={handleSaveData}\n            disabled={isSaving}\n            sx={{ mr: 2 }}\n          >\n            {isSaving ? <CircularProgress size={24} /> : 'Save Changes'}\n          </Button>\n          \n          <Button \n            variant=\"contained\" \n            startIcon={<AddIcon />} \n            onClick={() => {\n              resetCharacterForm();\n              setIsAddDialogOpen(true);\n            }}\n          >\n            Add Character\n          </Button>\n        </Box>\n      </Box>\n      \n      {characters.length === 0 ? (\n        <Paper sx={{ p: 3, textAlign: 'center' }}>\n          <Typography variant=\"h6\" color=\"text.secondary\" gutterBottom>\n            No Characters Yet\n          </Typography>\n          <Typography variant=\"body1\" color=\"text.secondary\" paragraph>\n            Add your first character to get started.\n          </Typography>\n          <Button \n            variant=\"contained\" \n            startIcon={<AddIcon />} \n            onClick={() => setIsAddDialogOpen(true)}\n          >\n            Add Character\n          </Button>\n        </Paper>\n      ) : (\n        <Grid container spacing={3}>\n          {characters.map(character => renderCharacterCard(character))}\n        </Grid>\n      )}\n      \n      {/* Add Character Dialog */}\n      <Dialog open={isAddDialogOpen} onClose={() => setIsAddDialogOpen(false)} maxWidth=\"md\" fullWidth>\n        <DialogTitle>Add New Character</DialogTitle>\n        <DialogContent>\n          <Grid container spacing={2} sx={{ mt: 0.5 }}>\n            <Grid item xs={12} md={8}>\n              <TextField\n                label=\"Name\"\n                fullWidth\n                value={newCharacter.name}\n                onChange={(e) => setNewCharacter({ ...newCharacter, name: e.target.value })}\n              />\n            </Grid>\n            \n            <Grid item xs={12} md={4}>\n              <FormControl fullWidth>\n                <InputLabel>Character Type</InputLabel>\n                <Select\n                  value={newCharacter.type}\n                  label=\"Character Type\"\n                  onChange={(e) => setNewCharacter({ \n                    ...newCharacter, \n                    type: e.target.value as 'npc' | 'merchant' | 'enemy' | 'player' \n                  })}\n                >\n                  <MenuItem value=\"npc\">NPC</MenuItem>\n                  <MenuItem value=\"merchant\">Merchant</MenuItem>\n                  <MenuItem value=\"enemy\">Enemy</MenuItem>\n                  <MenuItem value=\"player\">Player Character</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n            \n            <Grid item xs={12} md={4}>\n              <TextField\n                label=\"Hit Points (HP)\"\n                fullWidth\n                value={newCharacter.hp}\n                onChange={(e) => {\n                  const value = e.target.value;\n                  // Allow empty string for easier editing\n                  if (value === '') {\n                    setNewCharacter({\n                      ...newCharacter,\n                      hp: ''\n                    });\n                  } else {\n                    // Try to parse as integer, but don't force conversion yet\n                    const parsed = parseInt(value);\n                    if (!isNaN(parsed)) {\n                      setNewCharacter({\n                        ...newCharacter,\n                        hp: parsed\n                      });\n                    }\n                  }\n                }}\n                onBlur={() => {\n                  // When field loses focus, ensure we have a valid number\n                  const hp = newCharacter.hp;\n                  if (hp === '' || hp === null || isNaN(Number(hp))) {\n                    setNewCharacter({\n                      ...newCharacter,\n                      hp: 1\n                    });\n                  }\n                }}\n                helperText=\"Minimum value is 1\"\n              />\n            </Grid>\n            \n            <Grid item xs={12}>\n              <Autocomplete\n                options={locations}\n                value={locations.find(loc => loc.id === newCharacter.locationId) || null}\n                onChange={(_, newValue) => setNewCharacter({ \n                  ...newCharacter, \n                  locationId: newValue?.id || '' \n                })}\n                getOptionLabel={(option) => option.name}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    label=\"Location\"\n                    fullWidth\n                  />\n                )}\n                isOptionEqualToValue={(option, value) => option.id === value.id}\n              />\n            </Grid>\n            \n            <Grid item xs={12}>\n              <FormControl fullWidth>\n                <InputLabel>Description Type</InputLabel>\n                <Select\n                  value={newCharacter.descriptionType}\n                  label=\"Description Type\"\n                  onChange={(e) => setNewCharacter({ \n                    ...newCharacter, \n                    descriptionType: e.target.value as 'markdown' | 'image' | 'pdf' \n                  })}\n                >\n                  <MenuItem value=\"markdown\">Markdown</MenuItem>\n                  <MenuItem value=\"image\">Image</MenuItem>\n                  <MenuItem value=\"pdf\">PDF</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n            \n            {newCharacter.descriptionType === 'markdown' ? (\n              <>\n                <Grid item xs={12}>\n                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                    <Typography variant=\"subtitle2\">Description</Typography>\n                    <Tooltip title={\n                      <>\n                        <Typography variant=\"caption\" sx={{ display: 'block', fontWeight: 'bold' }}>\n                          Markdown Table Example:\n                        </Typography>\n                        <Typography variant=\"caption\" component=\"pre\" sx={{ display: 'block', mt: 1, fontFamily: 'monospace' }}>\n                          | Header 1 | Header 2 | Header 3 |\\n\n                          | -------- | -------- | -------- |\\n\n                          | Cell 1   | Cell 2   | Cell 3   |\\n\n                          | Cell 4   | Cell 5   | Cell 6   |\n                        </Typography>\n                      </>\n                    }>\n                      <IconButton size=\"small\" sx={{ ml: 1 }}>\n                        <HelpIcon fontSize=\"small\" />\n                      </IconButton>\n                    </Tooltip>\n                  </Box>\n                  <TextField\n                    multiline\n                    rows={6}\n                    fullWidth\n                    value={newCharacter.description}\n                    onChange={(e) => setNewCharacter({ ...newCharacter, description: e.target.value })}\n                  />\n                </Grid>\n                \n                <Grid item xs={12}>\n                  <Typography variant=\"subtitle2\" sx={{ mt: 1, mb: 1 }}>\n                    Preview\n                  </Typography>\n                  <Paper \n                    sx={{ \n                      p: 2, \n                      height: '200px', \n                      overflow: 'auto',\n                      bgcolor: 'background.default',\n                      border: 1,\n                      borderColor: 'divider'\n                    }}\n                  >\n                    <MarkdownContent content={newCharacter.description} />\n                  </Paper>\n                </Grid>\n              </>\n            ) : newCharacter.descriptionType === 'image' || newCharacter.descriptionType === 'pdf' ? (\n              <>\n                <Grid item xs={12}>\n                  <Autocomplete\n                    options={imageAssets}\n                    value={newCharacter.descriptionAssetName || null}\n                    onChange={(_, newValue) => setNewCharacter({ \n                      ...newCharacter, \n                      descriptionAssetName: newValue || '' \n                    })}\n                    renderInput={(params) => (\n                      <TextField\n                        {...params}\n                        label=\"Description Asset\"\n                        fullWidth\n                        helperText={`Select a ${newCharacter.descriptionType} file from assets`}\n                      />\n                    )}\n                  />\n                </Grid>\n                \n                <Grid item xs={12}>\n                  <TextField\n                    label=\"Brief Description\"\n                    multiline\n                    rows={3}\n                    fullWidth\n                    value={newCharacter.description}\n                    onChange={(e) => setNewCharacter({ ...newCharacter, description: e.target.value })}\n                    helperText=\"Add a brief description text to show in lists\"\n                  />\n                </Grid>\n              </>\n            ) : null}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setIsAddDialogOpen(false)}>Cancel</Button>\n          <Button \n            onClick={handleAddCharacter} \n            variant=\"contained\"\n            disabled={!newCharacter.name}\n          >\n            Add Character\n          </Button>\n        </DialogActions>\n      </Dialog>\n      \n      {/* Edit Character Dialog */}\n      <Dialog open={isEditDialogOpen} onClose={() => setIsEditDialogOpen(false)} maxWidth=\"md\" fullWidth>\n        <DialogTitle>Edit Character</DialogTitle>\n        <DialogContent>\n          <Grid container spacing={2} sx={{ mt: 0.5 }}>\n            <Grid item xs={12} md={8}>\n              <TextField\n                label=\"Name\"\n                fullWidth\n                value={newCharacter.name}\n                onChange={(e) => setNewCharacter({ ...newCharacter, name: e.target.value })}\n              />\n            </Grid>\n            \n            <Grid item xs={12} md={4}>\n              <FormControl fullWidth>\n                <InputLabel>Character Type</InputLabel>\n                <Select\n                  value={newCharacter.type}\n                  label=\"Character Type\"\n                  onChange={(e) => setNewCharacter({ \n                    ...newCharacter, \n                    type: e.target.value as 'npc' | 'merchant' | 'enemy' | 'player' \n                  })}\n                >\n                  <MenuItem value=\"npc\">NPC</MenuItem>\n                  <MenuItem value=\"merchant\">Merchant</MenuItem>\n                  <MenuItem value=\"enemy\">Enemy</MenuItem>\n                  <MenuItem value=\"player\">Player Character</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n            \n            <Grid item xs={12} md={4}>\n              <TextField\n                label=\"Hit Points (HP)\"\n                fullWidth\n                value={newCharacter.hp}\n                onChange={(e) => {\n                  const value = e.target.value;\n                  // Allow empty string for easier editing\n                  if (value === '') {\n                    setNewCharacter({\n                      ...newCharacter,\n                      hp: ''\n                    });\n                  } else {\n                    // Try to parse as integer, but don't force conversion yet\n                    const parsed = parseInt(value);\n                    if (!isNaN(parsed)) {\n                      setNewCharacter({\n                        ...newCharacter,\n                        hp: parsed\n                      });\n                    }\n                  }\n                }}\n                onBlur={() => {\n                  // When field loses focus, ensure we have a valid number\n                  const hp = newCharacter.hp;\n                  if (hp === '' || hp === null || isNaN(Number(hp))) {\n                    setNewCharacter({\n                      ...newCharacter,\n                      hp: 1\n                    });\n                  }\n                }}\n                helperText=\"Minimum value is 1\"\n              />\n            </Grid>\n            \n            <Grid item xs={12}>\n              <Autocomplete\n                options={locations}\n                value={locations.find(loc => loc.id === newCharacter.locationId) || null}\n                onChange={(_, newValue) => setNewCharacter({ \n                  ...newCharacter, \n                  locationId: newValue?.id || '' \n                })}\n                getOptionLabel={(option) => option.name}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    label=\"Location\"\n                    fullWidth\n                  />\n                )}\n                isOptionEqualToValue={(option, value) => option.id === value.id}\n              />\n            </Grid>\n            \n            <Grid item xs={12}>\n              <FormControl fullWidth>\n                <InputLabel>Description Type</InputLabel>\n                <Select\n                  value={newCharacter.descriptionType}\n                  label=\"Description Type\"\n                  onChange={(e) => setNewCharacter({ \n                    ...newCharacter, \n                    descriptionType: e.target.value as 'markdown' | 'image' | 'pdf' \n                  })}\n                >\n                  <MenuItem value=\"markdown\">Markdown</MenuItem>\n                  <MenuItem value=\"image\">Image</MenuItem>\n                  <MenuItem value=\"pdf\">PDF</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n            \n            {newCharacter.descriptionType === 'markdown' ? (\n              <>\n                <Grid item xs={12}>\n                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                    <Typography variant=\"subtitle2\">Description</Typography>\n                    <Tooltip title={\n                      <>\n                        <Typography variant=\"caption\" sx={{ display: 'block', fontWeight: 'bold' }}>\n                          Markdown Table Example:\n                        </Typography>\n                        <Typography variant=\"caption\" component=\"pre\" sx={{ display: 'block', mt: 1, fontFamily: 'monospace' }}>\n                          | Header 1 | Header 2 | Header 3 |\\n\n                          | -------- | -------- | -------- |\\n\n                          | Cell 1   | Cell 2   | Cell 3   |\\n\n                          | Cell 4   | Cell 5   | Cell 6   |\n                        </Typography>\n                      </>\n                    }>\n                      <IconButton size=\"small\" sx={{ ml: 1 }}>\n                        <HelpIcon fontSize=\"small\" />\n                      </IconButton>\n                    </Tooltip>\n                  </Box>\n                  <TextField\n                    multiline\n                    rows={6}\n                    fullWidth\n                    value={newCharacter.description}\n                    onChange={(e) => setNewCharacter({ ...newCharacter, description: e.target.value })}\n                  />\n                </Grid>\n                \n                <Grid item xs={12}>\n                  <Typography variant=\"subtitle2\" sx={{ mt: 1, mb: 1 }}>\n                    Preview\n                  </Typography>\n                  <Paper \n                    sx={{ \n                      p: 2, \n                      height: '200px', \n                      overflow: 'auto',\n                      bgcolor: 'background.default',\n                      border: 1,\n                      borderColor: 'divider'\n                    }}\n                  >\n                    <MarkdownContent content={newCharacter.description} />\n                  </Paper>\n                </Grid>\n              </>\n            ) : newCharacter.descriptionType === 'image' || newCharacter.descriptionType === 'pdf' ? (\n              <>\n                <Grid item xs={12}>\n                  <Autocomplete\n                    options={imageAssets}\n                    value={newCharacter.descriptionAssetName || null}\n                    onChange={(_, newValue) => setNewCharacter({ \n                      ...newCharacter, \n                      descriptionAssetName: newValue || '' \n                    })}\n                    renderInput={(params) => (\n                      <TextField\n                        {...params}\n                        label=\"Description Asset\"\n                        fullWidth\n                        helperText={`Select a ${newCharacter.descriptionType} file from assets`}\n                      />\n                    )}\n                  />\n                </Grid>\n                \n                <Grid item xs={12}>\n                  <TextField\n                    label=\"Brief Description\"\n                    multiline\n                    rows={3}\n                    fullWidth\n                    value={newCharacter.description}\n                    onChange={(e) => setNewCharacter({ ...newCharacter, description: e.target.value })}\n                    helperText=\"Add a brief description text to show in lists\"\n                  />\n                </Grid>\n              </>\n            ) : null}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setIsEditDialogOpen(false)}>Cancel</Button>\n          <Button \n            onClick={handleSaveCharacter} \n            variant=\"contained\"\n            disabled={!newCharacter.name}\n          >\n            Save Changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n      \n      {/* Snackbar for notifications */}\n      <Snackbar\n        open={snackbarOpen}\n        autoHideDuration={6000}\n        onClose={handleCloseSnackbar}\n      >\n        <Alert onClose={handleCloseSnackbar} severity=\"success\" sx={{ width: '100%' }}>\n          {snackbarMessage}\n        </Alert>\n      </Snackbar>\n      \n      {/* Include the AudioTrackPanel */}\n      <AudioTrackPanel />\n    </Box>\n  );\n}; "],"names":["_interopRequireDefault","require$$0","Store","default_1","_createSvgIcon","require$$1","_jsxRuntime","require$$2","Inventory","VideogameAsset","CharactersView","isAddDialogOpen","setIsAddDialogOpen","useState","isEditDialogOpen","setIsEditDialogOpen","snackbarOpen","setSnackbarOpen","snackbarMessage","setSnackbarMessage","isSaving","setIsSaving","imageAssets","setImageAssets","characters","addCharacter","updateCharacter","deleteCharacter","saveDataToIndexedDB","locations","useStore","newCharacter","setNewCharacter","editingCharacter","setEditingCharacter","useEffect","imageAssetsData","AssetManager","asset","handleAddCharacter","character","resetCharacterForm","showSnackbar","handleEditCharacter","characterId","char","handleSaveCharacter","characterUpdate","handleDeleteCharacter","handleSaveData","result","error","message","handleCloseSnackbar","renderCharacterCard","location","loc","jsx","Grid","Card","CardContent","jsxs","Box","Typography","Chip","PersonIcon","StoreIcon","SportsKabaddiIcon","VideogameAssetIcon","PlaceIcon","MarkdownContent","Fragment","Divider","InventoryIcon","List","item","ListItem","ListItemText","IconButton","EditIcon","DeleteIcon","Button","SaveIcon","CircularProgress","AddIcon","Paper","Dialog","DialogTitle","DialogContent","TextField","e","FormControl","InputLabel","Select","MenuItem","value","parsed","hp","Autocomplete","_","newValue","option","params","Tooltip","HelpIcon","DialogActions","Snackbar","Alert","AudioTrackPanel"],"mappings":"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","x_google_ignoreList":[0,1,2]}
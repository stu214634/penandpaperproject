{"version":3,"file":"CharactersView-C6BXhL6R.js","sources":["../../node_modules/@mui/icons-material/Store.js","../../node_modules/@mui/icons-material/Inventory.js","../../node_modules/@mui/icons-material/VideogameAsset.js","../../src/pages/CharactersView.tsx"],"sourcesContent":["\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M20 4H4v2h16zm1 10v-2l-1-5H4l-1 5v2h1v6h10v-6h4v6h2v-6zm-9 4H6v-4h6z\"\n}), 'Store');","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M20 2H4c-1 0-2 .9-2 2v3.01c0 .72.43 1.34 1 1.69V20c0 1.1 1.1 2 2 2h14c.9 0 2-.9 2-2V8.7c.57-.35 1-.97 1-1.69V4c0-1.1-1-2-2-2m-5 12H9v-2h6zm5-7H4V4l16-.02z\"\n}), 'Inventory');","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M21 6H3c-1.1 0-2 .9-2 2v8c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2m-10 7H8v3H6v-3H3v-2h3V8h2v3h3zm4.5 2c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5m4-3c-.83 0-1.5-.67-1.5-1.5S18.67 9 19.5 9s1.5.67 1.5 1.5-.67 1.5-1.5 1.5\"\n}), 'VideogameAsset');","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  CardActions,\r\n  Grid,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  Select,\r\n  MenuItem,\r\n  FormControl,\r\n  InputLabel,\r\n  IconButton,\r\n  Paper,\r\n  Chip,\r\n  Divider,\r\n  Snackbar,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemSecondaryAction,\r\n  Alert,\r\n  CircularProgress,\r\n  Tabs,\r\n  Tab,\r\n  Autocomplete\r\n} from '@mui/material';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport SaveIcon from '@mui/icons-material/Save';\r\nimport PersonIcon from '@mui/icons-material/Person';\r\nimport StoreIcon from '@mui/icons-material/Store';\r\nimport InventoryIcon from '@mui/icons-material/Inventory';\r\nimport PlaceIcon from '@mui/icons-material/Place';\r\nimport SportsKabaddiIcon from '@mui/icons-material/SportsKabaddi';\r\nimport VideogameAssetIcon from '@mui/icons-material/VideogameAsset';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport { useStore } from '../store';\r\nimport { AudioTrackPanel } from '../components/AudioTrackPanel';\r\nimport { AssetManager } from '../services/assetManager';\r\nimport { Character } from '../store';\r\nimport MarkdownContent from '../components/MarkdownContent';\r\n\r\nexport const CharactersView: React.FC = () => {\r\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\r\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\r\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n  const [snackbarMessage, setSnackbarMessage] = useState('');\r\n  const [isSaving, setIsSaving] = useState(false);\r\n  const [imageAssets, setImageAssets] = useState<string[]>([]);\r\n  \r\n  const { \r\n    characters, \r\n    addCharacter, \r\n    updateCharacter, \r\n    deleteCharacter, \r\n    saveDataToIndexedDB,\r\n    locations\r\n  } = useStore();\r\n  \r\n  // New character form data\r\n  const [newCharacter, setNewCharacter] = useState({\r\n    name: '',\r\n    description: '',\r\n    type: 'npc' as 'npc' | 'merchant' | 'enemy' | 'player',\r\n    locationId: '',\r\n    descriptionType: 'markdown' as 'markdown' | 'image' | 'pdf',\r\n    descriptionAssetName: '',\r\n    hp: 10  // Default HP value\r\n  });\r\n  \r\n  // Currently editing character id\r\n  const [editingCharacter, setEditingCharacter] = useState<string | null>(null);\r\n  \r\n  // Load image assets\r\n  useEffect(() => {\r\n    if (isAddDialogOpen || isEditDialogOpen) {\r\n      const loadAssets = async () => {\r\n        const imageAssetsData = await AssetManager.getAssets('images');\r\n        setImageAssets(imageAssetsData.map(asset => asset.name));\r\n      };\r\n      loadAssets();\r\n    }\r\n  }, [isAddDialogOpen, isEditDialogOpen]);\r\n  \r\n  // Add a new character\r\n  const handleAddCharacter = () => {\r\n    const character: Omit<Character, 'id'> = {\r\n      name: newCharacter.name,\r\n      description: newCharacter.description,\r\n      type: newCharacter.type,\r\n      hp: Number(newCharacter.hp) || 1  // Cast to number and provide fallback\r\n    };\r\n    \r\n    if (newCharacter.locationId) {\r\n      character.locationId = newCharacter.locationId;\r\n    }\r\n    \r\n    character.descriptionType = newCharacter.descriptionType;\r\n    \r\n    if (newCharacter.descriptionAssetName) {\r\n      character.descriptionAssetName = newCharacter.descriptionAssetName;\r\n    }\r\n    \r\n    addCharacter(character);\r\n    \r\n    setIsAddDialogOpen(false);\r\n    resetCharacterForm();\r\n    showSnackbar('Character added successfully');\r\n  };\r\n  \r\n  // Reset the character form\r\n  const resetCharacterForm = () => {\r\n    setNewCharacter({\r\n      name: '',\r\n      description: '',\r\n      type: 'npc',\r\n      locationId: '',\r\n      descriptionType: 'markdown',\r\n      descriptionAssetName: '',\r\n      hp: 10\r\n    });\r\n  };\r\n  \r\n  // Open edit dialog for a character\r\n  const handleEditCharacter = (characterId: string) => {\r\n    const character = characters.find(char => char.id === characterId);\r\n    if (character) {\r\n      setEditingCharacter(characterId);\r\n      setNewCharacter({\r\n        name: character.name,\r\n        description: character.description,\r\n        type: character.type,\r\n        locationId: character.locationId || '',\r\n        descriptionType: character.descriptionType || 'markdown',\r\n        descriptionAssetName: character.descriptionAssetName || '',\r\n        hp: character.hp\r\n      });\r\n      setIsEditDialogOpen(true);\r\n    }\r\n  };\r\n  \r\n  // Save edited character\r\n  const handleSaveCharacter = () => {\r\n    if (editingCharacter) {\r\n      const characterUpdate: Partial<Omit<Character, 'id'>> = {\r\n        name: newCharacter.name,\r\n        description: newCharacter.description,\r\n        type: newCharacter.type,\r\n        hp: Number(newCharacter.hp) || 1,  // Cast to number and provide fallback\r\n        descriptionType: newCharacter.descriptionType\r\n      };\r\n      \r\n      if (newCharacter.locationId) {\r\n        characterUpdate.locationId = newCharacter.locationId;\r\n      }\r\n      \r\n      if (newCharacter.descriptionAssetName) {\r\n        characterUpdate.descriptionAssetName = newCharacter.descriptionAssetName;\r\n      }\r\n      \r\n      updateCharacter(editingCharacter, characterUpdate);\r\n      \r\n      setIsEditDialogOpen(false);\r\n      resetCharacterForm();\r\n      showSnackbar('Character updated successfully');\r\n    }\r\n  };\r\n  \r\n  // Confirm and delete a character\r\n  const handleDeleteCharacter = (characterId: string) => {\r\n    if (window.confirm('Are you sure you want to delete this character? This cannot be undone.')) {\r\n      deleteCharacter(characterId);\r\n      showSnackbar('Character deleted successfully');\r\n    }\r\n  };\r\n  \r\n  // Save all data to IndexedDB\r\n  const handleSaveData = async () => {\r\n    setIsSaving(true);\r\n    try {\r\n      const result = await saveDataToIndexedDB();\r\n      showSnackbar(result.message);\r\n    } catch (error) {\r\n      showSnackbar(`Error saving data: ${error instanceof Error ? error.message : String(error)}`);\r\n    } finally {\r\n      setIsSaving(false);\r\n    }\r\n  };\r\n  \r\n  // Show a snackbar message\r\n  const showSnackbar = (message: string) => {\r\n    setSnackbarMessage(message);\r\n    setSnackbarOpen(true);\r\n  };\r\n  \r\n  // Close snackbar\r\n  const handleCloseSnackbar = () => {\r\n    setSnackbarOpen(false);\r\n  };\r\n  \r\n  // Render a character card\r\n  const renderCharacterCard = (character: Character) => {\r\n    const location = character.locationId \r\n      ? locations.find(loc => loc.id === character.locationId)\r\n      : null;\r\n      \r\n    return (\r\n      <Grid item xs={12} sm={6} md={5} key={character.id}>\r\n        <Card>\r\n          <CardContent>\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\r\n              <Box>\r\n                <Typography variant=\"h6\">\r\n                  {character.name}\r\n                </Typography>\r\n                \r\n                <Box sx={{ display: 'flex', alignItems: 'center', mt: 1 }}>\r\n                  <Chip\r\n                    icon={\r\n                      character.type === 'npc' ? <PersonIcon /> : \r\n                      character.type === 'merchant' ? <StoreIcon /> : \r\n                      character.type === 'enemy' ? <SportsKabaddiIcon /> :\r\n                      <VideogameAssetIcon />\r\n                    }\r\n                    label={\r\n                      character.type === 'npc' ? 'NPC' : \r\n                      character.type === 'merchant' ? 'Merchant' : \r\n                      character.type === 'enemy' ? 'Enemy' : 'Player'\r\n                    }\r\n                    size=\"small\"\r\n                    color={\r\n                      character.type === 'npc' ? 'primary' : \r\n                      character.type === 'merchant' ? 'secondary' : \r\n                      character.type === 'enemy' ? 'error' : \r\n                      'success'\r\n                    }\r\n                    variant=\"outlined\"\r\n                  />\r\n                  \r\n                  {location && (\r\n                    <Chip\r\n                      icon={<PlaceIcon />}\r\n                      label={location.name}\r\n                      size=\"small\"\r\n                      color=\"info\"\r\n                      variant=\"outlined\"\r\n                      sx={{ ml: 1 }}\r\n                    />\r\n                  )}\r\n                  <Chip\r\n                    label={`HP: ${character.hp}`}\r\n                    size=\"small\"\r\n                    color=\"default\"\r\n                    variant=\"outlined\"\r\n                    sx={{ ml: 1 }}\r\n                  />\r\n                </Box>\r\n                \r\n                <Box sx={{ mt: 1, mb: 2 }}>\r\n                  {character.descriptionType === 'markdown' && (\r\n                    <MarkdownContent content={character.description} />\r\n                  )}\r\n                  {character.descriptionType !== 'markdown' && (\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      {character.description}\r\n                    </Typography>\r\n                  )}\r\n                </Box>\r\n                \r\n                {character.inventory && character.inventory.length > 0 && (\r\n                  <>\r\n                    <Divider sx={{ my: 2 }} />\r\n                    <Typography variant=\"subtitle2\" gutterBottom>\r\n                      <InventoryIcon fontSize=\"small\" sx={{ verticalAlign: 'middle', mr: 0.5 }} />\r\n                      Inventory ({character.inventory.length})\r\n                    </Typography>\r\n                    <List dense>\r\n                      {character.inventory.slice(0, 3).map((item: any) => (\r\n                        <ListItem key={item.id} disablePadding>\r\n                          <ListItemText \r\n                            primary={item.name} \r\n                            secondary={`Qty: ${item.quantity}${item.price ? ` - Price: ${item.price}` : ''}`} \r\n                          />\r\n                        </ListItem>\r\n                      ))}\r\n                      {character.inventory.length > 3 && (\r\n                        <ListItem disablePadding>\r\n                          <ListItemText \r\n                            primary={`+ ${character.inventory.length - 3} more items`} \r\n                            primaryTypographyProps={{ variant: 'caption' }}\r\n                          />\r\n                        </ListItem>\r\n                      )}\r\n                    </List>\r\n                  </>\r\n                )}\r\n              </Box>\r\n              \r\n              <Box>\r\n                <IconButton onClick={() => handleEditCharacter(character.id)}>\r\n                  <EditIcon />\r\n                </IconButton>\r\n                <IconButton onClick={() => handleDeleteCharacter(character.id)}>\r\n                  <DeleteIcon />\r\n                </IconButton>\r\n              </Box>\r\n            </Box>\r\n          </CardContent>\r\n        </Card>\r\n      </Grid>\r\n    );\r\n  };\r\n  \r\n  return (\r\n    <Box sx={{ p: 3, maxWidth: 1200, mx: 'auto' }}>\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\r\n        <Typography variant=\"h4\">Characters</Typography>\r\n        <Box>\r\n          <Button \r\n            variant=\"outlined\" \r\n            color=\"success\" \r\n            startIcon={<SaveIcon />} \r\n            onClick={handleSaveData}\r\n            disabled={isSaving}\r\n            sx={{ mr: 2 }}\r\n          >\r\n            {isSaving ? <CircularProgress size={24} /> : 'Save Changes'}\r\n          </Button>\r\n          \r\n          <Button \r\n            variant=\"contained\" \r\n            startIcon={<AddIcon />} \r\n            onClick={() => {\r\n              resetCharacterForm();\r\n              setIsAddDialogOpen(true);\r\n            }}\r\n          >\r\n            Add Character\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n      \r\n      {characters.length === 0 ? (\r\n        <Paper sx={{ p: 3, textAlign: 'center' }}>\r\n          <Typography variant=\"h6\" color=\"text.secondary\" gutterBottom>\r\n            No Characters Yet\r\n          </Typography>\r\n          <Typography variant=\"body1\" color=\"text.secondary\" paragraph>\r\n            Add your first character to get started.\r\n          </Typography>\r\n          <Button \r\n            variant=\"contained\" \r\n            startIcon={<AddIcon />} \r\n            onClick={() => setIsAddDialogOpen(true)}\r\n          >\r\n            Add Character\r\n          </Button>\r\n        </Paper>\r\n      ) : (\r\n        <Grid container spacing={3}>\r\n          {characters.map(character => renderCharacterCard(character))}\r\n        </Grid>\r\n      )}\r\n      \r\n      {/* Add Character Dialog */}\r\n      <Dialog open={isAddDialogOpen} onClose={() => setIsAddDialogOpen(false)} maxWidth=\"md\" fullWidth>\r\n        <DialogTitle>Add New Character</DialogTitle>\r\n        <DialogContent>\r\n          <Grid container spacing={2} sx={{ mt: 0.5 }}>\r\n            <Grid item xs={12} md={8}>\r\n              <TextField\r\n                label=\"Name\"\r\n                fullWidth\r\n                value={newCharacter.name}\r\n                onChange={(e) => setNewCharacter({ ...newCharacter, name: e.target.value })}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} md={4}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Character Type</InputLabel>\r\n                <Select\r\n                  value={newCharacter.type}\r\n                  label=\"Character Type\"\r\n                  onChange={(e) => setNewCharacter({ \r\n                    ...newCharacter, \r\n                    type: e.target.value as 'npc' | 'merchant' | 'enemy' | 'player' \r\n                  })}\r\n                >\r\n                  <MenuItem value=\"npc\">NPC</MenuItem>\r\n                  <MenuItem value=\"merchant\">Merchant</MenuItem>\r\n                  <MenuItem value=\"enemy\">Enemy</MenuItem>\r\n                  <MenuItem value=\"player\">Player Character</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} md={4}>\r\n              <TextField\r\n                label=\"Hit Points (HP)\"\r\n                type=\"number\"\r\n                fullWidth\r\n                value={newCharacter.hp}\r\n                onChange={(e) => setNewCharacter({ \r\n                  ...newCharacter, \r\n                  hp: parseInt(e.target.value) || 1 \r\n                })}\r\n                inputProps={{ min: 1 }}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12}>\r\n              <Autocomplete\r\n                options={locations}\r\n                value={locations.find(loc => loc.id === newCharacter.locationId) || null}\r\n                onChange={(_, newValue) => setNewCharacter({ \r\n                  ...newCharacter, \r\n                  locationId: newValue?.id || '' \r\n                })}\r\n                getOptionLabel={(option) => option.name}\r\n                renderInput={(params) => (\r\n                  <TextField\r\n                    {...params}\r\n                    label=\"Location\"\r\n                    fullWidth\r\n                  />\r\n                )}\r\n                isOptionEqualToValue={(option, value) => option.id === value.id}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Description Type</InputLabel>\r\n                <Select\r\n                  value={newCharacter.descriptionType}\r\n                  label=\"Description Type\"\r\n                  onChange={(e) => setNewCharacter({ \r\n                    ...newCharacter, \r\n                    descriptionType: e.target.value as 'markdown' | 'image' | 'pdf' \r\n                  })}\r\n                >\r\n                  <MenuItem value=\"markdown\">Markdown</MenuItem>\r\n                  <MenuItem value=\"image\">Image</MenuItem>\r\n                  <MenuItem value=\"pdf\">PDF</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            \r\n            {newCharacter.descriptionType === 'markdown' ? (\r\n              <>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    label=\"Description\"\r\n                    multiline\r\n                    rows={6}\r\n                    fullWidth\r\n                    value={newCharacter.description}\r\n                    onChange={(e) => setNewCharacter({ ...newCharacter, description: e.target.value })}\r\n                  />\r\n                </Grid>\r\n                \r\n                <Grid item xs={12}>\r\n                  <Typography variant=\"subtitle2\" sx={{ mt: 1, mb: 1 }}>\r\n                    Preview\r\n                  </Typography>\r\n                  <Paper \r\n                    sx={{ \r\n                      p: 2, \r\n                      height: '200px', \r\n                      overflow: 'auto',\r\n                      bgcolor: 'background.default',\r\n                      border: 1,\r\n                      borderColor: 'divider'\r\n                    }}\r\n                  >\r\n                    <ReactMarkdown>\r\n                      {newCharacter.description}\r\n                    </ReactMarkdown>\r\n                  </Paper>\r\n                </Grid>\r\n              </>\r\n            ) : newCharacter.descriptionType === 'image' || newCharacter.descriptionType === 'pdf' ? (\r\n              <>\r\n                <Grid item xs={12}>\r\n                  <Autocomplete\r\n                    options={imageAssets}\r\n                    value={newCharacter.descriptionAssetName || null}\r\n                    onChange={(_, newValue) => setNewCharacter({ \r\n                      ...newCharacter, \r\n                      descriptionAssetName: newValue || '' \r\n                    })}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        label=\"Description Asset\"\r\n                        fullWidth\r\n                        helperText={`Select a ${newCharacter.descriptionType} file from assets`}\r\n                      />\r\n                    )}\r\n                  />\r\n                </Grid>\r\n                \r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    label=\"Brief Description\"\r\n                    multiline\r\n                    rows={3}\r\n                    fullWidth\r\n                    value={newCharacter.description}\r\n                    onChange={(e) => setNewCharacter({ ...newCharacter, description: e.target.value })}\r\n                    helperText=\"Add a brief description text to show in lists\"\r\n                  />\r\n                </Grid>\r\n              </>\r\n            ) : null}\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setIsAddDialogOpen(false)}>Cancel</Button>\r\n          <Button \r\n            onClick={handleAddCharacter} \r\n            variant=\"contained\"\r\n            disabled={!newCharacter.name}\r\n          >\r\n            Add Character\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      \r\n      {/* Edit Character Dialog */}\r\n      <Dialog open={isEditDialogOpen} onClose={() => setIsEditDialogOpen(false)} maxWidth=\"md\" fullWidth>\r\n        <DialogTitle>Edit Character</DialogTitle>\r\n        <DialogContent>\r\n          <Grid container spacing={2} sx={{ mt: 0.5 }}>\r\n            <Grid item xs={12} md={8}>\r\n              <TextField\r\n                label=\"Name\"\r\n                fullWidth\r\n                value={newCharacter.name}\r\n                onChange={(e) => setNewCharacter({ ...newCharacter, name: e.target.value })}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} md={4}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Character Type</InputLabel>\r\n                <Select\r\n                  value={newCharacter.type}\r\n                  label=\"Character Type\"\r\n                  onChange={(e) => setNewCharacter({ \r\n                    ...newCharacter, \r\n                    type: e.target.value as 'npc' | 'merchant' | 'enemy' | 'player' \r\n                  })}\r\n                >\r\n                  <MenuItem value=\"npc\">NPC</MenuItem>\r\n                  <MenuItem value=\"merchant\">Merchant</MenuItem>\r\n                  <MenuItem value=\"enemy\">Enemy</MenuItem>\r\n                  <MenuItem value=\"player\">Player Character</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} md={4}>\r\n              <TextField\r\n                label=\"Hit Points (HP)\"\r\n                type=\"number\"\r\n                fullWidth\r\n                value={newCharacter.hp}\r\n                onChange={(e) => setNewCharacter({ \r\n                  ...newCharacter, \r\n                  hp: parseInt(e.target.value) || 1 \r\n                })}\r\n                inputProps={{ min: 1 }}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12}>\r\n              <Autocomplete\r\n                options={locations}\r\n                value={locations.find(loc => loc.id === newCharacter.locationId) || null}\r\n                onChange={(_, newValue) => setNewCharacter({ \r\n                  ...newCharacter, \r\n                  locationId: newValue?.id || '' \r\n                })}\r\n                getOptionLabel={(option) => option.name}\r\n                renderInput={(params) => (\r\n                  <TextField\r\n                    {...params}\r\n                    label=\"Location\"\r\n                    fullWidth\r\n                  />\r\n                )}\r\n                isOptionEqualToValue={(option, value) => option.id === value.id}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Description Type</InputLabel>\r\n                <Select\r\n                  value={newCharacter.descriptionType}\r\n                  label=\"Description Type\"\r\n                  onChange={(e) => setNewCharacter({ \r\n                    ...newCharacter, \r\n                    descriptionType: e.target.value as 'markdown' | 'image' | 'pdf' \r\n                  })}\r\n                >\r\n                  <MenuItem value=\"markdown\">Markdown</MenuItem>\r\n                  <MenuItem value=\"image\">Image</MenuItem>\r\n                  <MenuItem value=\"pdf\">PDF</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            \r\n            {newCharacter.descriptionType === 'markdown' ? (\r\n              <>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    label=\"Description\"\r\n                    multiline\r\n                    rows={6}\r\n                    fullWidth\r\n                    value={newCharacter.description}\r\n                    onChange={(e) => setNewCharacter({ ...newCharacter, description: e.target.value })}\r\n                  />\r\n                </Grid>\r\n                \r\n                <Grid item xs={12}>\r\n                  <Typography variant=\"subtitle2\" sx={{ mt: 1, mb: 1 }}>\r\n                    Preview\r\n                  </Typography>\r\n                  <Paper \r\n                    sx={{ \r\n                      p: 2, \r\n                      height: '200px', \r\n                      overflow: 'auto',\r\n                      bgcolor: 'background.default',\r\n                      border: 1,\r\n                      borderColor: 'divider'\r\n                    }}\r\n                  >\r\n                    <ReactMarkdown>\r\n                      {newCharacter.description}\r\n                    </ReactMarkdown>\r\n                  </Paper>\r\n                </Grid>\r\n              </>\r\n            ) : newCharacter.descriptionType === 'image' || newCharacter.descriptionType === 'pdf' ? (\r\n              <>\r\n                <Grid item xs={12}>\r\n                  <Autocomplete\r\n                    options={imageAssets}\r\n                    value={newCharacter.descriptionAssetName || null}\r\n                    onChange={(_, newValue) => setNewCharacter({ \r\n                      ...newCharacter, \r\n                      descriptionAssetName: newValue || '' \r\n                    })}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        label=\"Description Asset\"\r\n                        fullWidth\r\n                        helperText={`Select a ${newCharacter.descriptionType} file from assets`}\r\n                      />\r\n                    )}\r\n                  />\r\n                </Grid>\r\n                \r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    label=\"Brief Description\"\r\n                    multiline\r\n                    rows={3}\r\n                    fullWidth\r\n                    value={newCharacter.description}\r\n                    onChange={(e) => setNewCharacter({ ...newCharacter, description: e.target.value })}\r\n                    helperText=\"Add a brief description text to show in lists\"\r\n                  />\r\n                </Grid>\r\n              </>\r\n            ) : null}\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setIsEditDialogOpen(false)}>Cancel</Button>\r\n          <Button \r\n            onClick={handleSaveCharacter} \r\n            variant=\"contained\"\r\n            disabled={!newCharacter.name}\r\n          >\r\n            Save Changes\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      \r\n      {/* Snackbar for notifications */}\r\n      <Snackbar\r\n        open={snackbarOpen}\r\n        autoHideDuration={6000}\r\n        onClose={handleCloseSnackbar}\r\n      >\r\n        <Alert onClose={handleCloseSnackbar} severity=\"success\" sx={{ width: '100%' }}>\r\n          {snackbarMessage}\r\n        </Alert>\r\n      </Snackbar>\r\n      \r\n      {/* Include the AudioTrackPanel */}\r\n      <AudioTrackPanel />\r\n    </Box>\r\n  );\r\n}; "],"names":["_interopRequireDefault","require$$0","Store","default_1","_createSvgIcon","require$$1","_jsxRuntime","require$$2","Inventory","VideogameAsset","CharactersView","isAddDialogOpen","setIsAddDialogOpen","useState","isEditDialogOpen","setIsEditDialogOpen","snackbarOpen","setSnackbarOpen","snackbarMessage","setSnackbarMessage","isSaving","setIsSaving","imageAssets","setImageAssets","characters","addCharacter","updateCharacter","deleteCharacter","saveDataToIndexedDB","locations","useStore","newCharacter","setNewCharacter","editingCharacter","setEditingCharacter","useEffect","imageAssetsData","AssetManager","asset","handleAddCharacter","character","resetCharacterForm","showSnackbar","handleEditCharacter","characterId","char","handleSaveCharacter","characterUpdate","handleDeleteCharacter","handleSaveData","result","error","message","handleCloseSnackbar","renderCharacterCard","location","loc","jsx","Grid","Card","CardContent","jsxs","Box","Typography","Chip","PersonIcon","StoreIcon","SportsKabaddiIcon","VideogameAssetIcon","PlaceIcon","MarkdownContent","Fragment","Divider","InventoryIcon","List","item","ListItem","ListItemText","IconButton","EditIcon","DeleteIcon","Button","SaveIcon","CircularProgress","AddIcon","Paper","Dialog","DialogTitle","DialogContent","TextField","e","FormControl","InputLabel","Select","MenuItem","Autocomplete","_","newValue","option","params","value","ReactMarkdown","DialogActions","Snackbar","Alert","AudioTrackPanel"],"mappings":"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","x_google_ignoreList":[0,1,2]}
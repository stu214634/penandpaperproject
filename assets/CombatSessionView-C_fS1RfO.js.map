{"version":3,"file":"CombatSessionView-C_fS1RfO.js","sources":["../../src/components/ActiveCombatView.tsx","../../src/pages/CombatSessionView.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { \r\n  Box, \r\n  Typography, \r\n  Paper, \r\n  Button, \r\n  IconButton, \r\n  List, \r\n  ListItem, \r\n  ListItemText, \r\n  ListItemIcon,\r\n  TextField,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Card,\r\n  CardContent,\r\n  Divider,\r\n  Grid,\r\n  Chip,\r\n  Avatar,\r\n  MenuItem,\r\n  Select,\r\n  FormControl,\r\n  InputLabel,\r\n  Badge\r\n} from '@mui/material';\r\nimport { \r\n  ArrowBack as ArrowBackIcon,\r\n  SportsKabaddi as SportsKabaddiIcon,\r\n  Person as PersonIcon,\r\n  AddCircle as AddCircleIcon,\r\n  ArrowForward as ArrowForwardIcon,\r\n  Close as CloseIcon,\r\n  Delete as DeleteIcon,\r\n  Edit as EditIcon\r\n} from '@mui/icons-material';\r\nimport { useStore } from '../store';\r\nimport { Combat, Character } from '../store';\r\n\r\n// Interface for combat participants with initiative\r\ninterface CombatParticipant {\r\n  id: string; // Unique ID for this participant instance\r\n  character: Character;\r\n  initiative: number;\r\n  currentHp: number;\r\n  maxHp: number;\r\n  notes: string;\r\n  isPlayerCharacter: boolean;\r\n}\r\n\r\ninterface ActiveCombatViewProps {\r\n  combat: Combat;\r\n  onClose: () => void;\r\n}\r\n\r\nexport const ActiveCombatView: React.FC<ActiveCombatViewProps> = ({ combat, onClose }) => {\r\n  const playTrack = useStore(state => state.playTrack);\r\n  const stopIndividualTrack = useStore(state => state.stopIndividualTrack);\r\n  const characters = useStore(state => state.characters);\r\n  \r\n  // Refs to track audio IDs\r\n  const entrySoundTrackIdRef = useRef<string | null>(null);\r\n  const bgmTrackIdRef = useRef<string | null>(null);\r\n  const audioInitializedRef = useRef(false);\r\n  \r\n  // Combat state\r\n  const [participants, setParticipants] = useState<CombatParticipant[]>([]);\r\n  const [currentTurnIndex, setCurrentTurnIndex] = useState(0);\r\n  const [round, setRound] = useState(1);\r\n  const [isAddParticipantDialogOpen, setIsAddParticipantDialogOpen] = useState(false);\r\n  const [newParticipantId, setNewParticipantId] = useState('');\r\n  const [newParticipantInitiative, setNewParticipantInitiative] = useState(10);\r\n  const [editingParticipantId, setEditingParticipantId] = useState<string | null>(null);\r\n  \r\n  // Initialize audio only once when the component mounts\r\n  useEffect(() => {\r\n    if (!audioInitializedRef.current) {\r\n      // Initialize audio\r\n      if (combat.entrySound) {\r\n        const entryTrackId = `/audio/${combat.entrySound}`;\r\n        entrySoundTrackIdRef.current = entryTrackId;\r\n        playTrack(entryTrackId, { \r\n          replace: false, \r\n          locationId: `combat-entrysound-${combat.id}`, \r\n          loop: false \r\n        });\r\n      }\r\n      \r\n      if (combat.backgroundMusic) {\r\n        const bgmTrackId = `/audio/${combat.backgroundMusic}`;\r\n        bgmTrackIdRef.current = bgmTrackId;\r\n        playTrack(bgmTrackId, { \r\n          replace: false, \r\n          locationId: `combat-bgm-${combat.id}`, \r\n          loop: true \r\n        });\r\n      }\r\n      \r\n      audioInitializedRef.current = true;\r\n    }\r\n    \r\n    // Cleanup function to stop tracks when component unmounts\r\n    return () => {\r\n      if (entrySoundTrackIdRef.current) {\r\n        stopIndividualTrack(entrySoundTrackIdRef.current);\r\n        entrySoundTrackIdRef.current = null;\r\n      }\r\n      \r\n      if (bgmTrackIdRef.current) {\r\n        stopIndividualTrack(bgmTrackIdRef.current);\r\n        bgmTrackIdRef.current = null;\r\n      }\r\n    };\r\n  }, [combat.id, combat.entrySound, combat.backgroundMusic]);\r\n  \r\n  // Initialize combat participants only once\r\n  useEffect(() => {\r\n    initializeCombat();\r\n  }, []);\r\n  \r\n  // Initialize combat participants from the combat data\r\n  const initializeCombat = () => {\r\n    // Create participants from player characters\r\n    const playerParticipants = combat.playerCharacters.map(character => ({\r\n      id: `pc-${character.id}-${Math.random().toString(36).substring(2, 9)}`,\r\n      character,\r\n      initiative: Math.floor(Math.random() * 20) + 1, // Random initiative for initial setup\r\n      currentHp: character.hp,\r\n      maxHp: character.hp,\r\n      notes: '',\r\n      isPlayerCharacter: true\r\n    }));\r\n    \r\n    // Create participants from enemies\r\n    const enemyParticipants = combat.enemies.map(character => ({\r\n      id: `enemy-${character.id}-${Math.random().toString(36).substring(2, 9)}`,\r\n      character,\r\n      initiative: Math.floor(Math.random() * 20) + 1, // Random initiative for initial setup\r\n      currentHp: character.hp,\r\n      maxHp: character.hp,\r\n      notes: '',\r\n      isPlayerCharacter: false\r\n    }));\r\n    \r\n    // Combine and sort by initiative\r\n    const allParticipants = [...playerParticipants, ...enemyParticipants]\r\n      .sort((a, b) => b.initiative - a.initiative);\r\n    \r\n    setParticipants(allParticipants);\r\n    setCurrentTurnIndex(0); // Start with the highest initiative\r\n    setRound(1);\r\n  };\r\n  \r\n  // Advance to the next turn in initiative order\r\n  const nextTurn = () => {\r\n    if (participants.length === 0) return;\r\n    \r\n    const nextIndex = (currentTurnIndex + 1) % participants.length;\r\n    setCurrentTurnIndex(nextIndex);\r\n    \r\n    // If we've looped back to the first participant, increment the round\r\n    if (nextIndex === 0) {\r\n      setRound(prevRound => prevRound + 1);\r\n    }\r\n  };\r\n  \r\n  // Get the current participant\r\n  const currentParticipant = participants[currentTurnIndex];\r\n  \r\n  // Handle adding a new participant to the combat\r\n  const handleAddParticipant = () => {\r\n    if (!newParticipantId) return;\r\n    \r\n    const character = characters.find(c => c.id === newParticipantId);\r\n    if (!character) return;\r\n    \r\n    const isPlayerCharacter = character.type === 'player';\r\n    \r\n    const newParticipant: CombatParticipant = {\r\n      id: `${isPlayerCharacter ? 'pc' : 'enemy'}-${character.id}-${Math.random().toString(36).substring(2, 9)}`,\r\n      character,\r\n      initiative: newParticipantInitiative,\r\n      currentHp: character.hp,\r\n      maxHp: character.hp,\r\n      notes: '',\r\n      isPlayerCharacter\r\n    };\r\n    \r\n    // Add to participants and resort by initiative\r\n    const updatedParticipants = [...participants, newParticipant]\r\n      .sort((a, b) => b.initiative - a.initiative);\r\n    \r\n    // Find the new index of the current participant to maintain turn\r\n    const currentId = participants[currentTurnIndex]?.id;\r\n    const newCurrentIndex = currentId \r\n      ? updatedParticipants.findIndex(p => p.id === currentId)\r\n      : 0;\r\n    \r\n    setParticipants(updatedParticipants);\r\n    setCurrentTurnIndex(newCurrentIndex >= 0 ? newCurrentIndex : 0);\r\n    setIsAddParticipantDialogOpen(false);\r\n    setNewParticipantId('');\r\n    setNewParticipantInitiative(10);\r\n  };\r\n  \r\n  // Handle updating a participant's initiative\r\n  const handleUpdateInitiative = (participantId: string, initiative: number) => {\r\n    const updatedParticipants = participants.map(p => \r\n      p.id === participantId ? { ...p, initiative } : p\r\n    ).sort((a, b) => b.initiative - a.initiative);\r\n    \r\n    // Find the new index of the current participant to maintain turn\r\n    const currentId = participants[currentTurnIndex]?.id;\r\n    const newCurrentIndex = currentId \r\n      ? updatedParticipants.findIndex(p => p.id === currentId)\r\n      : 0;\r\n    \r\n    setParticipants(updatedParticipants);\r\n    setCurrentTurnIndex(newCurrentIndex >= 0 ? newCurrentIndex : 0);\r\n  };\r\n  \r\n  // Handle updating a participant's HP\r\n  const handleUpdateHp = (participantId: string, hp: number) => {\r\n    setParticipants(participants.map(p => \r\n      p.id === participantId ? { ...p, currentHp: Math.max(0, Math.min(hp, p.maxHp)) } : p\r\n    ));\r\n  };\r\n  \r\n  // Handle updating a participant's notes\r\n  const handleUpdateNotes = (participantId: string, notes: string) => {\r\n    setParticipants(participants.map(p => \r\n      p.id === participantId ? { ...p, notes } : p\r\n    ));\r\n  };\r\n  \r\n  // Handle removing a participant from combat\r\n  const handleRemoveParticipant = (participantId: string) => {\r\n    const index = participants.findIndex(p => p.id === participantId);\r\n    if (index === -1) return;\r\n    \r\n    const updatedParticipants = participants.filter(p => p.id !== participantId);\r\n    \r\n    // If no participants left, close combat\r\n    if (updatedParticipants.length === 0) {\r\n      handleClose();\r\n      return;\r\n    }\r\n    \r\n    // Adjust current turn index if necessary\r\n    let newIndex = currentTurnIndex;\r\n    if (index === currentTurnIndex) {\r\n      // If removing current participant, go to next\r\n      newIndex = currentTurnIndex % updatedParticipants.length;\r\n    } else if (index < currentTurnIndex) {\r\n      // If removing participant before current, adjust index\r\n      newIndex = currentTurnIndex - 1;\r\n    }\r\n    \r\n    setParticipants(updatedParticipants);\r\n    setCurrentTurnIndex(newIndex);\r\n  };\r\n  \r\n  // Handle closing the combat view\r\n  const handleClose = () => {\r\n    // Stop audio tracks\r\n    if (entrySoundTrackIdRef.current) {\r\n      stopIndividualTrack(entrySoundTrackIdRef.current);\r\n      entrySoundTrackIdRef.current = null;\r\n    }\r\n    \r\n    if (bgmTrackIdRef.current) {\r\n      stopIndividualTrack(bgmTrackIdRef.current);\r\n      bgmTrackIdRef.current = null;\r\n    }\r\n    \r\n    // Call parent's onClose\r\n    onClose();\r\n  };\r\n  \r\n  return (\r\n    <Box sx={{ \r\n      height: '100%', \r\n      width: '100%', \r\n      display: 'flex', \r\n      flexDirection: 'column',\r\n      overflow: 'hidden', \r\n      position: 'relative',\r\n      backgroundColor: '#222',\r\n      backgroundImage: combat.backgroundImage ? `url(/images/${combat.backgroundImage})` : 'none',\r\n      backgroundSize: 'cover',\r\n      backgroundPosition: 'center',\r\n    }}>\r\n      {/* Semi-transparent overlay for readability over background image */}\r\n      <Box sx={{ \r\n        position: 'absolute', \r\n        top: 0, \r\n        left: 0, \r\n        right: 0, \r\n        bottom: 0, \r\n        backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n        zIndex: 0 \r\n      }} />\r\n      \r\n      {/* Header with combat info */}\r\n      <Paper sx={{ \r\n        p: 2, \r\n        mb: 2, \r\n        display: 'flex', \r\n        justifyContent: 'space-between', \r\n        alignItems: 'center',\r\n        backgroundColor: 'rgba(30, 30, 30, 0.9)',\r\n        position: 'relative',\r\n        zIndex: 1\r\n      }}>\r\n        <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n          <IconButton onClick={handleClose} sx={{ mr: 1 }}>\r\n            <ArrowBackIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h5\">{combat.name}</Typography>\r\n        </Box>\r\n        \r\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\r\n          <Chip \r\n            label={`Round: ${round}`}\r\n            color=\"primary\"\r\n            variant=\"outlined\"\r\n          />\r\n          <Chip \r\n            label={`Difficulty: ${combat.difficulty || 'Medium'}`}\r\n            color=\"secondary\"\r\n            variant=\"outlined\"\r\n          />\r\n          <Button \r\n            variant=\"contained\" \r\n            color=\"primary\"\r\n            startIcon={<AddCircleIcon />}\r\n            onClick={() => setIsAddParticipantDialogOpen(true)}\r\n          >\r\n            Add Participant\r\n          </Button>\r\n        </Box>\r\n      </Paper>\r\n      \r\n      {/* Main content area */}\r\n      <Box sx={{ \r\n        display: 'flex', \r\n        flex: 1, \r\n        overflow: 'hidden',\r\n        position: 'relative',\r\n        zIndex: 1,\r\n        gap: 2,\r\n        p: 2\r\n      }}>\r\n        {/* Initiative order list */}\r\n        <Paper sx={{ \r\n          width: 300, \r\n          overflow: 'auto',\r\n          backgroundColor: 'rgba(30, 30, 30, 0.8)',\r\n          p: 1\r\n        }}>\r\n          <Typography variant=\"h6\" sx={{ mb: 2, p: 1 }}>Initiative Order</Typography>\r\n          \r\n          <List>\r\n            {participants.map((participant, index) => (\r\n              <ListItem \r\n                key={participant.id}\r\n                sx={{ \r\n                  mb: 1,\r\n                  backgroundColor: index === currentTurnIndex \r\n                    ? 'rgba(255, 165, 0, 0.3)' \r\n                    : 'transparent',\r\n                  borderLeft: index === currentTurnIndex \r\n                    ? '4px solid orange' \r\n                    : '4px solid transparent',\r\n                  transition: 'all 0.3s ease',\r\n                  borderRadius: '4px'\r\n                }}\r\n                secondaryAction={\r\n                  <IconButton \r\n                    edge=\"end\" \r\n                    size=\"small\" \r\n                    onClick={() => handleRemoveParticipant(participant.id)}\r\n                  >\r\n                    <DeleteIcon fontSize=\"small\" />\r\n                  </IconButton>\r\n                }\r\n              >\r\n                <ListItemIcon>\r\n                  {participant.isPlayerCharacter ? \r\n                    <PersonIcon color=\"primary\" /> : \r\n                    <SportsKabaddiIcon color=\"error\" />\r\n                  }\r\n                </ListItemIcon>\r\n                \r\n                <ListItemText \r\n                  primary={\r\n                    <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n                      <Typography variant=\"body1\">{participant.character.name}</Typography>\r\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                        <Badge \r\n                          badgeContent={participant.initiative} \r\n                          color=\"primary\"\r\n                          sx={{ mr: 1 }}\r\n                        />\r\n                        <IconButton \r\n                          size=\"small\" \r\n                          onClick={() => setEditingParticipantId(participant.id === editingParticipantId ? null : participant.id)}\r\n                        >\r\n                          <EditIcon fontSize=\"small\" />\r\n                        </IconButton>\r\n                      </Box>\r\n                    </Box>\r\n                  }\r\n                  secondary={\r\n                    <Box>\r\n                      <Typography variant=\"caption\" component=\"div\">\r\n                        HP: {participant.currentHp}/{participant.maxHp}\r\n                      </Typography>\r\n                      {editingParticipantId === participant.id && (\r\n                        <Box sx={{ mt: 1, display: 'flex', flexDirection: 'column', gap: 1 }}>\r\n                          <TextField\r\n                            label=\"Initiative\"\r\n                            type=\"number\"\r\n                            size=\"small\"\r\n                            value={participant.initiative}\r\n                            onChange={(e) => handleUpdateInitiative(participant.id, parseInt(e.target.value) || 0)}\r\n                          />\r\n                          <TextField\r\n                            label=\"Current HP\"\r\n                            type=\"number\"\r\n                            size=\"small\"\r\n                            value={participant.currentHp}\r\n                            onChange={(e) => handleUpdateHp(participant.id, parseInt(e.target.value) || 0)}\r\n                          />\r\n                          <TextField\r\n                            label=\"Notes\"\r\n                            size=\"small\"\r\n                            multiline\r\n                            rows={2}\r\n                            value={participant.notes}\r\n                            onChange={(e) => handleUpdateNotes(participant.id, e.target.value)}\r\n                          />\r\n                        </Box>\r\n                      )}\r\n                    </Box>\r\n                  }\r\n                />\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n        </Paper>\r\n        \r\n        {/* Current turn details */}\r\n        <Paper sx={{ \r\n          flex: 1, \r\n          p: 2,\r\n          backgroundColor: 'rgba(30, 30, 30, 0.8)',\r\n          display: 'flex',\r\n          flexDirection: 'column'\r\n        }}>\r\n          {currentParticipant ? (\r\n            <>\r\n              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\r\n                <Typography variant=\"h5\">\r\n                  Current Turn: {currentParticipant.character.name}\r\n                </Typography>\r\n                <Button \r\n                  variant=\"contained\" \r\n                  color=\"secondary\"\r\n                  endIcon={<ArrowForwardIcon />}\r\n                  onClick={nextTurn}\r\n                >\r\n                  Next Turn\r\n                </Button>\r\n              </Box>\r\n              \r\n              <Grid container spacing={2}>\r\n                <Grid item xs={12} md={6}>\r\n                  <Card sx={{ backgroundColor: 'rgba(40, 40, 40, 0.9)', height: '100%' }}>\r\n                    <CardContent>\r\n                      <Typography variant=\"h6\" gutterBottom>\r\n                        Character Details\r\n                      </Typography>\r\n                      <Typography variant=\"body1\">\r\n                        Type: {currentParticipant.character.type.toUpperCase()}\r\n                      </Typography>\r\n                      <Typography variant=\"body1\">\r\n                        HP: {currentParticipant.currentHp}/{currentParticipant.maxHp}\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" sx={{ mt: 2 }}>\r\n                        {currentParticipant.character.description}\r\n                      </Typography>\r\n                      \r\n                      {/* HP adjustment controls */}\r\n                      <Box sx={{ mt: 3 }}>\r\n                        <Typography variant=\"subtitle2\" gutterBottom>Adjust HP</Typography>\r\n                        <Box sx={{ display: 'flex', gap: 1 }}>\r\n                          <Button \r\n                            variant=\"outlined\" \r\n                            size=\"small\"\r\n                            onClick={() => handleUpdateHp(currentParticipant.id, currentParticipant.currentHp - 1)}\r\n                          >\r\n                            -1\r\n                          </Button>\r\n                          <Button \r\n                            variant=\"outlined\" \r\n                            size=\"small\"\r\n                            onClick={() => handleUpdateHp(currentParticipant.id, currentParticipant.currentHp - 5)}\r\n                          >\r\n                            -5\r\n                          </Button>\r\n                          <Button \r\n                            variant=\"outlined\" \r\n                            color=\"primary\"\r\n                            size=\"small\"\r\n                            onClick={() => handleUpdateHp(currentParticipant.id, currentParticipant.currentHp + 1)}\r\n                          >\r\n                            +1\r\n                          </Button>\r\n                          <Button \r\n                            variant=\"outlined\" \r\n                            color=\"primary\"\r\n                            size=\"small\"\r\n                            onClick={() => handleUpdateHp(currentParticipant.id, currentParticipant.currentHp + 5)}\r\n                          >\r\n                            +5\r\n                          </Button>\r\n                        </Box>\r\n                      </Box>\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n                \r\n                <Grid item xs={12} md={6}>\r\n                  <Card sx={{ backgroundColor: 'rgba(40, 40, 40, 0.9)', height: '100%' }}>\r\n                    <CardContent>\r\n                      <Typography variant=\"h6\" gutterBottom>\r\n                        Combat Notes\r\n                      </Typography>\r\n                      <TextField\r\n                        fullWidth\r\n                        multiline\r\n                        rows={8}\r\n                        value={currentParticipant.notes}\r\n                        onChange={(e) => handleUpdateNotes(currentParticipant.id, e.target.value)}\r\n                        placeholder=\"Add notes for this character...\"\r\n                        variant=\"outlined\"\r\n                      />\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n                \r\n                {currentParticipant.character.inventory && currentParticipant.character.inventory.length > 0 && (\r\n                  <Grid item xs={12}>\r\n                    <Card sx={{ backgroundColor: 'rgba(40, 40, 40, 0.9)' }}>\r\n                      <CardContent>\r\n                        <Typography variant=\"h6\" gutterBottom>\r\n                          Inventory\r\n                        </Typography>\r\n                        <List dense>\r\n                          {currentParticipant.character.inventory.map(item => (\r\n                            <ListItem key={item.id}>\r\n                              <ListItemText \r\n                                primary={item.name} \r\n                                secondary={item.description} \r\n                              />\r\n                              <Typography variant=\"body2\">\r\n                                Qty: {item.quantity}\r\n                              </Typography>\r\n                            </ListItem>\r\n                          ))}\r\n                        </List>\r\n                      </CardContent>\r\n                    </Card>\r\n                  </Grid>\r\n                )}\r\n              </Grid>\r\n            </>\r\n          ) : (\r\n            <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100%' }}>\r\n              <Typography variant=\"h6\">No participants in combat</Typography>\r\n            </Box>\r\n          )}\r\n        </Paper>\r\n      </Box>\r\n      \r\n      {/* Add participant dialog */}\r\n      <Dialog \r\n        open={isAddParticipantDialogOpen} \r\n        onClose={() => setIsAddParticipantDialogOpen(false)}\r\n        maxWidth=\"sm\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Add Combat Participant</DialogTitle>\r\n        <DialogContent>\r\n          <Box sx={{ mt: 2, display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n            <FormControl fullWidth>\r\n              <InputLabel>Character</InputLabel>\r\n              <Select\r\n                value={newParticipantId}\r\n                onChange={(e) => setNewParticipantId(e.target.value as string)}\r\n                label=\"Character\"\r\n              >\r\n                <MenuItem value=\"\" disabled>Select a character</MenuItem>\r\n                {characters.map(char => (\r\n                  <MenuItem key={char.id} value={char.id}>\r\n                    {char.name} ({char.type}) - HP: {char.hp}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n            \r\n            <TextField\r\n              label=\"Initiative\"\r\n              type=\"number\"\r\n              value={newParticipantInitiative}\r\n              onChange={(e) => setNewParticipantInitiative(parseInt(e.target.value) || 0)}\r\n              fullWidth\r\n            />\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setIsAddParticipantDialogOpen(false)}>Cancel</Button>\r\n          <Button \r\n            onClick={handleAddParticipant} \r\n            color=\"primary\" \r\n            variant=\"contained\"\r\n            disabled={!newParticipantId}\r\n          >\r\n            Add\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n}; ","import React, { useEffect } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport { Box, Typography, Button } from '@mui/material';\r\nimport { useStore } from '../store';\r\nimport { Combat } from '../store';\r\nimport { ActiveCombatView } from '../components/ActiveCombatView';\r\n\r\nexport const CombatSessionView: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const combats = useStore(state => state.combats);\r\n  \r\n  // Get the combat ID from the URL state\r\n  const combatId = location.state?.combatId;\r\n  const combat = combats.find(c => c.id === combatId);\r\n  \r\n  // If no combat is selected, redirect back to the map view\r\n  useEffect(() => {\r\n    if (!combatId || !combat) {\r\n      navigate('/map');\r\n    }\r\n  }, [combatId, combat, navigate]);\r\n  \r\n  // Handle going back to the previous screen\r\n  const handleClose = () => {\r\n    navigate(-1); // Go back to previous page\r\n  };\r\n  \r\n  // Return a loading state if the combat isn't found\r\n  if (!combat) {\r\n    return (\r\n      <Box sx={{ \r\n        display: 'flex', \r\n        flexDirection: 'column', \r\n        alignItems: 'center', \r\n        justifyContent: 'center',\r\n        height: '100%',\r\n        p: 3\r\n      }}>\r\n        <Typography variant=\"h6\">Loading combat...</Typography>\r\n        <Button onClick={() => navigate('/map')} sx={{ mt: 2 }}>\r\n          Return to Map\r\n        </Button>\r\n      </Box>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <Box sx={{ \r\n      height: '100%',\r\n      display: 'flex',\r\n      flexDirection: 'column'\r\n    }}>\r\n      <ActiveCombatView combat={combat} onClose={handleClose} />\r\n    </Box>\r\n  );\r\n}; "],"names":["ActiveCombatView","combat","onClose","playTrack","useStore","state","stopIndividualTrack","characters","entrySoundTrackIdRef","useRef","bgmTrackIdRef","audioInitializedRef","participants","setParticipants","useState","currentTurnIndex","setCurrentTurnIndex","round","setRound","isAddParticipantDialogOpen","setIsAddParticipantDialogOpen","newParticipantId","setNewParticipantId","newParticipantInitiative","setNewParticipantInitiative","editingParticipantId","setEditingParticipantId","useEffect","entryTrackId","bgmTrackId","initializeCombat","playerParticipants","character","enemyParticipants","allParticipants","a","b","nextTurn","nextIndex","prevRound","currentParticipant","handleAddParticipant","c","isPlayerCharacter","newParticipant","updatedParticipants","currentId","_a","newCurrentIndex","p","handleUpdateInitiative","participantId","initiative","handleUpdateHp","hp","handleUpdateNotes","notes","handleRemoveParticipant","index","handleClose","newIndex","jsxs","Box","jsx","Paper","IconButton","ArrowBackIcon","Typography","Chip","Button","AddCircleIcon","List","participant","ListItem","DeleteIcon","ListItemIcon","PersonIcon","SportsKabaddiIcon","ListItemText","Badge","EditIcon","TextField","e","Fragment","ArrowForwardIcon","Grid","Card","CardContent","item","Dialog","DialogTitle","DialogContent","FormControl","InputLabel","Select","MenuItem","char","DialogActions","CombatSessionView","navigate","useNavigate","location","useLocation","combats","combatId"],"mappings":"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"}
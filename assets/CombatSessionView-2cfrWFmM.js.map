{"version":3,"file":"CombatSessionView-2cfrWFmM.js","sources":["../../src/components/ActiveCombatView.tsx","../../src/pages/CombatSessionView.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { \r\n  Box, \r\n  Typography, \r\n  Paper, \r\n  Button, \r\n  IconButton, \r\n  List, \r\n  ListItem, \r\n  ListItemText, \r\n  ListItemIcon,\r\n  TextField,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Card,\r\n  CardContent,\r\n  Divider,\r\n  Grid,\r\n  Chip,\r\n  Avatar,\r\n  MenuItem,\r\n  Select,\r\n  FormControl,\r\n  InputLabel,\r\n  Badge,\r\n  Autocomplete\r\n} from '@mui/material';\r\nimport { \r\n  ArrowBack as ArrowBackIcon,\r\n  SportsKabaddi as SportsKabaddiIcon,\r\n  Person as PersonIcon,\r\n  AddCircle as AddCircleIcon,\r\n  ArrowForward as ArrowForwardIcon,\r\n  Close as CloseIcon,\r\n  Delete as DeleteIcon,\r\n  Edit as EditIcon,\r\n  Store as StoreIcon\r\n} from '@mui/icons-material';\r\nimport { useStore } from '../store';\r\nimport { Combat, Character } from '../store';\r\nimport MarkdownContent from './MarkdownContent';\r\n\r\n// Interface for combat participants with initiative\r\ninterface CombatParticipant {\r\n  id: string; // Unique ID for this participant instance\r\n  character: Character;\r\n  initiative: number | string;\r\n  currentHp: number | string;\r\n  maxHp: number;\r\n  notes: string;\r\n  isPlayerCharacter: boolean;\r\n}\r\n\r\ninterface ActiveCombatViewProps {\r\n  combat: Combat;\r\n  onClose: () => void;\r\n}\r\n\r\nexport const ActiveCombatView: React.FC<ActiveCombatViewProps> = ({ combat, onClose }) => {\r\n  const playTrack = useStore(state => state.playTrack);\r\n  const stopIndividualTrack = useStore(state => state.stopIndividualTrack);\r\n  const characters = useStore(state => state.characters);\r\n  \r\n  // Refs to track audio IDs\r\n  const entrySoundTrackIdRef = useRef<string | null>(null);\r\n  const bgmTrackIdRef = useRef<string | null>(null);\r\n  const audioInitializedRef = useRef(false);\r\n  \r\n  // Combat state\r\n  const [participants, setParticipants] = useState<CombatParticipant[]>([]);\r\n  const [currentTurnIndex, setCurrentTurnIndex] = useState(0);\r\n  const [round, setRound] = useState(1);\r\n  const [isAddParticipantDialogOpen, setIsAddParticipantDialogOpen] = useState(false);\r\n  const [newParticipantId, setNewParticipantId] = useState('');\r\n  const [newParticipantInitiative, setNewParticipantInitiative] = useState<number | string>(10);\r\n  const [editingParticipantId, setEditingParticipantId] = useState<string | null>(null);\r\n  const [selectedParticipantId, setSelectedParticipantId] = useState<string | null>(null);\r\n  \r\n  // Initialize audio only once when the component mounts\r\n  useEffect(() => {\r\n    if (!audioInitializedRef.current) {\r\n      // Initialize audio\r\n      if (combat.entrySound) {\r\n        const entryTrackId = `/audio/${combat.entrySound}`;\r\n        entrySoundTrackIdRef.current = entryTrackId;\r\n        playTrack(entryTrackId, { \r\n          replace: false, \r\n          locationId: `combat-entrysound-${combat.id}`, \r\n          loop: false \r\n        });\r\n      }\r\n      \r\n      if (combat.backgroundMusic) {\r\n        const bgmTrackId = `/audio/${combat.backgroundMusic}`;\r\n        bgmTrackIdRef.current = bgmTrackId;\r\n        playTrack(bgmTrackId, { \r\n          replace: false, \r\n          locationId: `combat-bgm-${combat.id}`, \r\n          loop: true \r\n        });\r\n      }\r\n      \r\n      audioInitializedRef.current = true;\r\n    }\r\n    \r\n    // Cleanup function to stop tracks when component unmounts\r\n    return () => {\r\n      if (entrySoundTrackIdRef.current) {\r\n        stopIndividualTrack(entrySoundTrackIdRef.current);\r\n        entrySoundTrackIdRef.current = null;\r\n      }\r\n      \r\n      if (bgmTrackIdRef.current) {\r\n        stopIndividualTrack(bgmTrackIdRef.current);\r\n        bgmTrackIdRef.current = null;\r\n      }\r\n    };\r\n  }, [combat.id, combat.entrySound, combat.backgroundMusic]);\r\n  \r\n  // Initialize combat participants only once\r\n  useEffect(() => {\r\n    initializeCombat();\r\n  }, []);\r\n  \r\n  // Initialize combat participants from the combat data\r\n  const initializeCombat = () => {\r\n    // Create participants from player characters\r\n    const playerParticipants = combat.playerCharacters.map(character => ({\r\n      id: `pc-${character.id}-${Math.random().toString(36).substring(2, 9)}`,\r\n      character,\r\n      initiative: 0,\r\n      currentHp: character.hp,\r\n      maxHp: character.hp,\r\n      notes: '',\r\n      isPlayerCharacter: true\r\n    }));\r\n    \r\n    // Create participants from enemies\r\n    const enemyParticipants = combat.enemies.map(character => ({\r\n      id: `enemy-${character.id}-${Math.random().toString(36).substring(2, 9)}`,\r\n      character,\r\n      initiative: Math.floor(Math.random() * 20) + 1, // Random initiative for initial setup\r\n      currentHp: character.hp,\r\n      maxHp: character.hp,\r\n      notes: '',\r\n      isPlayerCharacter: false\r\n    }));\r\n    \r\n    // Combine and sort by initiative\r\n    const allParticipants = [...playerParticipants, ...enemyParticipants]\r\n      .sort((a, b) => b.initiative - a.initiative);\r\n    \r\n    setParticipants(allParticipants);\r\n    setCurrentTurnIndex(0); // Start with the highest initiative\r\n    setRound(1);\r\n  };\r\n  \r\n  // Advance to the next turn in initiative order\r\n  const nextTurn = () => {\r\n    if (participants.length === 0) return;\r\n    \r\n    const nextIndex = (currentTurnIndex + 1) % participants.length;\r\n    setCurrentTurnIndex(nextIndex);\r\n    \r\n    // When turn changes, update selected participant to match the current turn\r\n    setSelectedParticipantId(participants[nextIndex].id);\r\n    \r\n    // If we've looped back to the first participant, increment the round\r\n    if (nextIndex === 0) {\r\n      setRound(prevRound => prevRound + 1);\r\n    }\r\n  };\r\n  \r\n  // Get the current participant (whose turn it is)\r\n  const currentParticipant = participants[currentTurnIndex];\r\n  \r\n  // Get the selected participant (for details panel)\r\n  const selectedParticipant = participants.find(p => p.id === (selectedParticipantId || currentParticipant?.id));\r\n  \r\n  // Update selectedParticipantId on initial load\r\n  useEffect(() => {\r\n    if (currentParticipant && !selectedParticipantId) {\r\n      setSelectedParticipantId(currentParticipant.id);\r\n    }\r\n  }, [currentParticipant]);\r\n  \r\n  // Handle adding a new participant to the combat\r\n  const handleAddParticipant = () => {\r\n    if (!newParticipantId) return;\r\n    \r\n    const character = characters.find(c => c.id === newParticipantId);\r\n    if (!character) return;\r\n    \r\n    const isPlayerCharacter = character.type === 'player';\r\n    \r\n    const initiative = typeof newParticipantInitiative === 'string' ? \r\n      (parseInt(newParticipantInitiative) || 0) : \r\n      newParticipantInitiative;\r\n    \r\n    const newParticipant: CombatParticipant = {\r\n      id: `${isPlayerCharacter ? 'pc' : 'enemy'}-${character.id}-${Math.random().toString(36).substring(2, 9)}`,\r\n      character,\r\n      initiative: initiative,\r\n      currentHp: character.hp,\r\n      maxHp: character.hp,\r\n      notes: '',\r\n      isPlayerCharacter\r\n    };\r\n    \r\n    // Add to participants and resort by initiative\r\n    const updatedParticipants = [...participants, newParticipant];\r\n    \r\n    // Sort participants by initiative\r\n    const sortedParticipants = sortParticipantsByInitiative(updatedParticipants);\r\n    \r\n    // Find the new index of the current participant to maintain turn\r\n    const currentId = participants[currentTurnIndex]?.id;\r\n    const newCurrentIndex = currentId \r\n      ? sortedParticipants.findIndex(p => p.id === currentId)\r\n      : 0;\r\n    \r\n    setParticipants(sortedParticipants);\r\n    setCurrentTurnIndex(newCurrentIndex >= 0 ? newCurrentIndex : 0);\r\n    setIsAddParticipantDialogOpen(false);\r\n    setNewParticipantId('');\r\n    setNewParticipantInitiative(10);\r\n  };\r\n  \r\n  // Sort participants by initiative (ensuring numeric comparison)\r\n  const sortParticipantsByInitiative = (participants: CombatParticipant[]) => {\r\n    return [...participants].sort((a, b) => {\r\n      const initA = typeof a.initiative === 'string' ? \r\n        (parseInt(a.initiative) || 0) : a.initiative;\r\n      const initB = typeof b.initiative === 'string' ? \r\n        (parseInt(b.initiative) || 0) : b.initiative;\r\n      return initB - initA;\r\n    });\r\n  };\r\n  \r\n  // Handle updating a participant's initiative\r\n  const handleUpdateInitiative = (participantId: string, initiative: number | string) => {\r\n    // Convert string to number and ensure it's a valid number\r\n    const numInitiative = typeof initiative === 'string' ? \r\n      (parseInt(initiative) || 0) : \r\n      initiative;\r\n    \r\n    const updatedParticipants = participants.map(p => \r\n      p.id === participantId ? { ...p, initiative: numInitiative } : p\r\n    );\r\n    \r\n    // Sort participants by initiative\r\n    const sortedParticipants = sortParticipantsByInitiative(updatedParticipants);\r\n    \r\n    // Find the new index of the current participant to maintain turn\r\n    const currentId = participants[currentTurnIndex]?.id;\r\n    const newCurrentIndex = currentId \r\n      ? sortedParticipants.findIndex(p => p.id === currentId)\r\n      : 0;\r\n    \r\n    setParticipants(sortedParticipants);\r\n    setCurrentTurnIndex(newCurrentIndex >= 0 ? newCurrentIndex : 0);\r\n  };\r\n  \r\n  // Handle updating a participant's HP\r\n  const handleUpdateHp = (participantId: string, hp: number | string) => {\r\n    const numHp = typeof hp === 'string' ? \r\n      (parseInt(hp) || 0) : \r\n      hp;\r\n    \r\n    setParticipants(participants.map(p => \r\n      p.id === participantId ? \r\n        { ...p, currentHp: Math.max(0, Math.min(numHp, p.maxHp)) } : \r\n        p\r\n    ));\r\n  };\r\n  \r\n  // Handle updating a participant's notes\r\n  const handleUpdateNotes = (participantId: string, notes: string) => {\r\n    setParticipants(participants.map(p => \r\n      p.id === participantId ? { ...p, notes } : p\r\n    ));\r\n  };\r\n  \r\n  // Handle removing a participant from combat\r\n  const handleRemoveParticipant = (participantId: string) => {\r\n    const index = participants.findIndex(p => p.id === participantId);\r\n    if (index === -1) return;\r\n    \r\n    const updatedParticipants = participants.filter(p => p.id !== participantId);\r\n    \r\n    // If no participants left, close combat\r\n    if (updatedParticipants.length === 0) {\r\n      handleClose();\r\n      return;\r\n    }\r\n    \r\n    // Adjust current turn index if necessary\r\n    let newIndex = currentTurnIndex;\r\n    if (index === currentTurnIndex) {\r\n      // If removing current participant, go to next\r\n      newIndex = currentTurnIndex % updatedParticipants.length;\r\n    } else if (index < currentTurnIndex) {\r\n      // If removing participant before current, adjust index\r\n      newIndex = currentTurnIndex - 1;\r\n    }\r\n    \r\n    setParticipants(updatedParticipants);\r\n    setCurrentTurnIndex(newIndex);\r\n  };\r\n  \r\n  // Handle selecting a participant for viewing/editing\r\n  const handleSelectParticipant = (participantId: string) => {\r\n    setSelectedParticipantId(participantId);\r\n  };\r\n  \r\n  // Handle closing the combat view\r\n  const handleClose = () => {\r\n    // Stop audio tracks\r\n    if (entrySoundTrackIdRef.current) {\r\n      stopIndividualTrack(entrySoundTrackIdRef.current);\r\n      entrySoundTrackIdRef.current = null;\r\n    }\r\n    \r\n    if (bgmTrackIdRef.current) {\r\n      stopIndividualTrack(bgmTrackIdRef.current);\r\n      bgmTrackIdRef.current = null;\r\n    }\r\n    \r\n    // Call parent's onClose\r\n    onClose();\r\n  };\r\n  \r\n  // Convert currentHp and initiative to numbers for display or calculations when needed\r\n  const displayHp = (hp: number | string): number => {\r\n    return typeof hp === 'string' ? (parseInt(hp) || 0) : hp;\r\n  };\r\n  \r\n  return (\r\n    <Box sx={{ \r\n      height: '100%', \r\n      width: '100%', \r\n      display: 'flex', \r\n      flexDirection: 'column',\r\n      overflow: 'hidden', \r\n      position: 'relative',\r\n      backgroundColor: '#222',\r\n      backgroundImage: combat.backgroundImage ? `url(/images/${combat.backgroundImage})` : 'none',\r\n      backgroundSize: 'cover',\r\n      backgroundPosition: 'center',\r\n    }}>\r\n      {/* Semi-transparent overlay for readability over background image */}\r\n      <Box sx={{ \r\n        position: 'absolute', \r\n        top: 0, \r\n        left: 0, \r\n        right: 0, \r\n        bottom: 0, \r\n        backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n        zIndex: 0 \r\n      }} />\r\n      \r\n      {/* Header with combat info */}\r\n      <Paper sx={{ \r\n        p: 2, \r\n        mb: 2, \r\n        display: 'flex', \r\n        justifyContent: 'space-between', \r\n        alignItems: 'center',\r\n        backgroundColor: 'rgba(30, 30, 30, 0.9)',\r\n        position: 'relative',\r\n        zIndex: 1\r\n      }}>\r\n        <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n          <IconButton onClick={handleClose} sx={{ mr: 1 }}>\r\n            <ArrowBackIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h5\">{combat.name}</Typography>\r\n        </Box>\r\n        \r\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\r\n          <Chip \r\n            label={`Round: ${round}`}\r\n            color=\"primary\"\r\n            variant=\"outlined\"\r\n          />\r\n          <Chip \r\n            label={`Difficulty: ${combat.difficulty || 'Medium'}`}\r\n            color=\"secondary\"\r\n            variant=\"outlined\"\r\n          />\r\n          <Button \r\n            variant=\"contained\" \r\n            color=\"primary\"\r\n            startIcon={<AddCircleIcon />}\r\n            onClick={() => setIsAddParticipantDialogOpen(true)}\r\n          >\r\n            Add Participant\r\n          </Button>\r\n        </Box>\r\n      </Paper>\r\n      \r\n      {/* Main content area */}\r\n      <Box sx={{ \r\n        display: 'flex', \r\n        flex: 1, \r\n        overflow: 'hidden',\r\n        position: 'relative',\r\n        zIndex: 1,\r\n        gap: 2,\r\n        p: 2\r\n      }}>\r\n        {/* Initiative order list */}\r\n        <Paper sx={{ \r\n          width: 300, \r\n          overflow: 'auto',\r\n          backgroundColor: 'rgba(30, 30, 30, 0.8)',\r\n          p: 1\r\n        }}>\r\n          <Typography variant=\"h6\" sx={{ mb: 2, p: 1 }}>Initiative Order</Typography>\r\n          \r\n          <List>\r\n            {participants.map((participant, index) => (\r\n              <ListItem \r\n                key={participant.id}\r\n                sx={{ \r\n                  mb: 1,\r\n                  backgroundColor: index === currentTurnIndex \r\n                    ? 'rgba(255, 165, 0, 0.3)' \r\n                    : participant.id === selectedParticipantId && index !== currentTurnIndex\r\n                      ? 'rgba(25, 118, 210, 0.2)'\r\n                      : 'transparent',\r\n                  borderLeft: index === currentTurnIndex \r\n                    ? '4px solid orange' \r\n                    : participant.id === selectedParticipantId\r\n                      ? '4px solid #1976d2'\r\n                      : '4px solid transparent',\r\n                  transition: 'all 0.3s ease',\r\n                  borderRadius: '4px',\r\n                  cursor: 'pointer'\r\n                }}\r\n                onClick={() => handleSelectParticipant(participant.id)}\r\n                secondaryAction={\r\n                  <IconButton \r\n                    edge=\"end\" \r\n                    size=\"small\" \r\n                    onClick={(e) => {\r\n                      e.stopPropagation(); // Prevent triggering the ListItem click\r\n                      handleRemoveParticipant(participant.id);\r\n                    }}\r\n                  >\r\n                    <DeleteIcon fontSize=\"small\" />\r\n                  </IconButton>\r\n                }\r\n              >\r\n                <ListItemIcon>\r\n                  {participant.isPlayerCharacter ? \r\n                    <PersonIcon color=\"primary\" /> : \r\n                    <SportsKabaddiIcon color=\"error\" />\r\n                  }\r\n                </ListItemIcon>\r\n                \r\n                <ListItemText \r\n                  primary={\r\n                    <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n                      <Typography variant=\"body1\">{participant.character.name}</Typography>\r\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                        <Badge \r\n                          badgeContent={participant.initiative} \r\n                          color=\"primary\"\r\n                          sx={{ mr: 1 }}\r\n                        />\r\n                        <IconButton \r\n                          size=\"small\" \r\n                          onClick={(e) => {\r\n                            e.stopPropagation(); // Prevent triggering the ListItem click\r\n                            setEditingParticipantId(participant.id === editingParticipantId ? null : participant.id);\r\n                          }}\r\n                        >\r\n                          <EditIcon fontSize=\"small\" />\r\n                        </IconButton>\r\n                      </Box>\r\n                    </Box>\r\n                  }\r\n                  secondary={\r\n                    <Box>\r\n                      <Typography variant=\"caption\" component=\"div\">\r\n                        HP: {displayHp(participant.currentHp)}/{participant.maxHp}\r\n                      </Typography>\r\n                      {editingParticipantId === participant.id && (\r\n                        <Box sx={{ mt: 1, display: 'flex', flexDirection: 'column', gap: 1 }}>\r\n                          <TextField\r\n                            label=\"Initiative\"\r\n                            size=\"small\"\r\n                            value={participant.initiative}\r\n                            onChange={(e) => {\r\n                              const value = e.target.value;\r\n                              // Allow empty string for easier editing\r\n                              if (value === '') {\r\n                                handleUpdateInitiative(participant.id, '');\r\n                              } else {\r\n                                const parsed = parseInt(value);\r\n                                if (!isNaN(parsed)) {\r\n                                  handleUpdateInitiative(participant.id, parsed);\r\n                                }\r\n                              }\r\n                            }}\r\n                            onBlur={() => {\r\n                              // When field loses focus, ensure we have a valid number\r\n                              if (typeof participant.initiative === 'string' || isNaN(participant.initiative)) {\r\n                                handleUpdateInitiative(participant.id, 0);\r\n                              }\r\n                            }}\r\n                            inputProps={{\r\n                              min: 0,\r\n                              step: 1\r\n                            }}\r\n                            helperText=\"Higher initiative goes first\"\r\n                          />\r\n                          <TextField\r\n                            label=\"Current HP\"\r\n                            size=\"small\"\r\n                            value={participant.currentHp}\r\n                            onChange={(e) => {\r\n                              const value = e.target.value;\r\n                              // Allow empty string for easier editing\r\n                              if (value === '') {\r\n                                handleUpdateHp(participant.id, '');\r\n                              } else {\r\n                                const parsed = parseInt(value);\r\n                                if (!isNaN(parsed)) {\r\n                                  handleUpdateHp(participant.id, parsed);\r\n                                }\r\n                              }\r\n                            }}\r\n                            onBlur={() => {\r\n                              // When field loses focus, ensure we have a valid number\r\n                              if (typeof participant.currentHp === 'string' || isNaN(participant.currentHp)) {\r\n                                handleUpdateHp(participant.id, 0);\r\n                              }\r\n                            }}\r\n                            inputProps={{\r\n                              min: 0,\r\n                              max: participant.maxHp,\r\n                              step: 1\r\n                            }}\r\n                            helperText={`Max: ${participant.maxHp}`}\r\n                          />\r\n                          <TextField\r\n                            label=\"Notes\"\r\n                            size=\"small\"\r\n                            multiline\r\n                            rows={2}\r\n                            value={participant.notes}\r\n                            onChange={(e) => handleUpdateNotes(participant.id, e.target.value)}\r\n                          />\r\n                        </Box>\r\n                      )}\r\n                    </Box>\r\n                  }\r\n                />\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n        </Paper>\r\n        \r\n        {/* Active participant details */}\r\n        <Paper sx={{ \r\n          flex: 1, \r\n          p: 2,\r\n          backgroundColor: 'rgba(30, 30, 30, 0.8)',\r\n          display: 'flex',\r\n          flexDirection: 'column'\r\n        }}>\r\n          {selectedParticipant ? (\r\n            <>\r\n              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\r\n                <Box>\r\n                  <Typography variant=\"h5\">\r\n                    {selectedParticipant.id === currentParticipant?.id \r\n                      ? `Current Turn: ${selectedParticipant.character.name}`\r\n                      : selectedParticipant.character.name\r\n                    }\r\n                  </Typography>\r\n                  {selectedParticipant.id !== currentParticipant?.id && (\r\n                    <Typography variant=\"caption\" color=\"text.secondary\">\r\n                      Viewing details - not the active turn\r\n                    </Typography>\r\n                  )}\r\n                </Box>\r\n                <Button \r\n                  variant=\"contained\" \r\n                  color=\"secondary\"\r\n                  endIcon={<ArrowForwardIcon />}\r\n                  onClick={nextTurn}\r\n                >\r\n                  Next Turn\r\n                </Button>\r\n              </Box>\r\n              \r\n              <Grid container spacing={2}>\r\n                <Grid item xs={12} md={6}>\r\n                  <Card sx={{ backgroundColor: 'rgba(40, 40, 40, 0.9)', height: '100%' }}>\r\n                    <CardContent>\r\n                      <Typography variant=\"h6\" gutterBottom>\r\n                        Character Details\r\n                      </Typography>\r\n                      <Typography variant=\"body1\">\r\n                        Type: {selectedParticipant.character.type.toUpperCase()}\r\n                      </Typography>\r\n                      <Typography variant=\"body1\">\r\n                        HP: {displayHp(selectedParticipant.currentHp)}/{selectedParticipant.maxHp}\r\n                      </Typography>\r\n                      <Box sx={{ mt: 2 }}>\r\n                        {selectedParticipant.character.descriptionType === 'markdown' && (\r\n                          <MarkdownContent content={selectedParticipant.character.description} />\r\n                        )}\r\n                        {(!selectedParticipant.character.descriptionType || selectedParticipant.character.descriptionType !== 'markdown') && (\r\n                          <Typography variant=\"body2\">\r\n                            {selectedParticipant.character.description}\r\n                          </Typography>\r\n                        )}\r\n                      </Box>\r\n                      \r\n                      {/* HP adjustment controls */}\r\n                      <Box sx={{ mt: 3 }}>\r\n                        <Typography variant=\"subtitle2\" gutterBottom>Adjust HP</Typography>\r\n                        <Box sx={{ display: 'flex', gap: 1 }}>\r\n                          <Button \r\n                            variant=\"outlined\" \r\n                            size=\"small\"\r\n                            onClick={() => {\r\n                              const currentHp = displayHp(selectedParticipant.currentHp);\r\n                              handleUpdateHp(selectedParticipant.id, Math.max(0, currentHp - 1));\r\n                            }}\r\n                          >\r\n                            -1\r\n                          </Button>\r\n                          <Button \r\n                            variant=\"outlined\" \r\n                            size=\"small\"\r\n                            onClick={() => {\r\n                              const currentHp = displayHp(selectedParticipant.currentHp);\r\n                              handleUpdateHp(selectedParticipant.id, Math.max(0, currentHp - 5));\r\n                            }}\r\n                          >\r\n                            -5\r\n                          </Button>\r\n                          <Button \r\n                            variant=\"outlined\" \r\n                            color=\"primary\"\r\n                            size=\"small\"\r\n                            onClick={() => {\r\n                              const currentHp = displayHp(selectedParticipant.currentHp);\r\n                              handleUpdateHp(selectedParticipant.id, Math.min(selectedParticipant.maxHp, currentHp + 1));\r\n                            }}\r\n                          >\r\n                            +1\r\n                          </Button>\r\n                          <Button \r\n                            variant=\"outlined\" \r\n                            color=\"primary\"\r\n                            size=\"small\"\r\n                            onClick={() => {\r\n                              const currentHp = displayHp(selectedParticipant.currentHp);\r\n                              handleUpdateHp(selectedParticipant.id, Math.min(selectedParticipant.maxHp, currentHp + 5));\r\n                            }}\r\n                          >\r\n                            +5\r\n                          </Button>\r\n                        </Box>\r\n                      </Box>\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n                \r\n                <Grid item xs={12} md={6}>\r\n                  <Card sx={{ backgroundColor: 'rgba(40, 40, 40, 0.9)', height: '100%' }}>\r\n                    <CardContent>\r\n                      <Typography variant=\"h6\" gutterBottom>\r\n                        Combat Notes\r\n                      </Typography>\r\n                      <TextField\r\n                        fullWidth\r\n                        multiline\r\n                        rows={8}\r\n                        value={selectedParticipant.notes}\r\n                        onChange={(e) => handleUpdateNotes(selectedParticipant.id, e.target.value)}\r\n                        placeholder=\"Add notes for this character...\"\r\n                        variant=\"outlined\"\r\n                      />\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n                \r\n                {selectedParticipant.character.inventory && selectedParticipant.character.inventory.length > 0 && (\r\n                  <Grid item xs={12}>\r\n                    <Card sx={{ backgroundColor: 'rgba(40, 40, 40, 0.9)' }}>\r\n                      <CardContent>\r\n                        <Typography variant=\"h6\" gutterBottom>\r\n                          Inventory\r\n                        </Typography>\r\n                        <List dense>\r\n                          {selectedParticipant.character.inventory.map(item => (\r\n                            <ListItem key={item.id}>\r\n                              <ListItemText \r\n                                primary={item.name} \r\n                                secondary={item.description} \r\n                              />\r\n                              <Typography variant=\"body2\">\r\n                                Qty: {item.quantity}\r\n                              </Typography>\r\n                            </ListItem>\r\n                          ))}\r\n                        </List>\r\n                      </CardContent>\r\n                    </Card>\r\n                  </Grid>\r\n                )}\r\n              </Grid>\r\n            </>\r\n          ) : (\r\n            <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100%' }}>\r\n              <Typography variant=\"h6\">No participants in combat</Typography>\r\n            </Box>\r\n          )}\r\n        </Paper>\r\n      </Box>\r\n      \r\n      {/* Add participant dialog */}\r\n      <Dialog \r\n        open={isAddParticipantDialogOpen} \r\n        onClose={() => setIsAddParticipantDialogOpen(false)}\r\n        maxWidth=\"sm\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Add Combat Participant</DialogTitle>\r\n        <DialogContent>\r\n          <Box sx={{ mt: 2, display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n            <Autocomplete\r\n              options={characters}\r\n              value={characters.find(char => char.id === newParticipantId) || null}\r\n              onChange={(_, newValue) => {\r\n                setNewParticipantId(newValue?.id || '');\r\n              }}\r\n              getOptionLabel={(option) => `${option.name} (${option.type}) - HP: ${option.hp}`}\r\n              renderOption={(props, option) => {\r\n                // Extract the key from props\r\n                const { key, ...otherProps } = props;\r\n                return (\r\n                  <li key={key} {...otherProps}>\r\n                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                      {option.type === 'npc' ? <PersonIcon color=\"primary\" sx={{ mr: 1 }} /> : \r\n                       option.type === 'merchant' ? <StoreIcon color=\"secondary\" sx={{ mr: 1 }} /> :\r\n                       option.type === 'enemy' ? <SportsKabaddiIcon color=\"error\" sx={{ mr: 1 }} /> :\r\n                       <PersonIcon color=\"success\" sx={{ mr: 1 }} />}\r\n                      <Box>\r\n                        <Typography variant=\"body1\">{option.name}</Typography>\r\n                        <Typography variant=\"caption\" color=\"text.secondary\">\r\n                          {option.type.toUpperCase()} • HP: {option.hp}\r\n                        </Typography>\r\n                      </Box>\r\n                    </Box>\r\n                  </li>\r\n                );\r\n              }}\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  label=\"Character\"\r\n                  fullWidth\r\n                  helperText=\"Select a character to add to combat\"\r\n                />\r\n              )}\r\n              isOptionEqualToValue={(option, value) => option.id === value.id}\r\n            />\r\n            \r\n            <TextField\r\n              label=\"Initiative\"\r\n              value={newParticipantInitiative}\r\n              onChange={(e) => {\r\n                const value = e.target.value;\r\n                // Allow empty string for easier editing\r\n                if (value === '') {\r\n                  setNewParticipantInitiative('');\r\n                } else {\r\n                  const parsed = parseInt(value);\r\n                  if (!isNaN(parsed)) {\r\n                    setNewParticipantInitiative(parsed);\r\n                  }\r\n                }\r\n              }}\r\n              onBlur={() => {\r\n                // When field loses focus, ensure we have a valid number\r\n                if (newParticipantInitiative === '' || typeof newParticipantInitiative === 'string') {\r\n                  setNewParticipantInitiative(0);\r\n                }\r\n              }}\r\n              fullWidth\r\n              helperText=\"Higher initiative goes first\"\r\n            />\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setIsAddParticipantDialogOpen(false)}>Cancel</Button>\r\n          <Button \r\n            onClick={handleAddParticipant} \r\n            color=\"primary\" \r\n            variant=\"contained\"\r\n            disabled={!newParticipantId}\r\n          >\r\n            Add\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n}; ","import React, { useEffect } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport { Box, Typography, Button } from '@mui/material';\r\nimport { useStore } from '../store';\r\nimport { Combat } from '../store';\r\nimport { ActiveCombatView } from '../components/ActiveCombatView';\r\n\r\nexport const CombatSessionView: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const combats = useStore(state => state.combats);\r\n  \r\n  // Get the combat ID from the URL state\r\n  const combatId = location.state?.combatId;\r\n  const combat = combats.find(c => c.id === combatId);\r\n  \r\n  // If no combat is selected, redirect back to the map view\r\n  useEffect(() => {\r\n    if (!combatId || !combat) {\r\n      navigate('/map');\r\n    }\r\n  }, [combatId, combat, navigate]);\r\n  \r\n  // Handle going back to the previous screen\r\n  const handleClose = () => {\r\n    navigate(-1); // Go back to previous page\r\n  };\r\n  \r\n  // Return a loading state if the combat isn't found\r\n  if (!combat) {\r\n    return (\r\n      <Box sx={{ \r\n        display: 'flex', \r\n        flexDirection: 'column', \r\n        alignItems: 'center', \r\n        justifyContent: 'center',\r\n        height: '100%',\r\n        p: 3\r\n      }}>\r\n        <Typography variant=\"h6\">Loading combat...</Typography>\r\n        <Button onClick={() => navigate('/map')} sx={{ mt: 2 }}>\r\n          Return to Map\r\n        </Button>\r\n      </Box>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <Box sx={{ \r\n      height: '100%',\r\n      display: 'flex',\r\n      flexDirection: 'column'\r\n    }}>\r\n      <ActiveCombatView combat={combat} onClose={handleClose} />\r\n    </Box>\r\n  );\r\n}; "],"names":["ActiveCombatView","combat","onClose","playTrack","useStore","state","stopIndividualTrack","characters","entrySoundTrackIdRef","useRef","bgmTrackIdRef","audioInitializedRef","participants","setParticipants","useState","currentTurnIndex","setCurrentTurnIndex","round","setRound","isAddParticipantDialogOpen","setIsAddParticipantDialogOpen","newParticipantId","setNewParticipantId","newParticipantInitiative","setNewParticipantInitiative","editingParticipantId","setEditingParticipantId","selectedParticipantId","setSelectedParticipantId","useEffect","entryTrackId","bgmTrackId","initializeCombat","playerParticipants","character","enemyParticipants","allParticipants","a","b","nextTurn","nextIndex","prevRound","currentParticipant","selectedParticipant","p","handleAddParticipant","c","isPlayerCharacter","initiative","newParticipant","updatedParticipants","sortedParticipants","sortParticipantsByInitiative","currentId","_a","newCurrentIndex","initA","handleUpdateInitiative","participantId","numInitiative","handleUpdateHp","hp","numHp","handleUpdateNotes","notes","handleRemoveParticipant","index","handleClose","newIndex","handleSelectParticipant","displayHp","jsxs","Box","jsx","Paper","IconButton","ArrowBackIcon","Typography","Chip","Button","AddCircleIcon","List","participant","ListItem","e","DeleteIcon","ListItemIcon","PersonIcon","SportsKabaddiIcon","ListItemText","Badge","EditIcon","TextField","value","parsed","Fragment","ArrowForwardIcon","Grid","Card","CardContent","MarkdownContent","currentHp","item","Dialog","DialogTitle","DialogContent","Autocomplete","char","_","newValue","option","props","key","otherProps","StoreIcon","params","DialogActions","CombatSessionView","navigate","useNavigate","location","useLocation","combats","combatId"],"mappings":"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"}
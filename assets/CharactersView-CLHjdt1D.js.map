{"version":3,"file":"CharactersView-CLHjdt1D.js","sources":["../../node_modules/@mui/icons-material/Store.js","../../node_modules/@mui/icons-material/Inventory.js","../../node_modules/@mui/icons-material/VideogameAsset.js","../../node_modules/comma-separated-tokens/index.js","../../node_modules/estree-util-is-identifier-name/lib/index.js","../../node_modules/hast-util-whitespace/lib/index.js","../../node_modules/property-information/lib/util/schema.js","../../node_modules/property-information/lib/util/merge.js","../../node_modules/property-information/lib/normalize.js","../../node_modules/property-information/lib/util/info.js","../../node_modules/property-information/lib/util/types.js","../../node_modules/property-information/lib/util/defined-info.js","../../node_modules/property-information/lib/util/create.js","../../node_modules/property-information/lib/aria.js","../../node_modules/property-information/lib/util/case-sensitive-transform.js","../../node_modules/property-information/lib/util/case-insensitive-transform.js","../../node_modules/property-information/lib/html.js","../../node_modules/property-information/lib/svg.js","../../node_modules/property-information/lib/xlink.js","../../node_modules/property-information/lib/xmlns.js","../../node_modules/property-information/lib/xml.js","../../node_modules/property-information/lib/hast-to-react.js","../../node_modules/property-information/lib/find.js","../../node_modules/property-information/index.js","../../node_modules/space-separated-tokens/index.js","../../node_modules/inline-style-parser/index.js","../../node_modules/style-to-object/cjs/index.js","../../node_modules/style-to-js/cjs/utilities.js","../../node_modules/style-to-js/cjs/index.js","../../node_modules/unist-util-position/lib/index.js","../../node_modules/unist-util-stringify-position/lib/index.js","../../node_modules/vfile-message/lib/index.js","../../node_modules/hast-util-to-jsx-runtime/lib/index.js","../../node_modules/html-url-attributes/lib/index.js","../../node_modules/mdast-util-to-string/lib/index.js","../../node_modules/decode-named-character-reference/index.dom.js","../../node_modules/micromark-util-chunked/index.js","../../node_modules/micromark-util-combine-extensions/index.js","../../node_modules/micromark-util-decode-numeric-character-reference/index.js","../../node_modules/micromark-util-normalize-identifier/index.js","../../node_modules/micromark-util-character/index.js","../../node_modules/micromark-util-sanitize-uri/index.js","../../node_modules/micromark-factory-space/index.js","../../node_modules/micromark/lib/initialize/content.js","../../node_modules/micromark/lib/initialize/document.js","../../node_modules/micromark-util-classify-character/index.js","../../node_modules/micromark-util-resolve-all/index.js","../../node_modules/micromark-core-commonmark/lib/attention.js","../../node_modules/micromark-core-commonmark/lib/autolink.js","../../node_modules/micromark-core-commonmark/lib/blank-line.js","../../node_modules/micromark-core-commonmark/lib/block-quote.js","../../node_modules/micromark-core-commonmark/lib/character-escape.js","../../node_modules/micromark-core-commonmark/lib/character-reference.js","../../node_modules/micromark-core-commonmark/lib/code-fenced.js","../../node_modules/micromark-core-commonmark/lib/code-indented.js","../../node_modules/micromark-core-commonmark/lib/code-text.js","../../node_modules/micromark-util-subtokenize/lib/splice-buffer.js","../../node_modules/micromark-util-subtokenize/index.js","../../node_modules/micromark-core-commonmark/lib/content.js","../../node_modules/micromark-factory-destination/index.js","../../node_modules/micromark-factory-label/index.js","../../node_modules/micromark-factory-title/index.js","../../node_modules/micromark-factory-whitespace/index.js","../../node_modules/micromark-core-commonmark/lib/definition.js","../../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../../node_modules/micromark-core-commonmark/lib/heading-atx.js","../../node_modules/micromark-util-html-tag-name/index.js","../../node_modules/micromark-core-commonmark/lib/html-flow.js","../../node_modules/micromark-core-commonmark/lib/html-text.js","../../node_modules/micromark-core-commonmark/lib/label-end.js","../../node_modules/micromark-core-commonmark/lib/label-start-image.js","../../node_modules/micromark-core-commonmark/lib/label-start-link.js","../../node_modules/micromark-core-commonmark/lib/line-ending.js","../../node_modules/micromark-core-commonmark/lib/thematic-break.js","../../node_modules/micromark-core-commonmark/lib/list.js","../../node_modules/micromark-core-commonmark/lib/setext-underline.js","../../node_modules/micromark/lib/initialize/flow.js","../../node_modules/micromark/lib/initialize/text.js","../../node_modules/micromark/lib/constructs.js","../../node_modules/micromark/lib/create-tokenizer.js","../../node_modules/micromark/lib/parse.js","../../node_modules/micromark/lib/postprocess.js","../../node_modules/micromark/lib/preprocess.js","../../node_modules/micromark-util-decode-string/index.js","../../node_modules/mdast-util-from-markdown/lib/index.js","../../node_modules/remark-parse/lib/index.js","../../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../../node_modules/mdast-util-to-hast/lib/handlers/break.js","../../node_modules/mdast-util-to-hast/lib/handlers/code.js","../../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../../node_modules/mdast-util-to-hast/lib/handlers/html.js","../../node_modules/mdast-util-to-hast/lib/revert.js","../../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../../node_modules/mdast-util-to-hast/lib/handlers/image.js","../../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../../node_modules/mdast-util-to-hast/lib/handlers/link.js","../../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../../node_modules/mdast-util-to-hast/lib/handlers/list.js","../../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../../node_modules/mdast-util-to-hast/lib/handlers/root.js","../../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../../node_modules/mdast-util-to-hast/lib/handlers/table.js","../../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../../node_modules/trim-lines/index.js","../../node_modules/mdast-util-to-hast/lib/handlers/text.js","../../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../../node_modules/mdast-util-to-hast/lib/handlers/index.js","../../node_modules/@ungap/structured-clone/esm/types.js","../../node_modules/@ungap/structured-clone/esm/deserialize.js","../../node_modules/@ungap/structured-clone/esm/serialize.js","../../node_modules/@ungap/structured-clone/esm/index.js","../../node_modules/mdast-util-to-hast/lib/footer.js","../../node_modules/unist-util-is/lib/index.js","../../node_modules/unist-util-visit-parents/lib/index.js","../../node_modules/unist-util-visit/lib/index.js","../../node_modules/mdast-util-to-hast/lib/state.js","../../node_modules/mdast-util-to-hast/lib/index.js","../../node_modules/remark-rehype/lib/index.js","../../node_modules/bail/index.js","../../node_modules/extend/index.js","../../node_modules/is-plain-obj/index.js","../../node_modules/trough/lib/index.js","../../node_modules/vfile/lib/minpath.browser.js","../../node_modules/vfile/lib/minproc.browser.js","../../node_modules/vfile/lib/minurl.shared.js","../../node_modules/vfile/lib/minurl.browser.js","../../node_modules/vfile/lib/index.js","../../node_modules/unified/lib/callable-instance.js","../../node_modules/unified/lib/index.js","../../node_modules/react-markdown/lib/index.js","../../src/pages/CharactersView.tsx"],"sourcesContent":["\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M20 4H4v2h16zm1 10v-2l-1-5H4l-1 5v2h1v6h10v-6h4v6h2v-6zm-9 4H6v-4h6z\"\n}), 'Store');","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M20 2H4c-1 0-2 .9-2 2v3.01c0 .72.43 1.34 1 1.69V20c0 1.1 1.1 2 2 2h14c.9 0 2-.9 2-2V8.7c.57-.35 1-.97 1-1.69V4c0-1.1-1-2-2-2m-5 12H9v-2h6zm5-7H4V4l16-.02z\"\n}), 'Inventory');","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M21 6H3c-1.1 0-2 .9-2 2v8c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2m-10 7H8v3H6v-3H3v-2h3V8h2v3h3zm4.5 2c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5m4-3c-.83 0-1.5-.67-1.5-1.5S18.67 9 19.5 9s1.5.67 1.5 1.5-.67 1.5-1.5 1.5\"\n}), 'VideogameAsset');","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [jsx=false]\n *   Support JSX identifiers (default: `false`).\n */\n\nconst startRe = /[$_\\p{ID_Start}]/u\nconst contRe = /[$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst contReJsx = /[-$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst nameRe = /^[$_\\p{ID_Start}][$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\nconst nameReJsx = /^[$_\\p{ID_Start}][-$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Checks if the given code point can start an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @returns {boolean}\n *   Whether `code` can start an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function start(code) {\n  return code ? startRe.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given code point can continue an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `code` can continue an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function cont(code, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? contReJsx : contRe\n  return code ? re.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given value is a valid identifier name.\n *\n * @param {string} name\n *   Identifier to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `name` can be an identifier.\n */\nexport function name(name, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? nameReJsx : nameRe\n  return re.test(name)\n}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n","/**\n * @import {Schema as SchemaType, Space} from 'property-information'\n */\n\n/** @type {SchemaType} */\nexport class Schema {\n  /**\n   * @param {SchemaType['property']} property\n   *   Property.\n   * @param {SchemaType['normal']} normal\n   *   Normal.\n   * @param {Space | undefined} [space]\n   *   Space.\n   * @returns\n   *   Schema.\n   */\n  constructor(property, normal, space) {\n    this.normal = normal\n    this.property = property\n\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\nSchema.prototype.normal = {}\nSchema.prototype.property = {}\nSchema.prototype.space = undefined\n","/**\n * @import {Info, Space} from 'property-information'\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {ReadonlyArray<Schema>} definitions\n *   Definitions.\n * @param {Space | undefined} [space]\n *   Space.\n * @returns {Schema}\n *   Schema.\n */\nexport function merge(definitions, space) {\n  /** @type {Record<string, Info>} */\n  const property = {}\n  /** @type {Record<string, string>} */\n  const normal = {}\n\n  for (const definition of definitions) {\n    Object.assign(property, definition.property)\n    Object.assign(normal, definition.normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * Get the cleaned case insensitive form of an attribute or property.\n *\n * @param {string} value\n *   An attribute-like or property-like name.\n * @returns {string}\n *   Value that can be used to look up the properly cased property on a\n *   `Schema`.\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","/**\n * @import {Info as InfoType} from 'property-information'\n */\n\n/** @type {InfoType} */\nexport class Info {\n  /**\n   * @param {string} property\n   *   Property.\n   * @param {string} attribute\n   *   Attribute.\n   * @returns\n   *   Info.\n   */\n  constructor(property, attribute) {\n    this.attribute = attribute\n    this.property = property\n  }\n}\n\nInfo.prototype.attribute = ''\nInfo.prototype.booleanish = false\nInfo.prototype.boolean = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.defined = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.number = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.property = ''\nInfo.prototype.spaceSeparated = false\nInfo.prototype.space = undefined\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","/**\n * @import {Space} from 'property-information'\n */\n\nimport {Info} from './info.js'\nimport * as types from './types.js'\n\nconst checks = /** @type {ReadonlyArray<keyof typeof types>} */ (\n  Object.keys(types)\n)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   *   Property.\n   * @param {string} attribute\n   *   Attribute.\n   * @param {number | null | undefined} [mask]\n   *   Mask.\n   * @param {Space | undefined} [space]\n   *   Space.\n   * @returns\n   *   Info.\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @template {keyof DefinedInfo} Key\n *   Key type.\n * @param {DefinedInfo} values\n *   Info.\n * @param {Key} key\n *   Key.\n * @param {DefinedInfo[Key]} value\n *   Value.\n * @returns {undefined}\n *   Nothing.\n */\nfunction mark(values, key, value) {\n  if (value) {\n    values[key] = value\n  }\n}\n","/**\n * @import {Info, Space} from 'property-information'\n */\n\n/**\n * @typedef Definition\n *   Definition of a schema.\n * @property {Record<string, string> | undefined} [attributes]\n *   Normalzed names to special attribute case.\n * @property {ReadonlyArray<string> | undefined} [mustUseProperty]\n *   Normalized names that must be set as properties.\n * @property {Record<string, number | null>} properties\n *   Property names to their types.\n * @property {Space | undefined} [space]\n *   Space.\n * @property {Transform} transform\n *   Transform a property name.\n */\n\n/**\n * @callback Transform\n *   Transform.\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} property\n *   Property.\n * @returns {string}\n *   Attribute.\n */\n\nimport {normalize} from '../normalize.js'\nimport {DefinedInfo} from './defined-info.js'\nimport {Schema} from './schema.js'\n\n/**\n * @param {Definition} definition\n *   Definition.\n * @returns {Schema}\n *   Schema.\n */\nexport function create(definition) {\n  /** @type {Record<string, Info>} */\n  const properties = {}\n  /** @type {Record<string, string>} */\n  const normals = {}\n\n  for (const [property, value] of Object.entries(definition.properties)) {\n    const info = new DefinedInfo(\n      property,\n      definition.transform(definition.attributes || {}, property),\n      value,\n      definition.space\n    )\n\n    if (\n      definition.mustUseProperty &&\n      definition.mustUseProperty.includes(property)\n    ) {\n      info.mustUseProperty = true\n    }\n\n    properties[property] = info\n\n    normals[normalize(property)] = property\n    normals[normalize(info.attribute)] = property\n  }\n\n  return new Schema(properties, normals, definition.space)\n}\n","import {create} from './util/create.js'\nimport {booleanish, number, spaceSeparated} from './util/types.js'\n\nexport const aria = create({\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  },\n  transform(_, property) {\n    return property === 'role'\n      ? property\n      : 'aria-' + property.slice(4).toLowerCase()\n  }\n})\n","/**\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} attribute\n *   Attribute.\n * @returns {string}\n *   Transformed attribute.\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} property\n *   Property.\n * @returns {string}\n *   Transformed property.\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\nimport {create} from './util/create.js'\nimport {\n  booleanish,\n  boolean,\n  commaSeparated,\n  number,\n  overloadedBoolean,\n  spaceSeparated\n} from './util/types.js'\n\nexport const html = create({\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: null,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootClonable: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n    writingSuggestions: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  },\n  space: 'html',\n  transform: caseInsensitiveTransform\n})\n","import {caseSensitiveTransform} from './util/case-sensitive-transform.js'\nimport {create} from './util/create.js'\nimport {\n  boolean,\n  commaOrSpaceSeparated,\n  commaSeparated,\n  number,\n  spaceSeparated\n} from './util/types.js'\n\nexport const svg = create({\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  },\n  space: 'svg',\n  transform: caseSensitiveTransform\n})\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  },\n  space: 'xlink',\n  transform(_, property) {\n    return 'xlink:' + property.slice(5).toLowerCase()\n  }\n})\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  properties: {xmlnsXLink: null, xmlns: null},\n  space: 'xmlns',\n  transform: caseInsensitiveTransform\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  properties: {xmlBase: null, xmlLang: null, xmlSpace: null},\n  space: 'xml',\n  transform(_, property) {\n    return 'xml:' + property.slice(3).toLowerCase()\n  }\n})\n","/**\n * Special cases for React (`Record<string, string>`).\n *\n * `hast` is close to `React` but differs in a couple of cases.\n * To get a React property from a hast property,\n * check if it is in `hastToReact`.\n * If it is, use the corresponding value;\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","/**\n * @import {Schema} from 'property-information'\n */\n\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\nimport {normalize} from './normalize.js'\n\nconst cap = /[A-Z]/g\nconst dash = /-[a-z]/g\nconst valid = /^data[-\\w.:]+$/i\n\n/**\n * Look up info on a property.\n *\n * In most cases the given `schema` contains info on the property.\n * All standard,\n * most legacy,\n * and some non-standard properties are supported.\n * For these cases,\n * the returned `Info` has hints about the value of the property.\n *\n * `name` can also be a valid data attribute or property,\n * in which case an `Info` object with the correctly cased `attribute` and\n * `property` is returned.\n *\n * `name` can be an unknown attribute,\n * in which case an `Info` object with `attribute` and `property` set to the\n * given name is returned.\n * It is not recommended to provide unsupported legacy or recently specced\n * properties.\n *\n *\n * @param {Schema} schema\n *   Schema;\n *   either the `html` or `svg` export.\n * @param {string} value\n *   An attribute-like or property-like name;\n *   it will be passed through `normalize` to hopefully find the correct info.\n * @returns {Info}\n *   Info.\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let property = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      property = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(property, value)\n}\n\n/**\n * @param {string} $0\n *   Value.\n * @returns {string}\n *   Kebab.\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n *   Value.\n * @returns {string}\n *   Camel.\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","// Note: types exposed from `index.d.ts`.\nimport {merge} from './lib/util/merge.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\nimport {xlink} from './lib/xlink.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {xml} from './lib/xml.js'\n\nexport {hastToReact} from './lib/hast-to-react.js'\n\nexport const html = merge([aria, htmlBase, xlink, xmlns, xml], 'html')\n\nexport {find} from './lib/find.js'\nexport {normalize} from './lib/normalize.js'\n\nexport const svg = merge([aria, svgBase, xlink, xmlns, xml], 'svg')\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function (style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function (node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = StyleToObject;\nvar inline_style_parser_1 = __importDefault(require(\"inline-style-parser\"));\n/**\n * Parses inline style to object.\n *\n * @param style - Inline style.\n * @param iterator - Iterator.\n * @returns - Style object or null.\n *\n * @example Parsing inline style to object:\n *\n * ```js\n * import parse from 'style-to-object';\n * parse('line-height: 42;'); // { 'line-height': '42' }\n * ```\n */\nfunction StyleToObject(style, iterator) {\n    var styleObject = null;\n    if (!style || typeof style !== 'string') {\n        return styleObject;\n    }\n    var declarations = (0, inline_style_parser_1.default)(style);\n    var hasIterator = typeof iterator === 'function';\n    declarations.forEach(function (declaration) {\n        if (declaration.type !== 'declaration') {\n            return;\n        }\n        var property = declaration.property, value = declaration.value;\n        if (hasIterator) {\n            iterator(property, value, declaration);\n        }\n        else if (value) {\n            styleObject = styleObject || {};\n            styleObject[property] = value;\n        }\n    });\n    return styleObject;\n}\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.camelCase = void 0;\nvar CUSTOM_PROPERTY_REGEX = /^--[a-zA-Z0-9_-]+$/;\nvar HYPHEN_REGEX = /-([a-z])/g;\nvar NO_HYPHEN_REGEX = /^[^-]+$/;\nvar VENDOR_PREFIX_REGEX = /^-(webkit|moz|ms|o|khtml)-/;\nvar MS_VENDOR_PREFIX_REGEX = /^-(ms)-/;\n/**\n * Checks whether to skip camelCase.\n */\nvar skipCamelCase = function (property) {\n    return !property ||\n        NO_HYPHEN_REGEX.test(property) ||\n        CUSTOM_PROPERTY_REGEX.test(property);\n};\n/**\n * Replacer that capitalizes first character.\n */\nvar capitalize = function (match, character) {\n    return character.toUpperCase();\n};\n/**\n * Replacer that removes beginning hyphen of vendor prefix property.\n */\nvar trimHyphen = function (match, prefix) { return \"\".concat(prefix, \"-\"); };\n/**\n * CamelCases a CSS property.\n */\nvar camelCase = function (property, options) {\n    if (options === void 0) { options = {}; }\n    if (skipCamelCase(property)) {\n        return property;\n    }\n    property = property.toLowerCase();\n    if (options.reactCompat) {\n        // `-ms` vendor prefix should not be capitalized\n        property = property.replace(MS_VENDOR_PREFIX_REGEX, trimHyphen);\n    }\n    else {\n        // for non-React, remove first hyphen so vendor prefix is not capitalized\n        property = property.replace(VENDOR_PREFIX_REGEX, trimHyphen);\n    }\n    return property.replace(HYPHEN_REGEX, capitalize);\n};\nexports.camelCase = camelCase;\n//# sourceMappingURL=utilities.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar style_to_object_1 = __importDefault(require(\"style-to-object\"));\nvar utilities_1 = require(\"./utilities\");\n/**\n * Parses CSS inline style to JavaScript object (camelCased).\n */\nfunction StyleToJS(style, options) {\n    var output = {};\n    if (!style || typeof style !== 'string') {\n        return output;\n    }\n    (0, style_to_object_1.default)(style, function (property, value) {\n        // skip CSS comment\n        if (property && value) {\n            output[(0, utilities_1.camelCase)(property, options)] = value;\n        }\n    });\n    return output;\n}\nStyleToJS.default = StyleToJS;\nmodule.exports = StyleToJS;\n//# sourceMappingURL=index.js.map","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","/**\n * @import {Identifier, Literal, MemberExpression} from 'estree'\n * @import {Jsx, JsxDev, Options, Props} from 'hast-util-to-jsx-runtime'\n * @import {Element, Nodes, Parents, Root, Text} from 'hast'\n * @import {MdxFlowExpressionHast, MdxTextExpressionHast} from 'mdast-util-mdx-expression'\n * @import {MdxJsxFlowElementHast, MdxJsxTextElementHast} from 'mdast-util-mdx-jsx'\n * @import {MdxjsEsmHast} from 'mdast-util-mdxjs-esm'\n * @import {Position} from 'unist'\n * @import {Child, Create, Field, JsxElement, State, Style} from './types.js'\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {ok as assert} from 'devlop'\nimport {name as isIdentifierName} from 'estree-util-is-identifier-name'\nimport {whitespace} from 'hast-util-whitespace'\nimport {find, hastToReact, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport styleToJs from 'style-to-js'\nimport {pointStart} from 'unist-util-position'\nimport {VFileMessage} from 'vfile-message'\n\n// To do: next major: `Object.hasOwn`.\nconst own = {}.hasOwnProperty\n\n/** @type {Map<string, number>} */\nconst emptyMap = new Map()\n\nconst cap = /[A-Z]/g\n\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they don’t do here, so we remove all of\n// that.\n\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\n\nconst tableCellElement = new Set(['td', 'th'])\n\nconst docs = 'https://github.com/syntax-tree/hast-util-to-jsx-runtime'\n\n/**\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\n * with an automatic JSX runtime.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options} options\n *   Configuration (required).\n * @returns {JsxElement}\n *   JSX element.\n */\n\nexport function toJsxRuntime(tree, options) {\n  if (!options || options.Fragment === undefined) {\n    throw new TypeError('Expected `Fragment` in options')\n  }\n\n  const filePath = options.filePath || undefined\n  /** @type {Create} */\n  let create\n\n  if (options.development) {\n    if (typeof options.jsxDEV !== 'function') {\n      throw new TypeError(\n        'Expected `jsxDEV` in options when `development: true`'\n      )\n    }\n\n    create = developmentCreate(filePath, options.jsxDEV)\n  } else {\n    if (typeof options.jsx !== 'function') {\n      throw new TypeError('Expected `jsx` in production options')\n    }\n\n    if (typeof options.jsxs !== 'function') {\n      throw new TypeError('Expected `jsxs` in production options')\n    }\n\n    create = productionCreate(filePath, options.jsx, options.jsxs)\n  }\n\n  /** @type {State} */\n  const state = {\n    Fragment: options.Fragment,\n    ancestors: [],\n    components: options.components || {},\n    create,\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\n    evaluater: options.createEvaluater ? options.createEvaluater() : undefined,\n    filePath,\n    ignoreInvalidStyle: options.ignoreInvalidStyle || false,\n    passKeys: options.passKeys !== false,\n    passNode: options.passNode || false,\n    schema: options.space === 'svg' ? svg : html,\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false\n  }\n\n  const result = one(state, tree, undefined)\n\n  // JSX element.\n  if (result && typeof result !== 'string') {\n    return result\n  }\n\n  // Text node or something that turned into nothing.\n  return state.create(\n    tree,\n    state.Fragment,\n    {children: result || undefined},\n    undefined\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction one(state, node, key) {\n  if (node.type === 'element') {\n    return element(state, node, key)\n  }\n\n  if (node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression') {\n    return mdxExpression(state, node)\n  }\n\n  if (node.type === 'mdxJsxFlowElement' || node.type === 'mdxJsxTextElement') {\n    return mdxJsxElement(state, node, key)\n  }\n\n  if (node.type === 'mdxjsEsm') {\n    return mdxEsm(state, node)\n  }\n\n  if (node.type === 'root') {\n    return root(state, node, key)\n  }\n\n  if (node.type === 'text') {\n    return text(state, node)\n  }\n}\n\n/**\n * Handle element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction element(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.tagName.toLowerCase() === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type = findComponentFromName(state, node.tagName, false)\n  const props = createElementProps(state, node)\n  let children = createChildren(state, node)\n\n  if (tableElements.has(node.tagName)) {\n    children = children.filter(function (child) {\n      return typeof child === 'string' ? !whitespace(child) : true\n    })\n  }\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle MDX expression.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxFlowExpressionHast | MdxTextExpressionHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxExpression(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    const program = node.data.estree\n    const expression = program.body[0]\n    assert(expression.type === 'ExpressionStatement')\n\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateExpression(expression.expression)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX ESM.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxjsEsmHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxEsm(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateProgram(node.data.estree)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX JSX.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxJsxElement(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.name === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type =\n    node.name === null\n      ? state.Fragment\n      : findComponentFromName(state, node.name, true)\n  const props = createJsxElementProps(state, node)\n  const children = createChildren(state, node)\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle root.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Root} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction root(state, node, key) {\n  /** @type {Props} */\n  const props = {}\n\n  addChildren(props, createChildren(state, node))\n\n  return state.create(node, state.Fragment, props, key)\n}\n\n/**\n * Handle text.\n *\n * @param {State} _\n *   Info passed around.\n * @param {Text} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction text(_, node) {\n  return node.value\n}\n\n/**\n * Add `node` to props.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Props} props\n *   Props.\n * @param {unknown} type\n *   Type.\n * @param {Element | MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addNode(state, props, type, node) {\n  // If this is swapped out for a component:\n  if (typeof type !== 'string' && type !== state.Fragment && state.passNode) {\n    props.node = node\n  }\n}\n\n/**\n * Add children to props.\n *\n * @param {Props} props\n *   Props.\n * @param {Array<Child>} children\n *   Children.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChildren(props, children) {\n  if (children.length > 0) {\n    const value = children.length > 1 ? children : children[0]\n\n    if (value) {\n      props.children = value\n    }\n  }\n}\n\n/**\n * @param {string | undefined} _\n *   Path to file.\n * @param {Jsx} jsx\n *   Dynamic.\n * @param {Jsx} jsxs\n *   Static.\n * @returns {Create}\n *   Create a production element.\n */\nfunction productionCreate(_, jsx, jsxs) {\n  return create\n  /** @type {Create} */\n  function create(_, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const fn = isStaticChildren ? jsxs : jsx\n    return key ? fn(type, props, key) : fn(type, props)\n  }\n}\n\n/**\n * @param {string | undefined} filePath\n *   Path to file.\n * @param {JsxDev} jsxDEV\n *   Development.\n * @returns {Create}\n *   Create a development element.\n */\nfunction developmentCreate(filePath, jsxDEV) {\n  return create\n  /** @type {Create} */\n  function create(node, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const point = pointStart(node)\n    return jsxDEV(\n      type,\n      props,\n      key,\n      isStaticChildren,\n      {\n        columnNumber: point ? point.column - 1 : undefined,\n        fileName: filePath,\n        lineNumber: point ? point.line : undefined\n      },\n      undefined\n    )\n  }\n}\n\n/**\n * Create props from an element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current element.\n * @returns {Props}\n *   Props.\n */\nfunction createElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n  /** @type {string | undefined} */\n  let alignValue\n  /** @type {string} */\n  let prop\n\n  for (prop in node.properties) {\n    if (prop !== 'children' && own.call(node.properties, prop)) {\n      const result = createProperty(state, prop, node.properties[prop])\n\n      if (result) {\n        const [key, value] = result\n\n        if (\n          state.tableCellAlignToStyle &&\n          key === 'align' &&\n          typeof value === 'string' &&\n          tableCellElement.has(node.tagName)\n        ) {\n          alignValue = value\n        } else {\n          props[key] = value\n        }\n      }\n    }\n  }\n\n  if (alignValue) {\n    // Assume style is an object.\n    const style = /** @type {Style} */ (props.style || (props.style = {}))\n    style[state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'] =\n      alignValue\n  }\n\n  return props\n}\n\n/**\n * Create props from a JSX element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current JSX element.\n * @returns {Props}\n *   Props.\n */\nfunction createJsxElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n\n  for (const attribute of node.attributes) {\n    if (attribute.type === 'mdxJsxExpressionAttribute') {\n      if (attribute.data && attribute.data.estree && state.evaluater) {\n        const program = attribute.data.estree\n        const expression = program.body[0]\n        assert(expression.type === 'ExpressionStatement')\n        const objectExpression = expression.expression\n        assert(objectExpression.type === 'ObjectExpression')\n        const property = objectExpression.properties[0]\n        assert(property.type === 'SpreadElement')\n\n        Object.assign(\n          props,\n          state.evaluater.evaluateExpression(property.argument)\n        )\n      } else {\n        crashEstree(state, node.position)\n      }\n    } else {\n      // For JSX, the author is responsible of passing in the correct values.\n      const name = attribute.name\n      /** @type {unknown} */\n      let value\n\n      if (attribute.value && typeof attribute.value === 'object') {\n        if (\n          attribute.value.data &&\n          attribute.value.data.estree &&\n          state.evaluater\n        ) {\n          const program = attribute.value.data.estree\n          const expression = program.body[0]\n          assert(expression.type === 'ExpressionStatement')\n          value = state.evaluater.evaluateExpression(expression.expression)\n        } else {\n          crashEstree(state, node.position)\n        }\n      } else {\n        value = attribute.value === null ? true : attribute.value\n      }\n\n      // Assume a prop.\n      props[name] = /** @type {Props[keyof Props]} */ (value)\n    }\n  }\n\n  return props\n}\n\n/**\n * Create children.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Parents} node\n *   Current element.\n * @returns {Array<Child>}\n *   Children.\n */\nfunction createChildren(state, node) {\n  /** @type {Array<Child>} */\n  const children = []\n  let index = -1\n  /** @type {Map<string, number>} */\n  // Note: test this when Solid doesn’t want to merge my upcoming PR.\n  /* c8 ignore next */\n  const countsByName = state.passKeys ? new Map() : emptyMap\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n    /** @type {string | undefined} */\n    let key\n\n    if (state.passKeys) {\n      const name =\n        child.type === 'element'\n          ? child.tagName\n          : child.type === 'mdxJsxFlowElement' ||\n              child.type === 'mdxJsxTextElement'\n            ? child.name\n            : undefined\n\n      if (name) {\n        const count = countsByName.get(name) || 0\n        key = name + '-' + count\n        countsByName.set(name, count + 1)\n      }\n    }\n\n    const result = one(state, child, key)\n    if (result !== undefined) children.push(result)\n  }\n\n  return children\n}\n\n/**\n * Handle a property.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Field | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(state, prop, value) {\n  const info = find(state.schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  // React only accepts `style` as object.\n  if (info.property === 'style') {\n    let styleObject =\n      typeof value === 'object' ? value : parseStyle(state, String(value))\n\n    if (state.stylePropertyNameCase === 'css') {\n      styleObject = transformStylesToCssCasing(styleObject)\n    }\n\n    return ['style', styleObject]\n  }\n\n  return [\n    state.elementAttributeNameCase === 'react' && info.space\n      ? hastToReact[info.property] || info.property\n      : info.attribute,\n    value\n  ]\n}\n\n/**\n * Parse a CSS declaration to an object.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} value\n *   CSS declarations.\n * @returns {Style}\n *   Properties.\n * @throws\n *   Throws `VFileMessage` when CSS cannot be parsed.\n */\nfunction parseStyle(state, value) {\n  try {\n    return styleToJs(value, {reactCompat: true})\n  } catch (error) {\n    if (state.ignoreInvalidStyle) {\n      return {}\n    }\n\n    const cause = /** @type {Error} */ (error)\n    const message = new VFileMessage('Cannot parse `style` attribute', {\n      ancestors: state.ancestors,\n      cause,\n      ruleId: 'style',\n      source: 'hast-util-to-jsx-runtime'\n    })\n    message.file = state.filePath || undefined\n    message.url = docs + '#cannot-parse-style-attribute'\n\n    throw message\n  }\n}\n\n/**\n * Create a JSX name from a string.\n *\n * @param {State} state\n *   To do.\n * @param {string} name\n *   Name.\n * @param {boolean} allowExpression\n *   Allow member expressions and identifiers.\n * @returns {unknown}\n *   To do.\n */\nfunction findComponentFromName(state, name, allowExpression) {\n  /** @type {Identifier | Literal | MemberExpression} */\n  let result\n\n  if (!allowExpression) {\n    result = {type: 'Literal', value: name}\n  } else if (name.includes('.')) {\n    const identifiers = name.split('.')\n    let index = -1\n    /** @type {Identifier | Literal | MemberExpression | undefined} */\n    let node\n\n    while (++index < identifiers.length) {\n      /** @type {Identifier | Literal} */\n      const prop = isIdentifierName(identifiers[index])\n        ? {type: 'Identifier', name: identifiers[index]}\n        : {type: 'Literal', value: identifiers[index]}\n      node = node\n        ? {\n            type: 'MemberExpression',\n            object: node,\n            property: prop,\n            computed: Boolean(index && prop.type === 'Literal'),\n            optional: false\n          }\n        : prop\n    }\n\n    assert(node, 'always a result')\n    result = node\n  } else {\n    result =\n      isIdentifierName(name) && !/^[a-z]/.test(name)\n        ? {type: 'Identifier', name}\n        : {type: 'Literal', value: name}\n  }\n\n  // Only literals can be passed in `components` currently.\n  // No identifiers / member expressions.\n  if (result.type === 'Literal') {\n    const name = /** @type {string | number} */ (result.value)\n    return own.call(state.components, name) ? state.components[name] : name\n  }\n\n  // Assume component.\n  if (state.evaluater) {\n    return state.evaluater.evaluateExpression(result)\n  }\n\n  crashEstree(state)\n}\n\n/**\n * @param {State} state\n * @param {Position | undefined} [place]\n * @returns {never}\n */\nfunction crashEstree(state, place) {\n  const message = new VFileMessage(\n    'Cannot handle MDX estrees without `createEvaluater`',\n    {\n      ancestors: state.ancestors,\n      place,\n      ruleId: 'mdx-estree',\n      source: 'hast-util-to-jsx-runtime'\n    }\n  )\n  message.file = state.filePath || undefined\n  message.url = docs + '#cannot-handle-mdx-estrees-without-createevaluater'\n\n  throw message\n}\n\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */\nfunction transformStylesToCssCasing(domCasing) {\n  /** @type {Style} */\n  const cssCasing = {}\n  /** @type {string} */\n  let from\n\n  for (from in domCasing) {\n    if (own.call(domCasing, from)) {\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\n    }\n  }\n\n  return cssCasing\n}\n\n/**\n * Transform a DOM casing style field to a CSS casing style field.\n *\n * @param {string} from\n * @returns {string}\n */\nfunction transformStyleToCssCasing(from) {\n  let to = from.replace(cap, toDash)\n  // Handle `ms-xxx` -> `-ms-xxx`.\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\n  return to\n}\n\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */\nfunction toDash($0) {\n  return '-' + $0.toLowerCase()\n}\n","/**\n * HTML URL properties.\n *\n * Each key is a property name and each value is a list of tag names it applies\n * to or `null` if it applies to all elements.\n *\n * @type {Record<string, Array<string> | null>}\n */\nexport const urlAttributes = {\n  action: ['form'],\n  cite: ['blockquote', 'del', 'ins', 'q'],\n  data: ['object'],\n  formAction: ['button', 'input'],\n  href: ['a', 'area', 'base', 'link'],\n  icon: ['menuitem'],\n  itemId: null,\n  manifest: ['html'],\n  ping: ['a', 'area'],\n  poster: ['video'],\n  src: [\n    'audio',\n    'embed',\n    'iframe',\n    'img',\n    'input',\n    'script',\n    'source',\n    'track',\n    'video'\n  ]\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string | false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const character = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  if (\n    // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n    // yield `null`.\n    character.charCodeAt(character.length - 1) === 59 /* `;` */ &&\n    value !== 'semi'\n  ) {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return character === characterReference ? false : character\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length;\n  let chunkStart = 0;\n  /** @type {Array<unknown>} */\n  let parameters;\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start;\n  } else {\n    start = start > end ? end : start;\n  }\n  remove = remove > 0 ? remove : 0;\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items);\n    parameters.unshift(start, remove);\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters);\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove);\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000);\n      parameters.unshift(start, 0);\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters);\n      chunkStart += 10000;\n      start += 10000;\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items);\n    return list;\n  }\n  return items;\n}","/**\n * @import {\n *   Extension,\n *   Handles,\n *   HtmlExtension,\n *   NormalizedExtension\n * } from 'micromark-util-types'\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {ReadonlyArray<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n *   List of constructs to merge into.\n * @param {Array<unknown>} list\n *   List of constructs to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {ReadonlyArray<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   Single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55_295 && code < 57_344 ||\n  // Noncharacters.\n  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */\n  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */\n  // Out of range\n  code > 1_114_111) {\n    return \"\\uFFFD\";\n  }\n  return String.fromCodePoint(code);\n}","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return value\n  // Collapse markdown whitespace.\n  .replace(/[\\t\\n\\r ]+/g, \" \")\n  // Trim.\n  .replace(/^ | $/g, '')\n  // Some characters are considered “uppercase”, but if their lowercase\n  // counterpart is uppercased will result in a different uppercase\n  // character.\n  // Hence, to get that form, we perform both lower- and uppercase.\n  // Upper case makes sure keys will not interact with default prototypal\n  // methods: no method is uppercase.\n  .toLowerCase().toUpperCase();\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","import { asciiAlphanumeric } from 'micromark-util-character';\nimport { encode } from 'micromark-util-encode';\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''));\n  if (!protocol) {\n    return value;\n  }\n  const colon = value.indexOf(':');\n  const questionMark = value.indexOf('?');\n  const numberSign = value.indexOf('#');\n  const slash = value.indexOf('/');\n  if (\n  // If there is no protocol, it’s relative.\n  colon < 0 ||\n  // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n  slash > -1 && colon > slash || questionMark > -1 && colon > questionMark || numberSign > -1 && colon > numberSign ||\n  // It is a protocol, it should be allowed.\n  protocol.test(value.slice(0, colon))) {\n    return value;\n  }\n  return '';\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = [];\n  let index = -1;\n  let start = 0;\n  let skip = 0;\n  while (++index < value.length) {\n    const code = value.charCodeAt(index);\n    /** @type {string} */\n    let replace = '';\n\n    // A correct percent encoded value.\n    if (code === 37 && asciiAlphanumeric(value.charCodeAt(index + 1)) && asciiAlphanumeric(value.charCodeAt(index + 2))) {\n      skip = 2;\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code);\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1);\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next);\n        skip = 1;\n      }\n      // Lone surrogate.\n      else {\n        replace = \"\\uFFFD\";\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code);\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace));\n      start = index + skip + 1;\n      replace = '';\n    }\n    if (skip) {\n      index += skip;\n      skip = 0;\n    }\n  }\n  return result.join('') + value.slice(start);\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { markdownSpace } from 'micromark-util-character';\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type);\n      return prefix(code);\n    }\n    return ok(code);\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code);\n      return prefix;\n    }\n    effects.exit(type);\n    return ok(code);\n  }\n}","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Initializer}\n *   Content.\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);\n  /** @type {Token} */\n  let previous;\n  return contentStart;\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, contentStart, \"linePrefix\");\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter(\"paragraph\");\n    return lineStart(code);\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter(\"chunkText\", {\n      contentType: \"text\",\n      previous\n    });\n    if (previous) {\n      previous.next = token;\n    }\n    previous = token;\n    return data(code);\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit(\"chunkText\");\n      effects.exit(\"paragraph\");\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      effects.exit(\"chunkText\");\n      return lineStart;\n    }\n\n    // Data.\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @import {\n *   Construct,\n *   ContainerState,\n *   InitialConstruct,\n *   Initializer,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n *   Construct and its state.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n};\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n};\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeDocument(effects) {\n  const self = this;\n  /** @type {Array<StackItem>} */\n  const stack = [];\n  let continued = 0;\n  /** @type {TokenizeContext | undefined} */\n  let childFlow;\n  /** @type {Token | undefined} */\n  let childToken;\n  /** @type {number} */\n  let lineStartOffset;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued];\n      self.containerState = item[1];\n      return effects.attempt(item[0].continuation, documentContinue, checkNewContainers)(code);\n    }\n\n    // Done.\n    return checkNewContainers(code);\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++;\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined;\n      if (childFlow) {\n        closeFlow();\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          point = self.events[indexBeforeFlow][1].end;\n          break;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      let index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = {\n          ...point\n        };\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n      return checkNewContainers(code);\n    }\n    return start(code);\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code);\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code);\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack);\n    }\n\n    // Check if there is a new container.\n    self.containerState = {};\n    return effects.check(containerConstruct, thereIsANewContainer, thereIsNoNewContainer)(code);\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow();\n    exitContainers(continued);\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length;\n    lineStartOffset = self.now().offset;\n    return flowStart(code);\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {};\n    return effects.attempt(containerConstruct, containerContinue, flowStart)(code);\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++;\n    stack.push([self.currentConstruct, self.containerState]);\n    // Try another.\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow();\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    childFlow = childFlow || self.parser.flow(self.now());\n    effects.enter(\"chunkFlow\", {\n      _tokenizer: childFlow,\n      contentType: \"flow\",\n      previous: childToken\n    });\n    return flowContinue(code);\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit(\"chunkFlow\"), true);\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      writeToChild(effects.exit(\"chunkFlow\"));\n      // Get ready for the next line.\n      continued = 0;\n      self.interrupt = undefined;\n      return start;\n    }\n    effects.consume(code);\n    return flowContinue;\n  }\n\n  /**\n   * @param {Token} token\n   *   Token.\n   * @param {boolean | undefined} [endOfFile]\n   *   Whether the token is at the end of the file (default: `false`).\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function writeToChild(token, endOfFile) {\n    const stream = self.sliceStream(token);\n    if (endOfFile) stream.push(null);\n    token.previous = childToken;\n    if (childToken) childToken.next = token;\n    childToken = token;\n    childFlow.defineSkip(token.start);\n    childFlow.write(stream);\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length;\n      while (index--) {\n        if (\n        // The token starts before the line ending…\n        childFlow.events[index][1].start.offset < lineStartOffset && (\n        // …and either is not ended yet…\n        !childFlow.events[index][1].end ||\n        // …or ends after it.\n        childFlow.events[index][1].end.offset > lineStartOffset)) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return;\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {boolean | undefined} */\n      let seen;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end;\n            break;\n          }\n          seen = true;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = {\n          ...point\n        };\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n    }\n  }\n\n  /**\n   * @param {number} size\n   *   Size.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exitContainers(size) {\n    let index = stack.length;\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index];\n      self.containerState = entry[1];\n      entry[0].exit.call(self, effects);\n    }\n    stack.length = size;\n  }\n  function closeFlow() {\n    childFlow.write([null]);\n    childToken = undefined;\n    childFlow = undefined;\n    self.containerState._closeFlow = undefined;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n *   Tokenizer.\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(effects, effects.attempt(this.parser.constructs.document, ok, nok), \"linePrefix\", this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4);\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\nimport { markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n    return 1;\n  }\n  if (unicodePunctuation(code)) {\n    return 2;\n  }\n}","/**\n * @import {Event, Resolver, TokenizeContext} from 'micromark-util-types'\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {ReadonlyArray<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   Event,\n *   Point,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { push, splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  resolveAll: resolveAllAttention,\n  tokenize: tokenizeAttention\n};\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1;\n  /** @type {number} */\n  let open;\n  /** @type {Token} */\n  let group;\n  /** @type {Token} */\n  let text;\n  /** @type {Token} */\n  let openingSequence;\n  /** @type {Token} */\n  let closingSequence;\n  /** @type {number} */\n  let use;\n  /** @type {Array<Event>} */\n  let nextEvents;\n  /** @type {number} */\n  let offset;\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (events[index][0] === 'enter' && events[index][1].type === 'attentionSequence' && events[index][1]._close) {\n      open = index;\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (events[open][0] === 'exit' && events[open][1].type === 'attentionSequence' && events[open][1]._open &&\n        // If the markers are the same:\n        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {\n            continue;\n          }\n\n          // Number of markers to use from the sequence.\n          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;\n          const start = {\n            ...events[open][1].end\n          };\n          const end = {\n            ...events[index][1].start\n          };\n          movePoint(start, -use);\n          movePoint(end, use);\n          openingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start,\n            end: {\n              ...events[open][1].end\n            }\n          };\n          closingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start: {\n              ...events[index][1].start\n            },\n            end\n          };\n          text = {\n            type: use > 1 ? \"strongText\" : \"emphasisText\",\n            start: {\n              ...events[open][1].end\n            },\n            end: {\n              ...events[index][1].start\n            }\n          };\n          group = {\n            type: use > 1 ? \"strong\" : \"emphasis\",\n            start: {\n              ...openingSequence.start\n            },\n            end: {\n              ...closingSequence.end\n            }\n          };\n          events[open][1].end = {\n            ...openingSequence.start\n          };\n          events[index][1].start = {\n            ...closingSequence.end\n          };\n          nextEvents = [];\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [['enter', events[open][1], context], ['exit', events[open][1], context]]);\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [['enter', group, context], ['enter', openingSequence, context], ['exit', openingSequence, context], ['enter', text, context]]);\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));\n\n          // Closing.\n          nextEvents = push(nextEvents, [['exit', text, context], ['enter', closingSequence, context], ['exit', closingSequence, context], ['exit', group, context]]);\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2;\n            nextEvents = push(nextEvents, [['enter', events[index][1], context], ['exit', events[index][1], context]]);\n          } else {\n            offset = 0;\n          }\n          splice(events, open - 1, index - open + 3, nextEvents);\n          index = open + nextEvents.length - offset - 2;\n          break;\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1;\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data';\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null;\n  const previous = this.previous;\n  const before = classifyCharacter(previous);\n\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code;\n    effects.enter('attentionSequence');\n    return inside(code);\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    const token = effects.exit('attentionSequence');\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code);\n\n    // Always populated by defaults.\n\n    const open = !after || after === 2 && before || attentionMarkers.includes(code);\n    const close = !before || before === 2 && after || attentionMarkers.includes(previous);\n    token._open = Boolean(marker === 42 ? open : open && (before || !close));\n    token._close = Boolean(marker === 42 ? close : close && (after || !open));\n    return ok(code);\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n *   Point.\n * @param {number} offset\n *   Amount to move.\n * @returns {undefined}\n *   Nothing.\n */\nfunction movePoint(point, offset) {\n  point.column += offset;\n  point.offset += offset;\n  point._bufferIndex += offset;\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, asciiAtext, asciiControl } from 'micromark-util-character';\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"autolink\");\n    effects.enter(\"autolinkMarker\");\n    effects.consume(code);\n    effects.exit(\"autolinkMarker\");\n    effects.enter(\"autolinkProtocol\");\n    return open;\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n    if (code === 64) {\n      return nok(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1;\n      return schemeInsideOrEmailAtext(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code);\n      size = 0;\n      return urlInside;\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n    size = 0;\n    return emailAtext(code);\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit(\"autolinkProtocol\");\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return urlInside;\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code);\n      return emailAtSignOrDot;\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit(\"autolinkProtocol\").type = \"autolinkEmail\";\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n    return emailValue(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel;\n      effects.consume(code);\n      return next;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  partial: true,\n  tokenize: tokenizeBlankLine\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blockQuote = {\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit,\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState;\n      if (!state.open) {\n        effects.enter(\"blockQuote\", {\n          _container: true\n        });\n        state.open = true;\n      }\n      effects.enter(\"blockQuotePrefix\");\n      effects.enter(\"blockQuoteMarker\");\n      effects.consume(code);\n      effects.exit(\"blockQuoteMarker\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"blockQuotePrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"blockQuotePrefixWhitespace\");\n      effects.exit(\"blockQuotePrefix\");\n      return ok;\n    }\n    effects.exit(\"blockQuotePrefix\");\n    return ok(code);\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this;\n  return contStart;\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(effects, contBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return contBefore(code);\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code);\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit(\"blockQuote\");\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiPunctuation } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterEscape\");\n    effects.enter(\"escapeMarker\");\n    effects.consume(code);\n    effects.exit(\"escapeMarker\");\n    return inside;\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter(\"characterEscapeValue\");\n      effects.consume(code);\n      effects.exit(\"characterEscapeValue\");\n      effects.exit(\"characterEscape\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { asciiAlphanumeric, asciiDigit, asciiHexDigit } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  /** @type {number} */\n  let max;\n  /** @type {(code: Code) => boolean} */\n  let test;\n  return start;\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterReference\");\n    effects.enter(\"characterReferenceMarker\");\n    effects.consume(code);\n    effects.exit(\"characterReferenceMarker\");\n    return open;\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter(\"characterReferenceMarkerNumeric\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerNumeric\");\n      return numeric;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 31;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter(\"characterReferenceMarkerHexadecimal\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerHexadecimal\");\n      effects.enter(\"characterReferenceValue\");\n      max = 6;\n      test = asciiHexDigit;\n      return value;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 7;\n    test = asciiDigit;\n    return value(code);\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit(\"characterReferenceValue\");\n      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter(\"characterReferenceMarker\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarker\");\n      effects.exit(\"characterReference\");\n      return ok;\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuation\n};\n\n/** @type {Construct} */\nexport const codeFenced = {\n  concrete: true,\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this;\n  /** @type {Construct} */\n  const closeStart = {\n    partial: true,\n    tokenize: tokenizeCloseStart\n  };\n  let initialPrefix = 0;\n  let sizeOpen = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code);\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1];\n    initialPrefix = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n    marker = code;\n    effects.enter(\"codeFenced\");\n    effects.enter(\"codeFencedFence\");\n    effects.enter(\"codeFencedFenceSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++;\n      effects.consume(code);\n      return sequenceOpen;\n    }\n    if (sizeOpen < 3) {\n      return nok(code);\n    }\n    effects.exit(\"codeFencedFenceSequence\");\n    return markdownSpace(code) ? factorySpace(effects, infoBefore, \"whitespace\")(code) : infoBefore(code);\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFencedFence\");\n      return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFencedFenceInfo\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return info(code);\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return infoBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return factorySpace(effects, metaBefore, \"whitespace\")(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return info;\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code);\n    }\n    effects.enter(\"codeFencedFenceMeta\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return meta(code);\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceMeta\");\n      return infoBefore(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return meta;\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code);\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return contentStart;\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code) ? factorySpace(effects, beforeContentChunk, \"linePrefix\", initialPrefix + 1)(code) : beforeContentChunk(code);\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return contentChunk(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return beforeContentChunk(code);\n    }\n    effects.consume(code);\n    return contentChunk;\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit(\"codeFenced\");\n    return ok(code);\n  }\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0;\n    return startBefore;\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return start;\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter(\"codeFencedFence\");\n      return markdownSpace(code) ? factorySpace(effects, beforeSequenceClose, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : beforeSequenceClose(code);\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter(\"codeFencedFenceSequence\");\n        return sequenceClose(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++;\n        effects.consume(code);\n        return sequenceClose;\n      }\n      if (size >= sizeOpen) {\n        effects.exit(\"codeFencedFenceSequence\");\n        return markdownSpace(code) ? factorySpace(effects, sequenceCloseAfter, \"whitespace\")(code) : sequenceCloseAfter(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit(\"codeFencedFence\");\n        return ok(code);\n      }\n      return nok(code);\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineStart;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n};\n\n/** @type {Construct} */\nconst furtherStart = {\n  partial: true,\n  tokenize: tokenizeFurtherStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter(\"codeIndented\");\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code);\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return inside(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return inside;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(\"codeIndented\");\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this;\n  return furtherStart;\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return furtherStart;\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : markdownLineEnding(code) ? furtherStart(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Previous,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  previous,\n  resolve: resolveCodeText,\n  tokenize: tokenizeCodeText\n};\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4;\n  let headEnterIndex = 3;\n  /** @type {number} */\n  let index;\n  /** @type {number | undefined} */\n  let enter;\n\n  // If we start and end with an EOL or a space.\n  if ((events[headEnterIndex][1].type === \"lineEnding\" || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === \"lineEnding\" || events[tailExitIndex][1].type === 'space')) {\n    index = headEnterIndex;\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === \"codeTextData\") {\n        // Then we have padding.\n        events[headEnterIndex][1].type = \"codeTextPadding\";\n        events[tailExitIndex][1].type = \"codeTextPadding\";\n        headEnterIndex += 2;\n        tailExitIndex -= 2;\n        break;\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1;\n  tailExitIndex++;\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== \"lineEnding\") {\n        enter = index;\n      }\n    } else if (index === tailExitIndex || events[index][1].type === \"lineEnding\") {\n      events[enter][1].type = \"codeTextData\";\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end;\n        events.splice(enter + 2, index - enter - 2);\n        tailExitIndex -= index - enter - 2;\n        index = enter + 2;\n      }\n      enter = undefined;\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return code !== 96 || this.events[this.events.length - 1][1].type === \"characterEscape\";\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this;\n  let sizeOpen = 0;\n  /** @type {number} */\n  let size;\n  /** @type {Token} */\n  let token;\n  return start;\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"codeText\");\n    effects.enter(\"codeTextSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n    effects.exit(\"codeTextSequence\");\n    return between(code);\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code);\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space');\n      effects.consume(code);\n      effects.exit('space');\n      return between;\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter(\"codeTextSequence\");\n      size = 0;\n      return sequenceClose(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return between;\n    }\n\n    // Data.\n    effects.enter(\"codeTextData\");\n    return data(code);\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {\n      effects.exit(\"codeTextData\");\n      return between(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code);\n      size++;\n      return sequenceClose;\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit(\"codeTextSequence\");\n      effects.exit(\"codeText\");\n      return ok(code);\n    }\n\n    // More or less accents: mark as data.\n    token.type = \"codeTextData\";\n    return data(code);\n  }\n}","/**\n * Some of the internal operations of micromark do lots of editing\n * operations on very large arrays. This runs into problems with two\n * properties of most circa-2020 JavaScript interpreters:\n *\n *  - Array-length modifications at the high end of an array (push/pop) are\n *    expected to be common and are implemented in (amortized) time\n *    proportional to the number of elements added or removed, whereas\n *    other operations (shift/unshift and splice) are much less efficient.\n *  - Function arguments are passed on the stack, so adding tens of thousands\n *    of elements to an array with `arr.push(...newElements)` will frequently\n *    cause stack overflows. (see <https://stackoverflow.com/questions/22123769/rangeerror-maximum-call-stack-size-exceeded-why>)\n *\n * SpliceBuffers are an implementation of gap buffers, which are a\n * generalization of the \"queue made of two stacks\" idea. The splice buffer\n * maintains a cursor, and moving the cursor has cost proportional to the\n * distance the cursor moves, but inserting, deleting, or splicing in\n * new information at the cursor is as efficient as the push/pop operation.\n * This allows for an efficient sequence of splices (or pushes, pops, shifts,\n * or unshifts) as long such edits happen at the same part of the array or\n * generally sweep through the array from the beginning to the end.\n *\n * The interface for splice buffers also supports large numbers of inputs by\n * passing a single array argument rather passing multiple arguments on the\n * function call stack.\n *\n * @template T\n *   Item type.\n */\nexport class SpliceBuffer {\n  /**\n   * @param {ReadonlyArray<T> | null | undefined} [initial]\n   *   Initial items (optional).\n   * @returns\n   *   Splice buffer.\n   */\n  constructor(initial) {\n    /** @type {Array<T>} */\n    this.left = initial ? [...initial] : [];\n    /** @type {Array<T>} */\n    this.right = [];\n  }\n\n  /**\n   * Array access;\n   * does not move the cursor.\n   *\n   * @param {number} index\n   *   Index.\n   * @return {T}\n   *   Item.\n   */\n  get(index) {\n    if (index < 0 || index >= this.left.length + this.right.length) {\n      throw new RangeError('Cannot access index `' + index + '` in a splice buffer of size `' + (this.left.length + this.right.length) + '`');\n    }\n    if (index < this.left.length) return this.left[index];\n    return this.right[this.right.length - index + this.left.length - 1];\n  }\n\n  /**\n   * The length of the splice buffer, one greater than the largest index in the\n   * array.\n   */\n  get length() {\n    return this.left.length + this.right.length;\n  }\n\n  /**\n   * Remove and return `list[0]`;\n   * moves the cursor to `0`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  shift() {\n    this.setCursor(0);\n    return this.right.pop();\n  }\n\n  /**\n   * Slice the buffer to get an array;\n   * does not move the cursor.\n   *\n   * @param {number} start\n   *   Start.\n   * @param {number | null | undefined} [end]\n   *   End (optional).\n   * @returns {Array<T>}\n   *   Array of items.\n   */\n  slice(start, end) {\n    /** @type {number} */\n    const stop = end === null || end === undefined ? Number.POSITIVE_INFINITY : end;\n    if (stop < this.left.length) {\n      return this.left.slice(start, stop);\n    }\n    if (start > this.left.length) {\n      return this.right.slice(this.right.length - stop + this.left.length, this.right.length - start + this.left.length).reverse();\n    }\n    return this.left.slice(start).concat(this.right.slice(this.right.length - stop + this.left.length).reverse());\n  }\n\n  /**\n   * Mimics the behavior of Array.prototype.splice() except for the change of\n   * interface necessary to avoid segfaults when patching in very large arrays.\n   *\n   * This operation moves cursor is moved to `start` and results in the cursor\n   * placed after any inserted items.\n   *\n   * @param {number} start\n   *   Start;\n   *   zero-based index at which to start changing the array;\n   *   negative numbers count backwards from the end of the array and values\n   *   that are out-of bounds are clamped to the appropriate end of the array.\n   * @param {number | null | undefined} [deleteCount=0]\n   *   Delete count (default: `0`);\n   *   maximum number of elements to delete, starting from start.\n   * @param {Array<T> | null | undefined} [items=[]]\n   *   Items to include in place of the deleted items (default: `[]`).\n   * @return {Array<T>}\n   *   Any removed items.\n   */\n  splice(start, deleteCount, items) {\n    /** @type {number} */\n    const count = deleteCount || 0;\n    this.setCursor(Math.trunc(start));\n    const removed = this.right.splice(this.right.length - count, Number.POSITIVE_INFINITY);\n    if (items) chunkedPush(this.left, items);\n    return removed.reverse();\n  }\n\n  /**\n   * Remove and return the highest-numbered item in the array, so\n   * `list[list.length - 1]`;\n   * Moves the cursor to `length`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  pop() {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    return this.left.pop();\n  }\n\n  /**\n   * Inserts a single item to the high-numbered side of the array;\n   * moves the cursor to `length`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  push(item) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    this.left.push(item);\n  }\n\n  /**\n   * Inserts many items to the high-numbered side of the array.\n   * Moves the cursor to `length`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  pushMany(items) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    chunkedPush(this.left, items);\n  }\n\n  /**\n   * Inserts a single item to the low-numbered side of the array;\n   * Moves the cursor to `0`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshift(item) {\n    this.setCursor(0);\n    this.right.push(item);\n  }\n\n  /**\n   * Inserts many items to the low-numbered side of the array;\n   * moves the cursor to `0`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshiftMany(items) {\n    this.setCursor(0);\n    chunkedPush(this.right, items.reverse());\n  }\n\n  /**\n   * Move the cursor to a specific position in the array. Requires\n   * time proportional to the distance moved.\n   *\n   * If `n < 0`, the cursor will end up at the beginning.\n   * If `n > length`, the cursor will end up at the end.\n   *\n   * @param {number} n\n   *   Position.\n   * @return {undefined}\n   *   Nothing.\n   */\n  setCursor(n) {\n    if (n === this.left.length || n > this.left.length && this.right.length === 0 || n < 0 && this.left.length === 0) return;\n    if (n < this.left.length) {\n      // Move cursor to the this.left\n      const removed = this.left.splice(n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.right, removed.reverse());\n    } else {\n      // Move cursor to the this.right\n      const removed = this.right.splice(this.left.length + this.right.length - n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.left, removed.reverse());\n    }\n  }\n}\n\n/**\n * Avoid stack overflow by pushing items onto the stack in segments\n *\n * @template T\n *   Item type.\n * @param {Array<T>} list\n *   List to inject into.\n * @param {ReadonlyArray<T>} right\n *   Items to inject.\n * @return {undefined}\n *   Nothing.\n */\nfunction chunkedPush(list, right) {\n  /** @type {number} */\n  let chunkStart = 0;\n  if (right.length < 10000) {\n    list.push(...right);\n  } else {\n    while (chunkStart < right.length) {\n      list.push(...right.slice(chunkStart, chunkStart + 10000));\n      chunkStart += 10000;\n    }\n  }\n}","/**\n * @import {Chunk, Event, Token} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { SpliceBuffer } from './lib/splice-buffer.js';\n\n// Hidden API exposed for testing.\nexport { SpliceBuffer } from './lib/splice-buffer.js';\n\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} eventsArray\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\n// eslint-disable-next-line complexity\nexport function subtokenize(eventsArray) {\n  /** @type {Record<string, number>} */\n  const jumps = {};\n  let index = -1;\n  /** @type {Event} */\n  let event;\n  /** @type {number | undefined} */\n  let lineIndex;\n  /** @type {number} */\n  let otherIndex;\n  /** @type {Event} */\n  let otherEvent;\n  /** @type {Array<Event>} */\n  let parameters;\n  /** @type {Array<Event>} */\n  let subevents;\n  /** @type {boolean | undefined} */\n  let more;\n  const events = new SpliceBuffer(eventsArray);\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index];\n    }\n    event = events.get(index);\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (index && event[1].type === \"chunkFlow\" && events.get(index - 1)[1].type === \"listItemPrefix\") {\n      subevents = event[1]._tokenizer.events;\n      otherIndex = 0;\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"lineEndingBlank\") {\n        otherIndex += 2;\n      }\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"content\") {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === \"content\") {\n            break;\n          }\n          if (subevents[otherIndex][1].type === \"chunkText\") {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n            otherIndex++;\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index));\n        index = jumps[index];\n        more = true;\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index;\n      lineIndex = undefined;\n      while (otherIndex--) {\n        otherEvent = events.get(otherIndex);\n        if (otherEvent[1].type === \"lineEnding\" || otherEvent[1].type === \"lineEndingBlank\") {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events.get(lineIndex)[1].type = \"lineEndingBlank\";\n            }\n            otherEvent[1].type = \"lineEnding\";\n            lineIndex = otherIndex;\n          }\n        } else if (otherEvent[1].type === \"linePrefix\" || otherEvent[1].type === \"listItemIndent\") {\n          // Move past.\n        } else {\n          break;\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = {\n          ...events.get(lineIndex)[1].start\n        };\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index);\n        parameters.unshift(event);\n        events.splice(lineIndex, index - lineIndex + 1, parameters);\n      }\n    }\n  }\n\n  // The changes to the `events` buffer must be copied back into the eventsArray\n  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));\n  return !more;\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {SpliceBuffer<Event>} events\n *   Events.\n * @param {number} eventIndex\n *   Index.\n * @returns {Record<string, number>}\n *   Gaps.\n */\nfunction subcontent(events, eventIndex) {\n  const token = events.get(eventIndex)[1];\n  const context = events.get(eventIndex)[2];\n  let startPosition = eventIndex - 1;\n  /** @type {Array<number>} */\n  const startPositions = [];\n  let tokenizer = token._tokenizer;\n  if (!tokenizer) {\n    tokenizer = context.parser[token.contentType](token.start);\n    if (token._contentTypeTextTrailing) {\n      tokenizer._contentTypeTextTrailing = true;\n    }\n  }\n  const childEvents = tokenizer.events;\n  /** @type {Array<[number, number]>} */\n  const jumps = [];\n  /** @type {Record<string, number>} */\n  const gaps = {};\n  /** @type {Array<Chunk>} */\n  let stream;\n  /** @type {Token | undefined} */\n  let previous;\n  let index = -1;\n  /** @type {Token | undefined} */\n  let current = token;\n  let adjust = 0;\n  let start = 0;\n  const breaks = [start];\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events.get(++startPosition)[1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition);\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current);\n      if (!current.next) {\n        stream.push(null);\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start);\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true;\n      }\n      tokenizer.write(stream);\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined;\n      }\n    }\n\n    // Unravel the next token.\n    previous = current;\n    current = current.next;\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token;\n  while (++index < childEvents.length) {\n    if (\n    // Find a void token that includes a break.\n    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\n      start = index + 1;\n      breaks.push(start);\n      // Help GC.\n      current._tokenizer = undefined;\n      current.previous = undefined;\n      current = current.next;\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = [];\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined;\n    current.previous = undefined;\n  } else {\n    breaks.pop();\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length;\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1]);\n    const start = startPositions.pop();\n    jumps.push([start, start + slice.length - 1]);\n    events.splice(start, 2, slice);\n  }\n  jumps.reverse();\n  index = -1;\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\n    adjust += jumps[index][1] - jumps[index][0] - 1;\n  }\n  return gaps;\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { subtokenize } from 'micromark-util-subtokenize';\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  resolve: resolveContent,\n  tokenize: tokenizeContent\n};\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  partial: true,\n  tokenize: tokenizeContinuation\n};\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous;\n  return chunkStart;\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter(\"content\");\n    previous = effects.enter(\"chunkContent\", {\n      contentType: \"content\"\n    });\n    return chunkInside(code);\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code);\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\n    }\n\n    // Data.\n    effects.consume(code);\n    return chunkInside;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit(\"chunkContent\");\n    effects.exit(\"content\");\n    return ok(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code);\n    effects.exit(\"chunkContent\");\n    previous.next = effects.enter(\"chunkContent\", {\n      contentType: \"content\",\n      previous\n    });\n    previous = previous.next;\n    return chunkInside;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this;\n  return startLookahead;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit(\"chunkContent\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, prefixed, \"linePrefix\");\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1];\n    if (!self.parser.constructs.disable.null.includes('codeIndented') && tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4) {\n      return ok(code);\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n  }\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { asciiControl, markdownLineEndingOrSpace, markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factoryDestination(effects, ok, nok, type, literalType, literalMarkerType, rawType, stringType, max) {\n  const limit = max || Number.POSITIVE_INFINITY;\n  let balance = 0;\n  return start;\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type);\n      effects.enter(literalType);\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      return enclosedBefore;\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.enter(type);\n    effects.enter(rawType);\n    effects.enter(stringType);\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return raw(code);\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      effects.exit(literalType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return enclosed(code);\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit(\"chunkString\");\n      effects.exit(stringType);\n      return enclosedBefore(code);\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? enclosedEscape : enclosed;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code);\n      return enclosed;\n    }\n    return enclosed(code);\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (!balance && (code === null || code === 41 || markdownLineEndingOrSpace(code))) {\n      effects.exit(\"chunkString\");\n      effects.exit(stringType);\n      effects.exit(rawType);\n      effects.exit(type);\n      return ok(code);\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code);\n      balance++;\n      return raw;\n    }\n    if (code === 41) {\n      effects.consume(code);\n      balance--;\n      return raw;\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? rawEscape : raw;\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code);\n      return raw;\n    }\n    return raw(code);\n  }\n}","/**\n * @import {\n *   Effects,\n *   State,\n *   TokenizeContext,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this;\n  let size = 0;\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type);\n    effects.enter(markerType);\n    effects.consume(code);\n    effects.exit(markerType);\n    effects.enter(stringType);\n    return atBreak;\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (size > 999 || code === null || code === 91 || code === 93 && !seen ||\n    // To do: remove in the future once we’ve switched from\n    // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n    // which doesn’t need this.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    code === 94 && !size && '_hiddenFootnoteSupport' in self.parser.constructs) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit(stringType);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return atBreak;\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return labelInside(code);\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (code === null || code === 91 || code === 93 || markdownLineEnding(code) || size++ > 999) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    if (!seen) seen = !markdownSpace(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Effects,\n *   State,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      marker = code === 40 ? 41 : code;\n      return begin;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    return atBreak(code);\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType);\n      return begin(marker);\n    }\n    if (code === null) {\n      return nok(code);\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return factorySpace(effects, atBreak, \"linePrefix\");\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return inside(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? escape : inside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code);\n      return inside;\n    }\n    return inside(code);\n  }\n}","/**\n * @import {Effects, State} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      seen = true;\n      return start;\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, start, seen ? \"linePrefix\" : \"lineSuffix\")(code);\n    }\n    return ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factorySpace } from 'micromark-factory-space';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n};\n\n/** @type {Construct} */\nconst titleBefore = {\n  partial: true,\n  tokenize: tokenizeTitleBefore\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this;\n  /** @type {string} */\n  let identifier;\n  return start;\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter(\"definition\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(self, effects, labelAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionLabel\", \"definitionLabelMarker\", \"definitionLabelString\")(code);\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n    if (code === 58) {\n      effects.enter(\"definitionMarker\");\n      effects.consume(code);\n      effects.exit(\"definitionMarker\");\n      return markerAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, destinationBefore)(code) : destinationBefore(code);\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(effects, destinationAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionDestination\", \"definitionDestinationLiteral\", \"definitionDestinationLiteralMarker\", \"definitionDestinationRaw\", \"definitionDestinationString\")(code);\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code);\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code) ? factorySpace(effects, afterWhitespace, \"whitespace\")(code) : afterWhitespace(code);\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"definition\");\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier);\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore;\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, beforeMarker)(code) : nok(code);\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(effects, titleAfter, nok, \"definitionTitle\", \"definitionTitleMarker\", \"definitionTitleString\")(code);\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code) ? factorySpace(effects, titleAfterOptionalWhitespace, \"whitespace\")(code) : titleAfterOptionalWhitespace(code);\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"hardBreakEscape\");\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit(\"hardBreakEscape\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  resolve: resolveHeadingAtx,\n  tokenize: tokenizeHeadingAtx\n};\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2;\n  let contentStart = 3;\n  /** @type {Token} */\n  let content;\n  /** @type {Token} */\n  let text;\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === \"whitespace\") {\n    contentStart += 2;\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === \"whitespace\") {\n    contentEnd -= 2;\n  }\n  if (events[contentEnd][1].type === \"atxHeadingSequence\" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === \"whitespace\")) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: \"atxHeadingText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    };\n    text = {\n      type: \"chunkText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: \"text\"\n    };\n    splice(events, contentStart, contentEnd - contentStart + 1, [['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]]);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter(\"atxHeading\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"atxHeadingSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code);\n      return sequenceOpen;\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingSequence\");\n      return atBreak(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter(\"atxHeadingSequence\");\n      return sequenceFurther(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"atxHeading\");\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, \"whitespace\")(code);\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter(\"atxHeadingText\");\n    return data(code);\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code);\n      return sequenceFurther;\n    }\n    effects.exit(\"atxHeadingSequence\");\n    return atBreak(code);\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingText\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { htmlBlockNames, htmlRawNames } from 'micromark-util-html-tag-name';\nimport { blankLine } from './blank-line.js';\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  concrete: true,\n  name: 'htmlFlow',\n  resolveTo: resolveToHtmlFlow,\n  tokenize: tokenizeHtmlFlow\n};\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  partial: true,\n  tokenize: tokenizeBlankLineBefore\n};\nconst nonLazyContinuationStart = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuationStart\n};\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length;\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === \"htmlFlow\") {\n      break;\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === \"linePrefix\") {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start;\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start;\n    // Remove the line prefix.\n    events.splice(index - 2, 2);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this;\n  /** @type {number} */\n  let marker;\n  /** @type {boolean} */\n  let closingTag;\n  /** @type {string} */\n  let buffer;\n  /** @type {number} */\n  let index;\n  /** @type {Code} */\n  let markerB;\n  return start;\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"htmlFlow\");\n    effects.enter(\"htmlFlowData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      closingTag = true;\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      marker = 3;\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      marker = 2;\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      marker = 5;\n      index = 0;\n      return cdataOpenInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      marker = 4;\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation;\n      }\n      return cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      const slash = code === 47;\n      const name = buffer.toLowerCase();\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1;\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6;\n        if (slash) {\n          effects.consume(code);\n          return basicSelfClosing;\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      marker = 7;\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeClosingTagAfter;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return completeEnd;\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameBefore;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    return completeAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameAfter;\n    }\n    return completeAttributeNameBefore(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      markerB = code;\n      return completeAttributeValueQuoted;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    return completeAttributeValueUnquoted(code);\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code);\n      markerB = null;\n      return completeAttributeValueQuotedAfter;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {\n      return completeAttributeNameAfter(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationCommentInside;\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code);\n      return continuationRawTagOpen;\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code);\n      return continuationClose;\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code);\n      return continuationCdataInside;\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit(\"htmlFlowData\");\n      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationStart(code);\n    }\n    effects.consume(code);\n    return continuation;\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return continuationBefore;\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code);\n    }\n    effects.enter(\"htmlFlowData\");\n    return continuation(code);\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code);\n      buffer = '';\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase();\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code);\n        return continuationClose;\n      }\n      return continuation(code);\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      // Always the case.\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationAfter(code);\n    }\n    effects.consume(code);\n    return continuationClose;\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit(\"htmlFlow\");\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start;\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return effects.attempt(blankLine, ok, nok);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code> | undefined} */\n  let marker;\n  /** @type {number} */\n  let index;\n  /** @type {State} */\n  let returnState;\n  return start;\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"htmlText\");\n    effects.enter(\"htmlTextData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instruction;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      index = 0;\n      return cdataOpenInside;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return declaration;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 45) {\n      effects.consume(code);\n      return commentClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return comment;\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return comment(code);\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62 ? end(code) : code === 45 ? commentClose(code) : comment(code);\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      return index === value.length ? cdata : cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return cdata;\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return declaration;\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instructionClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return instruction;\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return tagCloseBetween(code);\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagCloseBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return end;\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    return tagOpenAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeNameAfter;\n    }\n    return tagOpenBetween(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      marker = code;\n      return tagOpenAttributeValueQuoted;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code);\n      marker = undefined;\n      return tagOpenAttributeValueQuotedAfter;\n    }\n    if (code === null) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {\n      return nok(code);\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code);\n      effects.exit(\"htmlTextData\");\n      effects.exit(\"htmlText\");\n      return ok;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit(\"htmlTextData\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineEndingAfter;\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code) ? factorySpace(effects, lineEndingAfterPrefix, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : lineEndingAfterPrefix(code);\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter(\"htmlTextData\");\n    return returnState(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Event,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  resolveAll: resolveAllLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  tokenize: tokenizeLabelEnd\n};\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n};\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n};\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n};\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1;\n  /** @type {Array<Event>} */\n  const newEvents = [];\n  while (++index < events.length) {\n    const token = events[index][1];\n    newEvents.push(events[index]);\n    if (token.type === \"labelImage\" || token.type === \"labelLink\" || token.type === \"labelEnd\") {\n      // Remove the marker.\n      const offset = token.type === \"labelImage\" ? 4 : 2;\n      token.type = \"data\";\n      index += offset;\n    }\n  }\n\n  // If the events are equal, we don't have to copy newEvents to events\n  if (events.length !== newEvents.length) {\n    splice(events, 0, events.length, newEvents);\n  }\n  return events;\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length;\n  let offset = 0;\n  /** @type {Token} */\n  let token;\n  /** @type {number | undefined} */\n  let open;\n  /** @type {number | undefined} */\n  let close;\n  /** @type {Array<Event>} */\n  let media;\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1];\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (token.type === \"link\" || token.type === \"labelLink\" && token._inactive) {\n        break;\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === \"labelLink\") {\n        token._inactive = true;\n      }\n    } else if (close) {\n      if (events[index][0] === 'enter' && (token.type === \"labelImage\" || token.type === \"labelLink\") && !token._balanced) {\n        open = index;\n        if (token.type !== \"labelLink\") {\n          offset = 2;\n          break;\n        }\n      }\n    } else if (token.type === \"labelEnd\") {\n      close = index;\n    }\n  }\n  const group = {\n    type: events[open][1].type === \"labelLink\" ? \"link\" : \"image\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n  const label = {\n    type: \"label\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[close][1].end\n    }\n  };\n  const text = {\n    type: \"labelText\",\n    start: {\n      ...events[open + offset + 2][1].end\n    },\n    end: {\n      ...events[close - 2][1].start\n    }\n  };\n  media = [['enter', group, context], ['enter', label, context]];\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3));\n\n  // Text open.\n  media = push(media, [['enter', text, context]]);\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));\n\n  // Text close, marker close, label close.\n  media = push(media, [['exit', text, context], events[close - 2], events[close - 1], ['exit', label, context]]);\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1));\n\n  // Media close.\n  media = push(media, [['exit', group, context]]);\n  splice(events, open, events.length, media);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  /** @type {Token} */\n  let labelStart;\n  /** @type {boolean} */\n  let defined;\n\n  // Find an opening.\n  while (index--) {\n    if ((self.events[index][1].type === \"labelImage\" || self.events[index][1].type === \"labelLink\") && !self.events[index][1]._balanced) {\n      labelStart = self.events[index][1];\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code);\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code);\n    }\n    defined = self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    })));\n    effects.enter(\"labelEnd\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelEnd\");\n    return after;\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code);\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code);\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true;\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart;\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter(\"resource\");\n    effects.enter(\"resourceMarker\");\n    effects.consume(code);\n    effects.exit(\"resourceMarker\");\n    return resourceBefore;\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceOpen)(code) : resourceOpen(code);\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code);\n    }\n    return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, \"resourceDestination\", \"resourceDestinationLiteral\", \"resourceDestinationLiteralMarker\", \"resourceDestinationRaw\", \"resourceDestinationString\", 32)(code);\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceBetween)(code) : resourceEnd(code);\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code);\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(effects, resourceTitleAfter, nok, \"resourceTitle\", \"resourceTitleMarker\", \"resourceTitleString\")(code);\n    }\n    return resourceEnd(code);\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceEnd)(code) : resourceEnd(code);\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter(\"resourceMarker\");\n      effects.consume(code);\n      effects.exit(\"resourceMarker\");\n      effects.exit(\"resource\");\n      return ok;\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this;\n  return referenceFull;\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, \"reference\", \"referenceMarker\", \"referenceString\")(code);\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart;\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter(\"reference\");\n    effects.enter(\"referenceMarker\");\n    effects.consume(code);\n    effects.exit(\"referenceMarker\");\n    return referenceCollapsedOpen;\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter(\"referenceMarker\");\n      effects.consume(code);\n      effects.exit(\"referenceMarker\");\n      effects.exit(\"reference\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartImage\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelImage\");\n    effects.enter(\"labelImageMarker\");\n    effects.consume(code);\n    effects.exit(\"labelImageMarker\");\n    return open;\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter(\"labelMarker\");\n      effects.consume(code);\n      effects.exit(\"labelMarker\");\n      effects.exit(\"labelImage\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartLink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelLink\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelLink\");\n    return after;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, ok, \"linePrefix\");\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"thematicBreak\");\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code;\n    return atBreak(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(\"thematicBreakSequence\");\n      return sequence(code);\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit(\"thematicBreak\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n    effects.exit(\"thematicBreakSequence\");\n    return markdownSpace(code) ? factorySpace(effects, atBreak, \"whitespace\")(code) : atBreak(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiDigit, markdownSpace } from 'micromark-util-character';\nimport { blankLine } from './blank-line.js';\nimport { thematicBreak } from './thematic-break.js';\n\n/** @type {Construct} */\nexport const list = {\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd,\n  name: 'list',\n  tokenize: tokenizeListStart\n};\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  partial: true,\n  tokenize: tokenizeListItemPrefixWhitespace\n};\n\n/** @type {Construct} */\nconst indentConstruct = {\n  partial: true,\n  tokenize: tokenizeIndent\n};\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this;\n  const tail = self.events[self.events.length - 1];\n  let initialSize = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    const kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? \"listUnordered\" : \"listOrdered\");\n    if (kind === \"listUnordered\" ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind;\n        effects.enter(kind, {\n          _container: true\n        });\n      }\n      if (kind === \"listUnordered\") {\n        effects.enter(\"listItemPrefix\");\n        return code === 42 || code === 45 ? effects.check(thematicBreak, nok, atMarker)(code) : atMarker(code);\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter(\"listItemPrefix\");\n        effects.enter(\"listItemValue\");\n        return inside(code);\n      }\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code);\n      return inside;\n    }\n    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {\n      effects.exit(\"listItemValue\");\n      return atMarker(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter(\"listItemMarker\");\n    effects.consume(code);\n    effects.exit(\"listItemMarker\");\n    self.containerState.marker = self.containerState.marker || code;\n    return effects.check(blankLine,\n    // Can’t be empty when interrupting.\n    self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true;\n    initialSize++;\n    return endOfPrefix(code);\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"listItemPrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"listItemPrefixWhitespace\");\n      return endOfPrefix;\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size = initialSize + self.sliceSerialize(effects.exit(\"listItemPrefix\"), true).length;\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this;\n  self.containerState._closeFlow = undefined;\n  return effects.check(blankLine, onBlank, notBlank);\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(effects, ok, \"listItemIndent\", self.containerState.size + 1)(code);\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined;\n      self.containerState.initialBlankLine = undefined;\n      return notInCurrentItem(code);\n    }\n    self.containerState.furtherBlankLines = undefined;\n    self.containerState.initialBlankLine = undefined;\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true;\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined;\n    // Always populated by defaults.\n\n    return factorySpace(effects, effects.attempt(list, ok, nok), \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, \"listItemIndent\", self.containerState.size + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"listItemIndent\" && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Exiter}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type);\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this;\n\n  // Always populated by defaults.\n\n  return factorySpace(effects, afterPrefix, \"listItemPrefixWhitespace\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4 + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return !markdownSpace(code) && tail && tail[1].type === \"listItemPrefixWhitespace\" ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  resolveTo: resolveToSetextUnderline,\n  tokenize: tokenizeSetextUnderline\n};\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length;\n  /** @type {number | undefined} */\n  let content;\n  /** @type {number | undefined} */\n  let text;\n  /** @type {number | undefined} */\n  let definition;\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === \"content\") {\n        content = index;\n        break;\n      }\n      if (events[index][1].type === \"paragraph\") {\n        text = index;\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === \"content\") {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1);\n      }\n      if (!definition && events[index][1].type === \"definition\") {\n        definition = index;\n      }\n    }\n  }\n  const heading = {\n    type: \"setextHeading\",\n    start: {\n      ...events[content][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = \"setextHeadingText\";\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context]);\n    events.splice(definition + 1, 0, ['exit', events[content][1], context]);\n    events[content][1].end = {\n      ...events[definition][1].end\n    };\n  } else {\n    events[content][1] = heading;\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context]);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length;\n    /** @type {boolean | undefined} */\n    let paragraph;\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (self.events[index][1].type !== \"lineEnding\" && self.events[index][1].type !== \"linePrefix\" && self.events[index][1].type !== \"content\") {\n        paragraph = self.events[index][1].type === \"paragraph\";\n        break;\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter(\"setextHeadingLine\");\n      marker = code;\n      return before(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"setextHeadingLineSequence\");\n    return inside(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    effects.exit(\"setextHeadingLineSequence\");\n    return markdownSpace(code) ? factorySpace(effects, after, \"lineSuffix\")(code) : after(code);\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"setextHeadingLine\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nimport { blankLine, content } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n};\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeFlow(effects) {\n  const self = this;\n  const initial = effects.attempt(\n  // Try to parse a blank line.\n  blankLine, atBlankEnding,\n  // Try to parse initial flow (essentially, only code).\n  effects.attempt(this.parser.constructs.flowInitial, afterConstruct, factorySpace(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(content, afterConstruct)), \"linePrefix\")));\n  return initial;\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEndingBlank\");\n    effects.consume(code);\n    effects.exit(\"lineEndingBlank\");\n    self.currentConstruct = undefined;\n    return initial;\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    self.currentConstruct = undefined;\n    return initial;\n  }\n}","/**\n * @import {\n *   Code,\n *   InitialConstruct,\n *   Initializer,\n *   Resolver,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n};\nexport const string = initializeFactory('string');\nexport const text = initializeFactory('text');\n\n/**\n * @param {'string' | 'text'} field\n *   Field.\n * @returns {InitialConstruct}\n *   Construct.\n */\nfunction initializeFactory(field) {\n  return {\n    resolveAll: createResolver(field === 'text' ? resolveAllLineSuffixes : undefined),\n    tokenize: initializeText\n  };\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this;\n    const constructs = this.parser.constructs[field];\n    const text = effects.attempt(constructs, start, notText);\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code);\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code);\n        return;\n      }\n      effects.enter(\"data\");\n      effects.consume(code);\n      return data;\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit(\"data\");\n        return text(code);\n      }\n\n      // Data.\n      effects.consume(code);\n      return data;\n    }\n\n    /**\n     * @param {Code} code\n     *   Code.\n     * @returns {boolean}\n     *   Whether the code is a break.\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true;\n      }\n      const list = constructs[code];\n      let index = -1;\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index];\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n *   Resolver.\n * @returns {Resolver}\n *   Resolver.\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText;\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1;\n    /** @type {number | undefined} */\n    let enter;\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === \"data\") {\n          enter = index;\n          index++;\n        }\n      } else if (!events[index] || events[index][1].type !== \"data\") {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end;\n          events.splice(enter + 2, index - enter - 2);\n          index = enter + 2;\n        }\n        enter = undefined;\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events;\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0; // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if ((eventIndex === events.length || events[eventIndex][1].type === \"lineEnding\") && events[eventIndex - 1][1].type === \"data\") {\n      const data = events[eventIndex - 1][1];\n      const chunks = context.sliceStream(data);\n      let index = chunks.length;\n      let bufferIndex = -1;\n      let size = 0;\n      /** @type {boolean | undefined} */\n      let tabs;\n      while (index--) {\n        const chunk = chunks[index];\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length;\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++;\n            bufferIndex--;\n          }\n          if (bufferIndex) break;\n          bufferIndex = -1;\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true;\n          size++;\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++;\n          break;\n        }\n      }\n\n      // Allow final trailing whitespace.\n      if (context._contentTypeTextTrailing && eventIndex === events.length) {\n        size = 0;\n      }\n      if (size) {\n        const token = {\n          type: eventIndex === events.length || tabs || size < 2 ? \"lineSuffix\" : \"hardBreakTrailing\",\n          start: {\n            _bufferIndex: index ? bufferIndex : data.start._bufferIndex + bufferIndex,\n            _index: data.start._index + index,\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size\n          },\n          end: {\n            ...data.end\n          }\n        };\n        data.end = {\n          ...token.start\n        };\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token);\n        } else {\n          events.splice(eventIndex, 0, ['enter', token, context], ['exit', token, context]);\n          eventIndex += 2;\n        }\n      }\n      eventIndex++;\n    }\n  }\n  return events;\n}","/**\n * @import {Extension} from 'micromark-util-types'\n */\n\nimport { attention, autolink, blockQuote, characterEscape, characterReference, codeFenced, codeIndented, codeText, definition, hardBreakEscape, headingAtx, htmlFlow, htmlText, labelEnd, labelStartImage, labelStartLink, lineEnding, list, setextUnderline, thematicBreak } from 'micromark-core-commonmark';\nimport { resolver as resolveText } from './initialize/text.js';\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n};\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n};\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n};\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n};\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n};\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n};\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n};\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n};\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n};","/**\n * @import {\n *   Chunk,\n *   Code,\n *   ConstructRecord,\n *   Construct,\n *   Effects,\n *   InitialConstruct,\n *   ParseContext,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @callback Restore\n *   Restore the state.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef Info\n *   Info.\n * @property {Restore} restore\n *   Restore.\n * @property {number} from\n *   From.\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n *   Construct.\n * @param {Info} info\n *   Info.\n * @returns {undefined}\n *   Nothing.\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n *   Parser.\n * @param {InitialConstruct} initialize\n *   Construct.\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n *   Point (optional).\n * @returns {TokenizeContext}\n *   Context.\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = {\n    _bufferIndex: -1,\n    _index: 0,\n    line: from && from.line || 1,\n    column: from && from.column || 1,\n    offset: from && from.offset || 0\n  };\n  /** @type {Record<string, number>} */\n  const columnStart = {};\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = [];\n  /** @type {Array<Chunk>} */\n  let chunks = [];\n  /** @type {Array<Token>} */\n  let stack = [];\n  /** @type {boolean | undefined} */\n  let consumed = true;\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    consume,\n    enter,\n    exit,\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  };\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    code: null,\n    containerState: {},\n    defineSkip,\n    events: [],\n    now,\n    parser,\n    previous: null,\n    sliceSerialize,\n    sliceStream,\n    write\n  };\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects);\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode;\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize);\n  }\n  return context;\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice);\n    main();\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return [];\n    }\n    addResult(initialize, 0);\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context);\n    return context.events;\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs);\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token);\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    } = point;\n    return {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    };\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column;\n    accountForPotentialSkip();\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex;\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index];\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index;\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0;\n        }\n        while (point._index === chunkIndex && point._bufferIndex < chunk.length) {\n          go(chunk.charCodeAt(point._bufferIndex));\n        }\n      } else {\n        go(chunk);\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   *   Code.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function go(code) {\n    consumed = undefined;\n    expectedCode = code;\n    state = state(code);\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++;\n      point.column = 1;\n      point.offset += code === -3 ? 2 : 1;\n      accountForPotentialSkip();\n    } else if (code !== -1) {\n      point.column++;\n      point.offset++;\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++;\n    } else {\n      point._bufferIndex++;\n\n      // At end of string chunk.\n      if (point._bufferIndex ===\n      // Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      /** @type {string} */\n      chunks[point._index].length) {\n        point._bufferIndex = -1;\n        point._index++;\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code;\n\n    // Mark as consumed.\n    consumed = true;\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {};\n    token.type = type;\n    token.start = now();\n    context.events.push(['enter', token, context]);\n    stack.push(token);\n    return token;\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop();\n    token.end = now();\n    context.events.push(['exit', token, context]);\n    return token;\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from);\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore();\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   *   Callback.\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   *   Fields.\n   */\n  function constructFactory(onreturn, fields) {\n    return hook;\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | ConstructRecord | Construct} constructs\n     *   Constructs.\n     * @param {State} returnState\n     *   State.\n     * @param {State | undefined} [bogusState]\n     *   State.\n     * @returns {State}\n     *   State.\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {ReadonlyArray<Construct>} */\n      let listOfConstructs;\n      /** @type {number} */\n      let constructIndex;\n      /** @type {Construct} */\n      let currentConstruct;\n      /** @type {Info} */\n      let info;\n      return Array.isArray(constructs) ? /* c8 ignore next 1 */\n      handleListOfConstructs(constructs) : 'tokenize' in constructs ?\n      // Looks like a construct.\n      handleListOfConstructs([(/** @type {Construct} */constructs)]) : handleMapOfConstructs(constructs);\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleMapOfConstructs(map) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          const left = code !== null && map[code];\n          const all = code !== null && map.null;\n          const list = [\n          // To do: add more extension tests.\n          /* c8 ignore next 2 */\n          ...(Array.isArray(left) ? left : left ? [left] : []), ...(Array.isArray(all) ? all : all ? [all] : [])];\n          return handleListOfConstructs(list)(code);\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ReadonlyArray<Construct>} list\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list;\n        constructIndex = 0;\n        if (list.length === 0) {\n          return bogusState;\n        }\n        return handleConstruct(list[constructIndex]);\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       *   Construct.\n       * @returns {State}\n       *   State.\n       */\n      function handleConstruct(construct) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store();\n          currentConstruct = construct;\n          if (!construct.partial) {\n            context.currentConstruct = construct;\n          }\n\n          // Always populated by defaults.\n\n          if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {\n            return nok(code);\n          }\n          return construct.tokenize.call(\n          // If we do have fields, create an object w/ `context` as its\n          // prototype.\n          // This allows a “live binding”, which is needed for `interrupt`.\n          fields ? Object.assign(Object.create(context), fields) : context, effects, ok, nok)(code);\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true;\n        onreturn(currentConstruct, info);\n        return returnState;\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true;\n        info.restore();\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex]);\n        }\n        return bogusState;\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   *   Construct.\n   * @param {number} from\n   *   From.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct);\n    }\n    if (construct.resolve) {\n      splice(context.events, from, context.events.length - from, construct.resolve(context.events.slice(from), context));\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context);\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   *   Info.\n   */\n  function store() {\n    const startPoint = now();\n    const startPrevious = context.previous;\n    const startCurrentConstruct = context.currentConstruct;\n    const startEventsIndex = context.events.length;\n    const startStack = Array.from(stack);\n    return {\n      from: startEventsIndex,\n      restore\n    };\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     *   Nothing.\n     */\n    function restore() {\n      point = startPoint;\n      context.previous = startPrevious;\n      context.currentConstruct = startCurrentConstruct;\n      context.events.length = startEventsIndex;\n      stack = startStack;\n      accountForPotentialSkip();\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line];\n      point.offset += columnStart[point.line] - 1;\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {Pick<Token, 'end' | 'start'>} token\n *   Token.\n * @returns {Array<Chunk>}\n *   Chunks.\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index;\n  const startBufferIndex = token.start._bufferIndex;\n  const endIndex = token.end._index;\n  const endBufferIndex = token.end._bufferIndex;\n  /** @type {Array<Chunk>} */\n  let view;\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];\n  } else {\n    view = chunks.slice(startIndex, endIndex);\n    if (startBufferIndex > -1) {\n      const head = view[0];\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex);\n        /* c8 ignore next 4 -- used to be used, no longer */\n      } else {\n        view.shift();\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex));\n    }\n  }\n  return view;\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {boolean | undefined} [expandTabs=false]\n *   Whether to expand tabs (default: `false`).\n * @returns {string}\n *   Result.\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1;\n  /** @type {Array<string>} */\n  const result = [];\n  /** @type {boolean | undefined} */\n  let atTab;\n  while (++index < chunks.length) {\n    const chunk = chunks[index];\n    /** @type {string} */\n    let value;\n    if (typeof chunk === 'string') {\n      value = chunk;\n    } else switch (chunk) {\n      case -5:\n        {\n          value = \"\\r\";\n          break;\n        }\n      case -4:\n        {\n          value = \"\\n\";\n          break;\n        }\n      case -3:\n        {\n          value = \"\\r\" + \"\\n\";\n          break;\n        }\n      case -2:\n        {\n          value = expandTabs ? \" \" : \"\\t\";\n          break;\n        }\n      case -1:\n        {\n          if (!expandTabs && atTab) continue;\n          value = \" \";\n          break;\n        }\n      default:\n        {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk);\n        }\n    }\n    atTab = chunk === -2;\n    result.push(value);\n  }\n  return result.join('');\n}","/**\n * @import {\n *   Create,\n *   FullNormalizedExtension,\n *   InitialConstruct,\n *   ParseContext,\n *   ParseOptions\n * } from 'micromark-util-types'\n */\n\nimport { combineExtensions } from 'micromark-util-combine-extensions';\nimport { content } from './initialize/content.js';\nimport { document } from './initialize/document.js';\nimport { flow } from './initialize/flow.js';\nimport { string, text } from './initialize/text.js';\nimport * as defaultConstructs from './constructs.js';\nimport { createTokenizer } from './create-tokenizer.js';\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ParseContext}\n *   Parser.\n */\nexport function parse(options) {\n  const settings = options || {};\n  const constructs = /** @type {FullNormalizedExtension} */\n  combineExtensions([defaultConstructs, ...(settings.extensions || [])]);\n\n  /** @type {ParseContext} */\n  const parser = {\n    constructs,\n    content: create(content),\n    defined: [],\n    document: create(document),\n    flow: create(flow),\n    lazy: {},\n    string: create(string),\n    text: create(text)\n  };\n  return parser;\n\n  /**\n   * @param {InitialConstruct} initial\n   *   Construct to start with.\n   * @returns {Create}\n   *   Create a tokenizer.\n   */\n  function create(initial) {\n    return creator;\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from);\n    }\n  }\n}","/**\n * @import {Event} from 'micromark-util-types'\n */\n\nimport { subtokenize } from 'micromark-util-subtokenize';\n\n/**\n * @param {Array<Event>} events\n *   Events.\n * @returns {Array<Event>}\n *   Events.\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events;\n}","/**\n * @import {Chunk, Code, Encoding, Value} from 'micromark-util-types'\n */\n\n/**\n * @callback Preprocessor\n *   Preprocess a value.\n * @param {Value} value\n *   Value.\n * @param {Encoding | null | undefined} [encoding]\n *   Encoding when `value` is a typed array (optional).\n * @param {boolean | null | undefined} [end=false]\n *   Whether this is the last chunk (default: `false`).\n * @returns {Array<Chunk>}\n *   Chunks.\n */\n\nconst search = /[\\0\\t\\n\\r]/g;\n\n/**\n * @returns {Preprocessor}\n *   Preprocess a value.\n */\nexport function preprocess() {\n  let column = 1;\n  let buffer = '';\n  /** @type {boolean | undefined} */\n  let start = true;\n  /** @type {boolean | undefined} */\n  let atCarriageReturn;\n  return preprocessor;\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = [];\n    /** @type {RegExpMatchArray | null} */\n    let match;\n    /** @type {number} */\n    let next;\n    /** @type {number} */\n    let startPosition;\n    /** @type {number} */\n    let endPosition;\n    /** @type {Code} */\n    let code;\n    value = buffer + (typeof value === 'string' ? value.toString() : new TextDecoder(encoding || undefined).decode(value));\n    startPosition = 0;\n    buffer = '';\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++;\n      }\n      start = undefined;\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition;\n      match = search.exec(value);\n      endPosition = match && match.index !== undefined ? match.index : value.length;\n      code = value.charCodeAt(endPosition);\n      if (!match) {\n        buffer = value.slice(startPosition);\n        break;\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3);\n        atCarriageReturn = undefined;\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5);\n          atCarriageReturn = undefined;\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition));\n          column += endPosition - startPosition;\n        }\n        switch (code) {\n          case 0:\n            {\n              chunks.push(65533);\n              column++;\n              break;\n            }\n          case 9:\n            {\n              next = Math.ceil(column / 4) * 4;\n              chunks.push(-2);\n              while (column++ < next) chunks.push(-1);\n              break;\n            }\n          case 10:\n            {\n              chunks.push(-4);\n              column = 1;\n              break;\n            }\n          default:\n            {\n              atCarriageReturn = true;\n              column = 1;\n            }\n        }\n      }\n      startPosition = endPosition + 1;\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5);\n      if (buffer) chunks.push(buffer);\n      chunks.push(null);\n    }\n    return chunks;\n  }\n}","import { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nconst characterEscapeOrReference = /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi;\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode);\n}\n\n/**\n * @param {string} $0\n *   Match.\n * @param {string} $1\n *   Character escape.\n * @param {string} $2\n *   Character reference.\n * @returns {string}\n *   Decoded value\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1;\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0);\n  if (head === 35) {\n    const head = $2.charCodeAt(1);\n    const hex = head === 120 || head === 88;\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10);\n  }\n  return decodeNamedCharacterReference($2) || $0;\n}","/**\n * @import {\n *   Break,\n *   Blockquote,\n *   Code,\n *   Definition,\n *   Emphasis,\n *   Heading,\n *   Html,\n *   Image,\n *   InlineCode,\n *   Link,\n *   ListItem,\n *   List,\n *   Nodes,\n *   Paragraph,\n *   PhrasingContent,\n *   ReferenceType,\n *   Root,\n *   Strong,\n *   Text,\n *   ThematicBreak\n * } from 'mdast'\n * @import {\n *   Encoding,\n *   Event,\n *   Token,\n *   Value\n * } from 'micromark-util-types'\n * @import {Point} from 'unist'\n * @import {\n *   CompileContext,\n *   CompileData,\n *   Config,\n *   Extension,\n *   Handle,\n *   OnEnterError,\n *   Options\n * } from './types.js'\n */\n\nimport { toString } from 'mdast-util-to-string';\nimport { parse, postprocess, preprocess } from 'micromark';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nimport { decodeString } from 'micromark-util-decode-string';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { stringifyPosition } from 'unist-util-stringify-position';\nconst own = {}.hasOwnProperty;\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding;\n    encoding = undefined;\n  }\n  return compiler(options)(postprocess(parse(options).document().write(preprocess()(value, encoding, true))));\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      characterReference: onexitcharacterreference,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  };\n  configure(config, (options || {}).mdastExtensions || []);\n\n  /** @type {CompileData} */\n  const data = {};\n  return compile;\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    };\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    };\n    /** @type {Array<number>} */\n    const listStack = [];\n    let index = -1;\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (events[index][1].type === \"listOrdered\" || events[index][1].type === \"listUnordered\") {\n        if (events[index][0] === 'enter') {\n          listStack.push(index);\n        } else {\n          const tail = listStack.pop();\n          index = prepareList(events, tail, index);\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      const handler = config[events[index][0]];\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(Object.assign({\n          sliceSerialize: events[index][2].sliceSerialize\n        }, context), events[index][1]);\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1];\n      const handler = tail[1] || defaultOnError;\n      handler.call(context, undefined, tail[0]);\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(events.length > 0 ? events[0][1].start : {\n        line: 1,\n        column: 1,\n        offset: 0\n      }),\n      end: point(events.length > 0 ? events[events.length - 2][1].end : {\n        line: 1,\n        column: 1,\n        offset: 0\n      })\n    };\n\n    // Call transforms.\n    index = -1;\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree;\n    }\n    return tree;\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1;\n    let containerBalance = -1;\n    let listSpread = false;\n    /** @type {Token | undefined} */\n    let listItem;\n    /** @type {number | undefined} */\n    let lineIndex;\n    /** @type {number | undefined} */\n    let firstBlankLineIndex;\n    /** @type {boolean | undefined} */\n    let atMarker;\n    while (++index <= length) {\n      const event = events[index];\n      switch (event[1].type) {\n        case \"listUnordered\":\n        case \"listOrdered\":\n        case \"blockQuote\":\n          {\n            if (event[0] === 'enter') {\n              containerBalance++;\n            } else {\n              containerBalance--;\n            }\n            atMarker = undefined;\n            break;\n          }\n        case \"lineEndingBlank\":\n          {\n            if (event[0] === 'enter') {\n              if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {\n                firstBlankLineIndex = index;\n              }\n              atMarker = undefined;\n            }\n            break;\n          }\n        case \"linePrefix\":\n        case \"listItemValue\":\n        case \"listItemMarker\":\n        case \"listItemPrefix\":\n        case \"listItemPrefixWhitespace\":\n          {\n            // Empty.\n\n            break;\n          }\n        default:\n          {\n            atMarker = undefined;\n          }\n      }\n      if (!containerBalance && event[0] === 'enter' && event[1].type === \"listItemPrefix\" || containerBalance === -1 && event[0] === 'exit' && (event[1].type === \"listUnordered\" || event[1].type === \"listOrdered\")) {\n        if (listItem) {\n          let tailIndex = index;\n          lineIndex = undefined;\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex];\n            if (tailEvent[1].type === \"lineEnding\" || tailEvent[1].type === \"lineEndingBlank\") {\n              if (tailEvent[0] === 'exit') continue;\n              if (lineIndex) {\n                events[lineIndex][1].type = \"lineEndingBlank\";\n                listSpread = true;\n              }\n              tailEvent[1].type = \"lineEnding\";\n              lineIndex = tailIndex;\n            } else if (tailEvent[1].type === \"linePrefix\" || tailEvent[1].type === \"blockQuotePrefix\" || tailEvent[1].type === \"blockQuotePrefixWhitespace\" || tailEvent[1].type === \"blockQuoteMarker\" || tailEvent[1].type === \"listItemIndent\") {\n              // Empty\n            } else {\n              break;\n            }\n          }\n          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {\n            listItem._spread = true;\n          }\n\n          // Fix position.\n          listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);\n          index++;\n          length++;\n        }\n\n        // Create a new list item.\n        if (event[1].type === \"listItemPrefix\") {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          };\n          listItem = item;\n          events.splice(index, 0, ['enter', item, event[2]]);\n          index++;\n          length++;\n          firstBlankLineIndex = undefined;\n          atMarker = true;\n        }\n      }\n    }\n    events[start][1]._spread = listSpread;\n    return length;\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token);\n      if (and) and.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['buffer']}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    });\n  }\n\n  /**\n   * @type {CompileContext['enter']}\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children;\n    siblings.push(node);\n    this.stack.push(node);\n    this.tokenStack.push([token, errorHandler || undefined]);\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    };\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token);\n      exit.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['exit']}\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop();\n    const open = this.tokenStack.pop();\n    if (!open) {\n      throw new Error('Cannot close `' + token.type + '` (' + stringifyPosition({\n        start: token.start,\n        end: token.end\n      }) + '): it’s not open');\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0]);\n      } else {\n        const handler = open[1] || defaultOnError;\n        handler.call(this, token, open[0]);\n      }\n    }\n    node.position.end = point(token.end);\n  }\n\n  /**\n   * @type {CompileContext['resume']}\n   */\n  function resume() {\n    return toString(this.stack.pop());\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2];\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);\n      this.data.expectingFirstListItemValue = undefined;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.lang = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.meta = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return;\n    this.buffer();\n    this.data.flowCodeInside = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '');\n    this.data.flowCodeInside = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.label = label;\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length;\n      node.depth = depth;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = node.children;\n    let tail = siblings[siblings.length - 1];\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text();\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      };\n      siblings.push(tail);\n    }\n    this.stack.push(tail);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop();\n    tail.value += this.sliceSerialize(token);\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1];\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      const tail = context.children[context.children.length - 1];\n      tail.position.end = point(token.end);\n      this.data.atHardBreak = undefined;\n      return;\n    }\n    if (!this.data.setextHeadingSlurpLineEnding && config.canContainEols.includes(context.type)) {\n      onenterdata.call(this, token);\n      onexitdata.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token);\n    const ancestor = this.stack[this.stack.length - 2];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string);\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1];\n    const value = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // Assume a reference.\n    this.data.inReference = true;\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children;\n      node.children = children;\n    } else {\n      node.alt = value;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label;\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n    this.data.referenceType = 'full';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    this.data.characterReferenceType = token.type;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token);\n    const type = this.data.characterReferenceType;\n    /** @type {string} */\n    let value;\n    if (type) {\n      value = decodeNumericCharacterReference(data, type === \"characterReferenceMarkerNumeric\" ? 10 : 16);\n      this.data.characterReferenceType = undefined;\n    } else {\n      const result = decodeNamedCharacterReference(data);\n      value = result;\n    }\n    const tail = this.stack[this.stack.length - 1];\n    tail.value += value;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreference(token) {\n    const tail = this.stack.pop();\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = this.sliceSerialize(token);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = 'mailto:' + this.sliceSerialize(token);\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    };\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    };\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    };\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    };\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    };\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    };\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    };\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    };\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    };\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    };\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    };\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    };\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    };\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    };\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  };\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1;\n  while (++index < extensions.length) {\n    const value = extensions[index];\n    if (Array.isArray(value)) {\n      configure(combined, value);\n    } else {\n      extension(combined, value);\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key;\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'transforms':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'enter':\n        case 'exit':\n          {\n            const right = extension[key];\n            if (right) {\n              Object.assign(combined[key], right);\n            }\n            break;\n          }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error('Cannot close `' + left.type + '` (' + stringifyPosition({\n      start: left.start,\n      end: left.end\n    }) + '): a different token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is open');\n  } else {\n    throw new Error('Cannot close document, a token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is still open');\n  }\n}","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  /** @type {Properties} */\n  const properties = {}\n\n  if (node.lang) {\n    properties.className = ['language-' + node.lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  let reuseCounter = state.footnoteCounts.get(id)\n\n  if (reuseCounter === undefined) {\n    reuseCounter = 0\n    state.footnoteOrder.push(id)\n    counter = state.footnoteOrder.length\n  } else {\n    counter = index + 1\n  }\n\n  reuseCounter += 1\n  state.footnoteCounts.set(id, reuseCounter)\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + clobberPrefix + 'fn-' + safeId,\n      id:\n        clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Html} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Element | Raw | undefined}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.options.allowDangerousHtml) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  return undefined\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Reference} Reference\n *\n * @typedef {import('./state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Extract<Nodes, Reference>} node\n *   Reference node (image, link).\n * @returns {Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return [{type: 'text', value: '![' + node.alt + suffix}]\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(definition.url || ''), alt: node.alt}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(definition.url || '')}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === null || spread === undefined\n    ? node.children.length > 1\n    : spread\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Parents} HastParents\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastParents}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointEnd, pointStart} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start && end) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(cell, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastElement | HastText}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n *\n * @satisfies {import('../state.js').Handlers}\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  // @ts-expect-error: root is different, but hard to type.\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return undefined\n}\n","export const VOID       = -1;\nexport const PRIMITIVE  = 0;\nexport const ARRAY      = 1;\nexport const OBJECT     = 2;\nexport const DATE       = 3;\nexport const REGEXP     = 4;\nexport const MAP        = 5;\nexport const SET        = 6;\nexport const ERROR      = 7;\nexport const BIGINT     = 8;\n// export const SYMBOL = 9;\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n      case 'ArrayBuffer':\n        return as(new Uint8Array(value).buffer, value);\n      case 'DataView': {\n        const { buffer } = new Uint8Array(value);\n        return as(new DataView(buffer), value);\n      }\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst EMPTY = '';\n\nconst {toString} = {};\nconst {keys} = Object;\n\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value)\n    return [PRIMITIVE, type];\n\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n    case 'DataView':\n      return [ARRAY, asString];\n  }\n\n  if (asString.includes('Array'))\n    return [ARRAY, asString];\n\n  if (asString.includes('Error'))\n    return [ERROR, asString];\n\n  return [OBJECT, asString];\n};\n\nconst shouldSkip = ([TYPE, type]) => (\n  TYPE === PRIMITIVE &&\n  (type === 'function' || type === 'symbol')\n);\n\nconst serializer = (strict, json, $, _) => {\n\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n\n  const pair = value => {\n    if ($.has(value))\n      return $.get(value);\n\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case 'bigint':\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case 'function':\n          case 'symbol':\n            if (strict)\n              throw new TypeError('unable to serialize ' + type);\n            entry = null;\n            break;\n          case 'undefined':\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type) {\n          let spread = value;\n          if (type === 'DataView') {\n            spread = new Uint8Array(value.buffer);\n          }\n          else if (type === 'ArrayBuffer') {\n            spread = new Uint8Array(value);\n          }\n          return as([type, [...spread]], value);\n        }\n\n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case 'BigInt':\n              return as([type, value.toString()], value);\n            case 'Boolean':\n            case 'Number':\n            case 'String':\n              return as([type, value.valueOf()], value);\n          }\n        }\n\n        if (json && ('toJSON' in value))\n          return pair(value.toJSON());\n\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as([TYPE, {source, flags}], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n\n    const {message} = value;\n    return as([TYPE, {name: type, message}], value);\n  };\n\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\n export const serialize = (value, {json, lossy} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n","import {deserialize} from './deserialize.js';\nimport {serialize} from './serialize.js';\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} any a serializable value.\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\n * a transfer option (ignored when polyfilled) and/or non standard fields that\n * fallback to the polyfill if present.\n * @returns {Record[]}\n */\nexport default typeof structuredClone === \"function\" ?\n  /* c8 ignore start */\n  (any, options) => (\n    options && ('json' in options || 'lossy' in options) ?\n      deserialize(serialize(any, options)) : structuredClone(any)\n  ) :\n  (any, options) => deserialize(serialize(any, options));\n  /* c8 ignore stop */\n\nexport {deserialize, serialize};\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @callback FootnoteBackContentTemplate\n *   Generate content for the backreference dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent> | ElementContent | string}\n *   Content for the backreference when linking back from definitions to their\n *   reference.\n *\n * @callback FootnoteBackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate the default content that GitHub uses on backreferences.\n *\n * @param {number} _\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent>}\n *   Content.\n */\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\n  /** @type {Array<ElementContent>} */\n  const result = [{type: 'text', value: '↩'}]\n\n  if (rereferenceIndex > 1) {\n    result.push({\n      type: 'element',\n      tagName: 'sup',\n      properties: {},\n      children: [{type: 'text', value: String(rereferenceIndex)}]\n    })\n  }\n\n  return result\n}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Label.\n */\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\n// eslint-disable-next-line complexity\nexport function footer(state) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const footnoteBackContent =\n    state.options.footnoteBackContent || defaultFootnoteBackContent\n  const footnoteBackLabel =\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let referenceIndex = -1\n\n  while (++referenceIndex < state.footnoteOrder.length) {\n    const definition = state.footnoteById.get(\n      state.footnoteOrder[referenceIndex]\n    )\n\n    if (!definition) {\n      continue\n    }\n\n    const content = state.all(definition)\n    const id = String(definition.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let rereferenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n    const counts = state.footnoteCounts.get(id)\n\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      let children =\n        typeof footnoteBackContent === 'string'\n          ? footnoteBackContent\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\n\n      if (typeof children === 'string') {\n        children = {type: 'text', value: children}\n      }\n\n      backReferences.push({\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\n          dataFootnoteBackref: '',\n          ariaLabel:\n            typeof footnoteBackLabel === 'string'\n              ? footnoteBackLabel\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\n          className: ['data-footnote-backref']\n        },\n        children: Array.isArray(children) ? children : [children]\n      })\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(definition, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: footnoteLabelTagName,\n        properties: {\n          ...structuredClone(footnoteLabelProperties),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').RootContent} HastRootContent\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').Parents} MdastParents\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\n */\n\n/**\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\n *   hast node.\n *\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\n *   Handle nodes.\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree (default:\n *   `false`).\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` property on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {VFile | null | undefined} [file]\n *   Corresponding virtual file representing the input document (optional).\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\n *     const result = [{type: 'text', value: '↩'}]\n *\n *     if (rereferenceIndex > 1) {\n *       result.push({\n *         type: 'element',\n *         tagName: 'sup',\n *         properties: {},\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\n *       })\n *     }\n *\n *     return result\n *   }\n *   ```\n *\n *   This content is used in the `a` element of each backreference (the `↩`\n *   links).\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\n *   Label to describe the backreference back to references (default:\n *   `defaultFootnoteBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *   }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `ariaLabel` property on each backreference\n *   (the `↩` links).\n *   It affects users of assistive technology.\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (default: `{className:\n *   ['sr-only']}`).\n *\n *   Change it to show the label and add other properties.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different properties.\n *\n *   > **Note**: `id: 'footnote-label'` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes (optional).\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed)\n *   (optional).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes (optional).\n *\n * @typedef State\n *   Info passed around.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {Map<string, MdastDefinition>} definitionById\n *   Definitions by their identifier.\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Map<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\n *   Transform an mdast node to hast.\n * @property {Options} options\n *   Configuration.\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {visit} from 'unist-util-visit'\nimport {position} from 'unist-util-position'\nimport {handlers as defaultHandlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || emptyOptions\n  /** @type {Map<string, MdastDefinition>} */\n  const definitionById = new Map()\n  /** @type {Map<string, MdastFootnoteDefinition>} */\n  const footnoteById = new Map()\n  /** @type {Map<string, number>} */\n  const footnoteCounts = new Map()\n  /** @type {Handlers} */\n  // @ts-expect-error: the root handler returns a root.\n  // Hard to type.\n  const handlers = {...defaultHandlers, ...settings.handlers}\n\n  /** @type {State} */\n  const state = {\n    all,\n    applyData,\n    definitionById,\n    footnoteById,\n    footnoteCounts,\n    footnoteOrder: [],\n    handlers,\n    one,\n    options: settings,\n    patch,\n    wrap\n  }\n\n  visit(tree, function (node) {\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\n      const map = node.type === 'definition' ? definitionById : footnoteById\n      const id = String(node.identifier).toUpperCase()\n\n      // Mimick CM behavior of link definitions.\n      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\n      if (!map.has(id)) {\n        // @ts-expect-error: node type matches map.\n        map.set(id, node)\n      }\n    }\n  })\n\n  return state\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\n   *   Resulting hast node.\n   */\n  function one(node, parent) {\n    const type = node.type\n    const handle = state.handlers[type]\n\n    if (own.call(state.handlers, type) && handle) {\n      return handle(state, node, parent)\n    }\n\n    if (state.options.passThrough && state.options.passThrough.includes(type)) {\n      if ('children' in node) {\n        const {children, ...shallow} = node\n        const result = structuredClone(shallow)\n        // @ts-expect-error: TS doesn’t understand…\n        result.children = state.all(node)\n        // @ts-expect-error: TS doesn’t understand…\n        return result\n      }\n\n      // @ts-expect-error: it’s custom.\n      return structuredClone(node)\n    }\n\n    const unknown = state.options.unknownHandler || defaultUnknownHandler\n\n    return unknown(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function all(parent) {\n    /** @type {Array<HastElementContent>} */\n    const values = []\n\n    if ('children' in parent) {\n      const nodes = parent.children\n      let index = -1\n      while (++index < nodes.length) {\n        const result = state.one(nodes[index], parent)\n\n        // To do: see if we van clean this? Can we merge texts?\n        if (result) {\n          if (index && nodes[index - 1].type === 'break') {\n            if (!Array.isArray(result) && result.type === 'text') {\n              result.value = trimMarkdownSpaceStart(result.value)\n            }\n\n            if (!Array.isArray(result) && result.type === 'element') {\n              const head = result.children[0]\n\n              if (head && head.type === 'text') {\n                head.value = trimMarkdownSpaceStart(head.value)\n              }\n            }\n          }\n\n          if (Array.isArray(result)) {\n            values.push(...result)\n          } else {\n            values.push(result)\n          }\n        }\n      }\n    }\n\n    return values\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {HastElement | Type}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {HastElement | Type} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent of `hName` is to create an element, but likely also to keep\n      // the content around (otherwise: pass `hChildren`).\n      else {\n        /** @type {Array<HastElementContent>} */\n        // @ts-expect-error: assume no doctypes in `root`.\n        const children = 'children' in result ? result.children : [result]\n        result = {type: 'element', tagName: hName, properties: {}, children}\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      Object.assign(result.properties, structuredClone(hProperties))\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastElement | HastText}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastElement | HastText} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: state.all(node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastRootContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | undefined} [loose=false]\n *   Whether to add line endings at start and end (default: `false`).\n * @returns {Array<HastText | Type>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<HastText | Type>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n\n/**\n * Trim spaces and tabs at the start of `value`.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Result.\n */\nfunction trimMarkdownSpaceStart(value) {\n  let index = 0\n  let code = value.charCodeAt(index)\n\n  while (code === 9 || code === 32) {\n    index++\n    code = value.charCodeAt(index)\n  }\n\n  return value.slice(index)\n}\n","/**\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('./state.js').Options} Options\n */\n\nimport {ok as assert} from 'devlop'\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   hast tree.\n */\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, undefined)\n  const foot = footer(state)\n  /** @type {HastNodes} */\n  const result = Array.isArray(node)\n    ? {type: 'root', children: node}\n    : node || {type: 'root', children: []}\n\n  if (foot) {\n    // If there’s a footer, there were definitions, meaning block\n    // content.\n    // So `result` is a parent node.\n    assert('children' in result)\n    result.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  return result\n}\n","// Include `data` fields in mdast and `raw` nodes in hast.\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @import {Root as HastRoot} from 'hast'\n * @import {Root as MdastRoot} from 'mdast'\n * @import {Options as ToHastOptions} from 'mdast-util-to-hast'\n * @import {Processor} from 'unified'\n * @import {VFile} from 'vfile'\n */\n\n/**\n * @typedef {Omit<ToHastOptions, 'file'>} Options\n *\n * @callback TransformBridge\n *   Bridge-mode.\n *\n *   Runs the destination with the new hast tree.\n *   Discards result.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {Promise<undefined>}\n *   Nothing.\n *\n * @callback TransformMutate\n *  Mutate-mode.\n *\n *  Further transformers run on the hast tree.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {HastRoot}\n *   Tree (hast).\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n/**\n * Turn markdown into HTML.\n *\n * ##### Notes\n *\n * ###### Signature\n *\n * *   if a processor is given, runs the (rehype) plugins used on it with a\n *     hast tree, then discards the result (*bridge mode*)\n * *   otherwise, returns a hast tree, the plugins used after `remarkRehype`\n *     are rehype plugins (*mutate mode*)\n *\n * > 👉 **Note**: It’s highly unlikely that you want to pass a `processor`.\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most plugins ignore `raw` nodes but two notable ones don’t:\n *\n * *   `rehype-stringify` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful if\n *     you completely trust authors\n * *   `rehype-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only way\n *     to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `remark-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * *Example: headings (DOM clobbering)* in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @overload\n * @param {Processor} processor\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge}\n *\n * @overload\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformMutate}\n *\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n *   Processor or configuration (optional).\n * @param {Readonly<Options> | null | undefined} [options]\n *   When a processor was given, configuration (optional).\n * @returns {TransformBridge | TransformMutate}\n *   Transform.\n */\nexport default function remarkRehype(destination, options) {\n  if (destination && 'run' in destination) {\n    /**\n     * @type {TransformBridge}\n     */\n    return async function (tree, file) {\n      // Cast because root in -> root out.\n      const hastTree = /** @type {HastRoot} */ (\n        toHast(tree, {file, ...options})\n      )\n      await destination.run(hastTree, file)\n    }\n  }\n\n  /**\n   * @type {TransformMutate}\n   */\n  return function (tree, file) {\n    // Cast because root in -> root out.\n    // To do: in the future, disallow ` || options` fallback.\n    // With `unified-engine`, `destination` can be `undefined` but\n    // `options` will be the file set.\n    // We should not pass that as `options`.\n    return /** @type {HastRoot} */ (\n      toHast(tree, {file, ...(destination || options)})\n    )\n  }\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","// To do: remove `void`s\n// To do: remove `null` from output of our APIs, allow it as user APIs.\n\n/**\n * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback\n *   Callback.\n *\n * @typedef {(...input: Array<any>) => any} Middleware\n *   Ware.\n *\n * @typedef Pipeline\n *   Pipeline.\n * @property {Run} run\n *   Run the pipeline.\n * @property {Use} use\n *   Add middleware.\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n *\n *   Calls `done` on completion with either an error or the output of the\n *   last middleware.\n *\n *   > 👉 **Note**: as the length of input defines whether async functions get a\n *   > `next` function,\n *   > it’s recommended to keep `input` at one value normally.\n\n *\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n *   Pipeline.\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error | null | undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware` into a uniform interface.\n *\n * You can pass all input to the resulting function.\n * `callback` is then called with the output of `middleware`.\n *\n * If `middleware` accepts more arguments than the later given in input,\n * an extra `done` function is passed to it after that input,\n * which must be called by `middleware`.\n *\n * The first value in `input` is the main input value.\n * All other input values are the rest input values.\n * The values given to `callback` are the input values,\n * merged with every non-nullish output value.\n *\n * * if `middleware` throws an error,\n *   returns a promise that is rejected,\n *   or calls the given `done` function with an error,\n *   `callback` is called with that error\n * * if `middleware` returns a value or returns a promise that is resolved,\n *   that value is the main output value\n * * if `middleware` calls `done`,\n *   all non-nullish values except for the first one (the error) overwrite the\n *   output values\n *\n * @param {Middleware} middleware\n *   Function to wrap.\n * @param {Callback} callback\n *   Callback called with the output of `middleware`.\n * @returns {Run}\n *   Wrapped middleware.\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result && result.then && typeof result.then === 'function') {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   *\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const minpath = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | null | undefined} [extname]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, extname) {\n  if (extname !== undefined && typeof extname !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (\n    extname === undefined ||\n    extname.length === 0 ||\n    extname.length > path.length\n  ) {\n    while (index--) {\n      if (path.codePointAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (extname === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extnameIndex = extname.length - 1\n\n  while (index--) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extnameIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.codePointAt(index) === extname.codePointAt(extnameIndex--)) {\n          if (extnameIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extnameIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.codePointAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\n      ? '//'\n      : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.codePointAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.codePointAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.codePointAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const minproc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nexport function isUrl(fileUrlOrPath) {\n  return Boolean(\n    fileUrlOrPath !== null &&\n      typeof fileUrlOrPath === 'object' &&\n      'href' in fileUrlOrPath &&\n      fileUrlOrPath.href &&\n      'protocol' in fileUrlOrPath &&\n      fileUrlOrPath.protocol &&\n      // @ts-expect-error: indexing is fine.\n      fileUrlOrPath.auth === undefined\n  )\n}\n","import {isUrl} from './minurl.shared.js'\n\nexport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\n\n/**\n * @param {URL | string} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.codePointAt(index) === 37 /* `%` */ &&\n      pathname.codePointAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.codePointAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n","/**\n * @import {Node, Point, Position} from 'unist'\n * @import {Options as MessageOptions} from 'vfile-message'\n * @import {Compatible, Data, Map, Options, Value} from 'vfile'\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {minpath} from '#minpath'\nimport {minproc} from '#minproc'\nimport {urlToPath, isUrl} from '#minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    // Prevent calling `cwd` (which could be expensive) if it’s not needed;\n    // the empty string will be overridden in the next block.\n    this.cwd = 'cwd' in options ? '' : minproc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const field = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        field in options &&\n        options[field] !== undefined &&\n        options[field] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[field] = field === 'history' ? [...options[field]] : options[field]\n      }\n    }\n\n    /** @type {string} */\n    let field\n\n    // Set non-path related properties.\n    for (field in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(field)) {\n        // @ts-expect-error: fine to set other things.\n        this[field] = options[field]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path)\n      : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = minpath.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string'\n      ? minpath.dirname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = minpath.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string'\n      ? minpath.extname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = minpath.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = minpath.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(minpath.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + minpath.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","export const CallableInstance =\n  /**\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n   */\n  (\n    /** @type {unknown} */\n    (\n      /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */\n      function (property) {\n        const self = this\n        const constr = self.constructor\n        const proto = /** @type {Record<string | symbol, Function>} */ (\n          // Prototypes do exist.\n          // type-coverage:ignore-next-line\n          constr.prototype\n        )\n        const value = proto[property]\n        /** @type {(...parameters: Array<unknown>) => unknown} */\n        const apply = function () {\n          return value.apply(apply, arguments)\n        }\n\n        Object.setPrototypeOf(apply, proto)\n\n        // Not needed for us in `unified`: we only call this on the `copy`\n        // function,\n        // and we don't need to add its fields (`length`, `name`)\n        // over.\n        // See also: GH-246.\n        // const names = Object.getOwnPropertyNames(value)\n        //\n        // for (const p of names) {\n        //   const descriptor = Object.getOwnPropertyDescriptor(value, p)\n        //   if (descriptor) Object.defineProperty(apply, p, descriptor)\n        // }\n\n        return apply\n      }\n    )\n  )\n","/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */\n\n/**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@linkcode CompileResultMap}.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@linkcode Node}\n *   and {@linkcode VFile} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@linkcode CompileResultMap}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@linkcode VFile} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@linkcode Node}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */\n\n/**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */\n\n/**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */\n\n// Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */\n\n/**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */\n\n/**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */\n\n/**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */\n\n/**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */\n\n/**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@linkcode VFile} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@linkcode VFile}.\n */\n\nimport {bail} from 'bail'\nimport extend from 'extend'\nimport {ok as assert} from 'devlop'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\nimport {CallableInstance} from './callable-instance.js'\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\n\nconst own = {}.hasOwnProperty\n\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */\nexport class Processor extends CallableInstance {\n  /**\n   * Create a processor.\n   */\n  constructor() {\n    // If `Processor()` is called (w/o new), `copy` is called instead.\n    super('copy')\n\n    /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.Compiler = undefined\n\n    /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.Parser = undefined\n\n    // Note: the following fields are considered private.\n    // However, they are needed for tests, and TSC generates an untyped\n    // `private freezeIndex` field for, which trips `type-coverage` up.\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n    /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */\n    this.attachers = []\n\n    /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.compiler = undefined\n\n    /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */\n    this.freezeIndex = -1\n\n    /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */\n    this.frozen = undefined\n\n    /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */\n    this.namespace = {}\n\n    /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.parser = undefined\n\n    /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */\n    this.transformers = trough()\n  }\n\n  /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@linkcode Processor}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */\n  copy() {\n    // Cast as the type parameters will be the same after attaching.\n    const destination =\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\n        new Processor()\n      )\n    let index = -1\n\n    while (++index < this.attachers.length) {\n      const attacher = this.attachers[index]\n      destination.use(...attacher)\n    }\n\n    destination.data(extend(true, {}, this.namespace))\n\n    return destination\n  }\n\n  /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > **Note**: to register custom data in TypeScript, augment the\n   * > {@linkcode Data} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */\n  data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', this.frozen)\n        this.namespace[key] = value\n        return this\n      }\n\n      // Get `key`.\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', this.frozen)\n      this.namespace = key\n      return this\n    }\n\n    // Get space.\n    return this.namespace\n  }\n\n  /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */\n  freeze() {\n    if (this.frozen) {\n      return this\n    }\n\n    // Cast so that we can type plugins easier.\n    // Plugins are supposed to be usable on different processors, not just on\n    // this exact processor.\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\n\n    while (++this.freezeIndex < this.attachers.length) {\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      const transformer = attacher.call(self, ...options)\n\n      if (typeof transformer === 'function') {\n        this.transformers.use(transformer)\n      }\n    }\n\n    this.frozen = true\n    this.freezeIndex = Number.POSITIVE_INFINITY\n\n    return this\n  }\n\n  /**\n   * Parse text to a syntax tree.\n   *\n   * > **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */\n  parse(file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const parser = this.parser || this.Parser\n    assertParser('parse', parser)\n    return parser(String(realFile), realFile)\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * > **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  process(file, done) {\n    const self = this\n\n    this.freeze()\n    assertParser('process', this.parser || this.Parser)\n    assertCompiler('process', this.compiler || this.Compiler)\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      const realFile = vfile(file)\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n      // input of the first transform).\n      const parseTree =\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\n          /** @type {unknown} */ (self.parse(realFile))\n        )\n\n      self.run(parseTree, realFile, function (error, tree, file) {\n        if (error || !tree || !file) {\n          return realDone(error)\n        }\n\n        // Assume `TailTree` (the output of the last transform) matches\n        // `CompileTree` (the input of the compiler).\n        const compileTree =\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\n            /** @type {unknown} */ (tree)\n          )\n\n        const compileResult = self.stringify(compileTree, file)\n\n        if (looksLikeAValue(compileResult)) {\n          file.value = compileResult\n        } else {\n          file.result = compileResult\n        }\n\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\n      })\n\n      /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */\n      function realDone(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  processSync(file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\n    let result\n\n    this.freeze()\n    assertParser('processSync', this.parser || this.Parser)\n    assertCompiler('processSync', this.compiler || this.Compiler)\n\n    this.process(file, realDone)\n    assertDone('processSync', 'process', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n\n    return result\n\n    /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */\n    function realDone(error, file) {\n      complete = true\n      bail(error)\n      result = file\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */\n  run(tree, file, done) {\n    assertNode(tree)\n    this.freeze()\n\n    const transformers = this.transformers\n\n    if (!done && typeof file === 'function') {\n      done = file\n      file = undefined\n    }\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      assert(\n        typeof file !== 'function',\n        '`file` can’t be a `done` anymore, we checked'\n      )\n      const realFile = vfile(file)\n      transformers.run(tree, realFile, realDone)\n\n      /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */\n      function realDone(error, outputTree, file) {\n        const resultingTree =\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\n            outputTree || tree\n          )\n\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(resultingTree)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, resultingTree, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */\n  runSync(tree, file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\n    let result\n\n    this.run(tree, file, realDone)\n\n    assertDone('runSync', 'run', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n    return result\n\n    /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */\n    function realDone(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * Compile a syntax tree.\n   *\n   * > **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  stringify(tree, file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const compiler = this.compiler || this.Compiler\n    assertCompiler('stringify', compiler)\n    assertNode(tree)\n\n    return compiler(tree, realFile)\n  }\n\n  /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */\n  use(value, ...parameters) {\n    const attachers = this.attachers\n    const namespace = this.namespace\n\n    assertUnfrozen('use', this.frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, parameters)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    return this\n\n    /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value, [])\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...parameters] =\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\n          addPlugin(plugin, parameters)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */\n    function addPreset(result) {\n      if (!('plugins' in result) && !('settings' in result)) {\n        throw new Error(\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\n        )\n      }\n\n      addList(result.plugins)\n\n      if (result.settings) {\n        namespace.settings = extend(true, namespace.settings, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */\n    function addPlugin(plugin, parameters) {\n      let index = -1\n      let entryIndex = -1\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entryIndex = index\n          break\n        }\n      }\n\n      if (entryIndex === -1) {\n        attachers.push([plugin, ...parameters])\n      }\n      // Only set if there was at least a `primary` value, otherwise we’d change\n      // `arguments.length`.\n      else if (parameters.length > 0) {\n        let [primary, ...rest] = parameters\n        const currentPrimary = attachers[entryIndex][1]\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\n          primary = extend(true, currentPrimary, primary)\n        }\n\n        attachers[entryIndex] = [plugin, primary, ...rest]\n      }\n    }\n  }\n}\n\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */\nexport const unified = new Processor().freeze()\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */\nfunction looksLikeAValue(value) {\n  return typeof value === 'string' || isUint8Array(value)\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","/**\n * @import {Element, Nodes, Parents, Root} from 'hast'\n * @import {Root as MdastRoot} from 'mdast'\n * @import {ComponentType, JSX, ReactElement, ReactNode} from 'react'\n * @import {Options as RemarkRehypeOptions} from 'remark-rehype'\n * @import {BuildVisitor} from 'unist-util-visit'\n * @import {PluggableList, Processor} from 'unified'\n */\n\n/**\n * @callback AllowElement\n *   Filter elements.\n * @param {Readonly<Element>} element\n *   Element to check.\n * @param {number} index\n *   Index of `element` in `parent`.\n * @param {Readonly<Parents> | undefined} parent\n *   Parent of `element`.\n * @returns {boolean | null | undefined}\n *   Whether to allow `element` (default: `false`).\n */\n\n/**\n * @typedef ExtraProps\n *   Extra fields we pass.\n * @property {Element | undefined} [node]\n *   passed when `passNode` is on.\n */\n\n/**\n * @typedef {{\n *   [Key in keyof JSX.IntrinsicElements]?: ComponentType<JSX.IntrinsicElements[Key] & ExtraProps> | keyof JSX.IntrinsicElements\n * }} Components\n *   Map tag names to components.\n */\n\n/**\n * @typedef Deprecation\n *   Deprecation.\n * @property {string} from\n *   Old field.\n * @property {string} id\n *   ID in readme.\n * @property {keyof Options} [to]\n *   New field.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {AllowElement | null | undefined} [allowElement]\n *   Filter elements (optional);\n *   `allowedElements` / `disallowedElements` is used first.\n * @property {ReadonlyArray<string> | null | undefined} [allowedElements]\n *   Tag names to allow (default: all tag names);\n *   cannot combine w/ `disallowedElements`.\n * @property {string | null | undefined} [children]\n *   Markdown.\n * @property {Components | null | undefined} [components]\n *   Map tag names to components.\n * @property {ReadonlyArray<string> | null | undefined} [disallowedElements]\n *   Tag names to disallow (default: `[]`);\n *   cannot combine w/ `allowedElements`.\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype plugins to use.\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark plugins to use.\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype`.\n * @property {boolean | null | undefined} [skipHtml=false]\n *   Ignore HTML in markdown completely (default: `false`).\n * @property {boolean | null | undefined} [unwrapDisallowed=false]\n *   Extract (unwrap) what’s in disallowed elements (default: `false`);\n *   normally when say `strong` is not allowed, it and it’s children are dropped,\n *   with `unwrapDisallowed` the element itself is replaced by its children.\n * @property {UrlTransform | null | undefined} [urlTransform]\n *   Change URLs (default: `defaultUrlTransform`)\n */\n\n/**\n * @typedef HooksOptionsOnly\n *   Configuration specifically for {@linkcode MarkdownHooks}.\n * @property {ReactNode | null | undefined} [fallback]\n *   Content to render while the processor processing the markdown (optional).\n */\n\n/**\n * @typedef {Options & HooksOptionsOnly} HooksOptions\n *   Configuration for {@linkcode MarkdownHooks};\n *   extends the regular {@linkcode Options} with a `fallback` prop.\n */\n\n/**\n * @callback UrlTransform\n *   Transform all URLs.\n * @param {string} url\n *   URL.\n * @param {string} key\n *   Property name (example: `'href'`).\n * @param {Readonly<Element>} node\n *   Node.\n * @returns {string | null | undefined}\n *   Transformed URL (optional).\n */\n\nimport {unreachable} from 'devlop'\nimport {toJsxRuntime} from 'hast-util-to-jsx-runtime'\nimport {urlAttributes} from 'html-url-attributes'\nimport {Fragment, jsx, jsxs} from 'react/jsx-runtime'\nimport {useEffect, useState} from 'react'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport {unified} from 'unified'\nimport {visit} from 'unist-util-visit'\nimport {VFile} from 'vfile'\n\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {PluggableList} */\nconst emptyPlugins = []\n/** @type {Readonly<RemarkRehypeOptions>} */\nconst emptyRemarkRehypeOptions = {allowDangerousHtml: true}\nconst safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i\n\n// Mutable because we `delete` any time it’s used and a message is sent.\n/** @type {ReadonlyArray<Readonly<Deprecation>>} */\nconst deprecations = [\n  {from: 'astPlugins', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'allowDangerousHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {\n    from: 'allowNode',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowElement'\n  },\n  {\n    from: 'allowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowedElements'\n  },\n  {from: 'className', id: 'remove-classname'},\n  {\n    from: 'disallowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'disallowedElements'\n  },\n  {from: 'escapeHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'includeElementIndex', id: '#remove-includeelementindex'},\n  {\n    from: 'includeNodeIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  },\n  {from: 'linkTarget', id: 'remove-linktarget'},\n  {from: 'plugins', id: 'change-plugins-to-remarkplugins', to: 'remarkPlugins'},\n  {from: 'rawSourcePos', id: '#remove-rawsourcepos'},\n  {from: 'renderers', id: 'change-renderers-to-components', to: 'components'},\n  {from: 'source', id: 'change-source-to-children', to: 'children'},\n  {from: 'sourcePos', id: '#remove-sourcepos'},\n  {from: 'transformImageUri', id: '#add-urltransform', to: 'urlTransform'},\n  {from: 'transformLinkUri', id: '#add-urltransform', to: 'urlTransform'}\n]\n\n/**\n * Component to render markdown.\n *\n * This is a synchronous component.\n * When using async plugins,\n * see {@linkcode MarkdownAsync} or {@linkcode MarkdownHooks}.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {ReactElement}\n *   React element.\n */\nexport function Markdown(options) {\n  const processor = createProcessor(options)\n  const file = createFile(options)\n  return post(processor.runSync(processor.parse(file), file), options)\n}\n\n/**\n * Component to render markdown with support for async plugins\n * through async/await.\n *\n * Components returning promises are supported on the server.\n * For async support on the client,\n * see {@linkcode MarkdownHooks}.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {Promise<ReactElement>}\n *   Promise to a React element.\n */\nexport async function MarkdownAsync(options) {\n  const processor = createProcessor(options)\n  const file = createFile(options)\n  const tree = await processor.run(processor.parse(file), file)\n  return post(tree, options)\n}\n\n/**\n * Component to render markdown with support for async plugins through hooks.\n *\n * This uses `useEffect` and `useState` hooks.\n * Hooks run on the client and do not immediately render something.\n * For async support on the server,\n * see {@linkcode MarkdownAsync}.\n *\n * @param {Readonly<HooksOptions>} options\n *   Props.\n * @returns {ReactNode}\n *   React node.\n */\nexport function MarkdownHooks(options) {\n  const processor = createProcessor(options)\n  const [error, setError] = useState(\n    /** @type {Error | undefined} */ (undefined)\n  )\n  const [tree, setTree] = useState(/** @type {Root | undefined} */ (undefined))\n\n  useEffect(\n    function () {\n      let cancelled = false\n      const file = createFile(options)\n\n      processor.run(processor.parse(file), file, function (error, tree) {\n        if (!cancelled) {\n          setError(error)\n          setTree(tree)\n        }\n      })\n\n      /**\n       * @returns {undefined}\n       *   Nothing.\n       */\n      return function () {\n        cancelled = true\n      }\n    },\n    [\n      options.children,\n      options.rehypePlugins,\n      options.remarkPlugins,\n      options.remarkRehypeOptions\n    ]\n  )\n\n  if (error) throw error\n\n  return tree ? post(tree, options) : options.fallback\n}\n\n/**\n * Set up the `unified` processor.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {Processor<MdastRoot, MdastRoot, Root, undefined, undefined>}\n *   Result.\n */\nfunction createProcessor(options) {\n  const rehypePlugins = options.rehypePlugins || emptyPlugins\n  const remarkPlugins = options.remarkPlugins || emptyPlugins\n  const remarkRehypeOptions = options.remarkRehypeOptions\n    ? {...options.remarkRehypeOptions, ...emptyRemarkRehypeOptions}\n    : emptyRemarkRehypeOptions\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(remarkPlugins)\n    .use(remarkRehype, remarkRehypeOptions)\n    .use(rehypePlugins)\n\n  return processor\n}\n\n/**\n * Set up the virtual file.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {VFile}\n *   Result.\n */\nfunction createFile(options) {\n  const children = options.children || ''\n  const file = new VFile()\n\n  if (typeof children === 'string') {\n    file.value = children\n  } else {\n    unreachable(\n      'Unexpected value `' +\n        children +\n        '` for `children` prop, expected `string`'\n    )\n  }\n\n  return file\n}\n\n/**\n * Process the result from unified some more.\n *\n * @param {Nodes} tree\n *   Tree.\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {ReactElement}\n *   React element.\n */\nfunction post(tree, options) {\n  const allowedElements = options.allowedElements\n  const allowElement = options.allowElement\n  const components = options.components\n  const disallowedElements = options.disallowedElements\n  const skipHtml = options.skipHtml\n  const unwrapDisallowed = options.unwrapDisallowed\n  const urlTransform = options.urlTransform || defaultUrlTransform\n\n  for (const deprecation of deprecations) {\n    if (Object.hasOwn(options, deprecation.from)) {\n      unreachable(\n        'Unexpected `' +\n          deprecation.from +\n          '` prop, ' +\n          (deprecation.to\n            ? 'use `' + deprecation.to + '` instead'\n            : 'remove it') +\n          ' (see <' +\n          changelog +\n          '#' +\n          deprecation.id +\n          '> for more info)'\n      )\n    }\n  }\n\n  if (allowedElements && disallowedElements) {\n    unreachable(\n      'Unexpected combined `allowedElements` and `disallowedElements`, expected one or the other'\n    )\n  }\n\n  visit(tree, transform)\n\n  return toJsxRuntime(tree, {\n    Fragment,\n    components,\n    ignoreInvalidStyle: true,\n    jsx,\n    jsxs,\n    passKeys: true,\n    passNode: true\n  })\n\n  /** @type {BuildVisitor<Root>} */\n  function transform(node, index, parent) {\n    if (node.type === 'raw' && parent && typeof index === 'number') {\n      if (skipHtml) {\n        parent.children.splice(index, 1)\n      } else {\n        parent.children[index] = {type: 'text', value: node.value}\n      }\n\n      return index\n    }\n\n    if (node.type === 'element') {\n      /** @type {string} */\n      let key\n\n      for (key in urlAttributes) {\n        if (\n          Object.hasOwn(urlAttributes, key) &&\n          Object.hasOwn(node.properties, key)\n        ) {\n          const value = node.properties[key]\n          const test = urlAttributes[key]\n          if (test === null || test.includes(node.tagName)) {\n            node.properties[key] = urlTransform(String(value || ''), key, node)\n          }\n        }\n      }\n    }\n\n    if (node.type === 'element') {\n      let remove = allowedElements\n        ? !allowedElements.includes(node.tagName)\n        : disallowedElements\n          ? disallowedElements.includes(node.tagName)\n          : false\n\n      if (!remove && allowElement && typeof index === 'number') {\n        remove = !allowElement(node, index, parent)\n      }\n\n      if (remove && parent && typeof index === 'number') {\n        if (unwrapDisallowed && node.children) {\n          parent.children.splice(index, 1, ...node.children)\n        } else {\n          parent.children.splice(index, 1)\n        }\n\n        return index\n      }\n    }\n  }\n}\n\n/**\n * Make a URL safe.\n *\n * @satisfies {UrlTransform}\n * @param {string} value\n *   URL.\n * @returns {string}\n *   Safe URL.\n */\nexport function defaultUrlTransform(value) {\n  // Same as:\n  // <https://github.com/micromark/micromark/blob/929275e/packages/micromark-util-sanitize-uri/dev/index.js#L34>\n  // But without the `encode` part.\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon === -1 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash !== -1 && colon > slash) ||\n    (questionMark !== -1 && colon > questionMark) ||\n    (numberSign !== -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    safeProtocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  CardActions,\r\n  Grid,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  Select,\r\n  MenuItem,\r\n  FormControl,\r\n  InputLabel,\r\n  IconButton,\r\n  Paper,\r\n  Chip,\r\n  Divider,\r\n  Snackbar,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemSecondaryAction,\r\n  Alert,\r\n  CircularProgress,\r\n  Tabs,\r\n  Tab,\r\n  Autocomplete\r\n} from '@mui/material';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport SaveIcon from '@mui/icons-material/Save';\r\nimport PersonIcon from '@mui/icons-material/Person';\r\nimport StoreIcon from '@mui/icons-material/Store';\r\nimport InventoryIcon from '@mui/icons-material/Inventory';\r\nimport PlaceIcon from '@mui/icons-material/Place';\r\nimport SportsKabaddiIcon from '@mui/icons-material/SportsKabaddi';\r\nimport VideogameAssetIcon from '@mui/icons-material/VideogameAsset';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport { useStore } from '../store';\r\nimport { AudioTrackPanel } from '../components/AudioTrackPanel';\r\nimport { AssetManager } from '../services/assetManager';\r\nimport { Character } from '../store';\r\n\r\nexport const CharactersView: React.FC = () => {\r\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\r\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\r\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n  const [snackbarMessage, setSnackbarMessage] = useState('');\r\n  const [isSaving, setIsSaving] = useState(false);\r\n  const [imageAssets, setImageAssets] = useState<string[]>([]);\r\n  \r\n  const { \r\n    characters, \r\n    addCharacter, \r\n    updateCharacter, \r\n    deleteCharacter, \r\n    saveDataToIndexedDB,\r\n    locations\r\n  } = useStore();\r\n  \r\n  // New character form data\r\n  const [newCharacter, setNewCharacter] = useState({\r\n    name: '',\r\n    description: '',\r\n    type: 'npc' as 'npc' | 'merchant' | 'enemy' | 'player',\r\n    locationId: '',\r\n    descriptionType: 'markdown' as 'markdown' | 'image' | 'pdf',\r\n    descriptionAssetName: '',\r\n    hp: 10  // Default HP value\r\n  });\r\n  \r\n  // Currently editing character id\r\n  const [editingCharacter, setEditingCharacter] = useState<string | null>(null);\r\n  \r\n  // Load image assets\r\n  useEffect(() => {\r\n    if (isAddDialogOpen || isEditDialogOpen) {\r\n      const loadAssets = async () => {\r\n        const imageAssetsData = await AssetManager.getAssets('images');\r\n        setImageAssets(imageAssetsData.map(asset => asset.name));\r\n      };\r\n      loadAssets();\r\n    }\r\n  }, [isAddDialogOpen, isEditDialogOpen]);\r\n  \r\n  // Add a new character\r\n  const handleAddCharacter = () => {\r\n    const character: Omit<Character, 'id'> = {\r\n      name: newCharacter.name,\r\n      description: newCharacter.description,\r\n      type: newCharacter.type,\r\n      hp: Number(newCharacter.hp) || 1  // Cast to number and provide fallback\r\n    };\r\n    \r\n    if (newCharacter.locationId) {\r\n      character.locationId = newCharacter.locationId;\r\n    }\r\n    \r\n    character.descriptionType = newCharacter.descriptionType;\r\n    \r\n    if (newCharacter.descriptionAssetName) {\r\n      character.descriptionAssetName = newCharacter.descriptionAssetName;\r\n    }\r\n    \r\n    addCharacter(character);\r\n    \r\n    setIsAddDialogOpen(false);\r\n    resetCharacterForm();\r\n    showSnackbar('Character added successfully');\r\n  };\r\n  \r\n  // Reset the character form\r\n  const resetCharacterForm = () => {\r\n    setNewCharacter({\r\n      name: '',\r\n      description: '',\r\n      type: 'npc',\r\n      locationId: '',\r\n      descriptionType: 'markdown',\r\n      descriptionAssetName: '',\r\n      hp: 10\r\n    });\r\n  };\r\n  \r\n  // Open edit dialog for a character\r\n  const handleEditCharacter = (characterId: string) => {\r\n    const character = characters.find(char => char.id === characterId);\r\n    if (character) {\r\n      setEditingCharacter(characterId);\r\n      setNewCharacter({\r\n        name: character.name,\r\n        description: character.description,\r\n        type: character.type,\r\n        locationId: character.locationId || '',\r\n        descriptionType: character.descriptionType || 'markdown',\r\n        descriptionAssetName: character.descriptionAssetName || '',\r\n        hp: character.hp\r\n      });\r\n      setIsEditDialogOpen(true);\r\n    }\r\n  };\r\n  \r\n  // Save edited character\r\n  const handleSaveCharacter = () => {\r\n    if (editingCharacter) {\r\n      const characterUpdate: Partial<Omit<Character, 'id'>> = {\r\n        name: newCharacter.name,\r\n        description: newCharacter.description,\r\n        type: newCharacter.type,\r\n        hp: Number(newCharacter.hp) || 1,  // Cast to number and provide fallback\r\n        descriptionType: newCharacter.descriptionType\r\n      };\r\n      \r\n      if (newCharacter.locationId) {\r\n        characterUpdate.locationId = newCharacter.locationId;\r\n      }\r\n      \r\n      if (newCharacter.descriptionAssetName) {\r\n        characterUpdate.descriptionAssetName = newCharacter.descriptionAssetName;\r\n      }\r\n      \r\n      updateCharacter(editingCharacter, characterUpdate);\r\n      \r\n      setIsEditDialogOpen(false);\r\n      resetCharacterForm();\r\n      showSnackbar('Character updated successfully');\r\n    }\r\n  };\r\n  \r\n  // Confirm and delete a character\r\n  const handleDeleteCharacter = (characterId: string) => {\r\n    if (window.confirm('Are you sure you want to delete this character? This cannot be undone.')) {\r\n      deleteCharacter(characterId);\r\n      showSnackbar('Character deleted successfully');\r\n    }\r\n  };\r\n  \r\n  // Save all data to IndexedDB\r\n  const handleSaveData = async () => {\r\n    setIsSaving(true);\r\n    try {\r\n      const result = await saveDataToIndexedDB();\r\n      showSnackbar(result.message);\r\n    } catch (error) {\r\n      showSnackbar(`Error saving data: ${error instanceof Error ? error.message : String(error)}`);\r\n    } finally {\r\n      setIsSaving(false);\r\n    }\r\n  };\r\n  \r\n  // Show a snackbar message\r\n  const showSnackbar = (message: string) => {\r\n    setSnackbarMessage(message);\r\n    setSnackbarOpen(true);\r\n  };\r\n  \r\n  // Close snackbar\r\n  const handleCloseSnackbar = () => {\r\n    setSnackbarOpen(false);\r\n  };\r\n  \r\n  // Render a character card\r\n  const renderCharacterCard = (character: Character) => {\r\n    const location = character.locationId \r\n      ? locations.find(loc => loc.id === character.locationId)\r\n      : null;\r\n      \r\n    return (\r\n      <Grid item xs={12} sm={6} md={5} key={character.id}>\r\n        <Card>\r\n          <CardContent>\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\r\n              <Box>\r\n                <Typography variant=\"h6\">\r\n                  {character.name}\r\n                </Typography>\r\n                \r\n                <Box sx={{ display: 'flex', alignItems: 'center', mt: 1 }}>\r\n                  <Chip\r\n                    icon={\r\n                      character.type === 'npc' ? <PersonIcon /> : \r\n                      character.type === 'merchant' ? <StoreIcon /> : \r\n                      character.type === 'enemy' ? <SportsKabaddiIcon /> :\r\n                      <VideogameAssetIcon />\r\n                    }\r\n                    label={\r\n                      character.type === 'npc' ? 'NPC' : \r\n                      character.type === 'merchant' ? 'Merchant' : \r\n                      character.type === 'enemy' ? 'Enemy' : 'Player'\r\n                    }\r\n                    size=\"small\"\r\n                    color={\r\n                      character.type === 'npc' ? 'primary' : \r\n                      character.type === 'merchant' ? 'secondary' : \r\n                      character.type === 'enemy' ? 'error' : \r\n                      'success'\r\n                    }\r\n                    variant=\"outlined\"\r\n                  />\r\n                  \r\n                  {location && (\r\n                    <Chip\r\n                      icon={<PlaceIcon />}\r\n                      label={location.name}\r\n                      size=\"small\"\r\n                      color=\"info\"\r\n                      variant=\"outlined\"\r\n                      sx={{ ml: 1 }}\r\n                    />\r\n                  )}\r\n                  <Chip\r\n                    label={`HP: ${character.hp}`}\r\n                    size=\"small\"\r\n                    color=\"default\"\r\n                    variant=\"outlined\"\r\n                    sx={{ ml: 1 }}\r\n                  />\r\n                </Box>\r\n                \r\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1, mb: 2 }}>\r\n                  {character.description}\r\n                </Typography>\r\n                \r\n                {character.inventory && character.inventory.length > 0 && (\r\n                  <>\r\n                    <Divider sx={{ my: 2 }} />\r\n                    <Typography variant=\"subtitle2\" gutterBottom>\r\n                      <InventoryIcon fontSize=\"small\" sx={{ verticalAlign: 'middle', mr: 0.5 }} />\r\n                      Inventory ({character.inventory.length})\r\n                    </Typography>\r\n                    <List dense>\r\n                      {character.inventory.slice(0, 3).map((item: any) => (\r\n                        <ListItem key={item.id} disablePadding>\r\n                          <ListItemText \r\n                            primary={item.name} \r\n                            secondary={`Qty: ${item.quantity}${item.price ? ` - Price: ${item.price}` : ''}`} \r\n                          />\r\n                        </ListItem>\r\n                      ))}\r\n                      {character.inventory.length > 3 && (\r\n                        <ListItem disablePadding>\r\n                          <ListItemText \r\n                            primary={`+ ${character.inventory.length - 3} more items`} \r\n                            primaryTypographyProps={{ variant: 'caption' }}\r\n                          />\r\n                        </ListItem>\r\n                      )}\r\n                    </List>\r\n                  </>\r\n                )}\r\n              </Box>\r\n              \r\n              <Box>\r\n                <IconButton onClick={() => handleEditCharacter(character.id)}>\r\n                  <EditIcon />\r\n                </IconButton>\r\n                <IconButton onClick={() => handleDeleteCharacter(character.id)}>\r\n                  <DeleteIcon />\r\n                </IconButton>\r\n              </Box>\r\n            </Box>\r\n          </CardContent>\r\n        </Card>\r\n      </Grid>\r\n    );\r\n  };\r\n  \r\n  return (\r\n    <Box sx={{ p: 3, maxWidth: 1200, mx: 'auto' }}>\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\r\n        <Typography variant=\"h4\">Characters</Typography>\r\n        <Box>\r\n          <Button \r\n            variant=\"outlined\" \r\n            color=\"success\" \r\n            startIcon={<SaveIcon />} \r\n            onClick={handleSaveData}\r\n            disabled={isSaving}\r\n            sx={{ mr: 2 }}\r\n          >\r\n            {isSaving ? <CircularProgress size={24} /> : 'Save Changes'}\r\n          </Button>\r\n          \r\n          <Button \r\n            variant=\"contained\" \r\n            startIcon={<AddIcon />} \r\n            onClick={() => {\r\n              resetCharacterForm();\r\n              setIsAddDialogOpen(true);\r\n            }}\r\n          >\r\n            Add Character\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n      \r\n      {characters.length === 0 ? (\r\n        <Paper sx={{ p: 3, textAlign: 'center' }}>\r\n          <Typography variant=\"h6\" color=\"text.secondary\" gutterBottom>\r\n            No Characters Yet\r\n          </Typography>\r\n          <Typography variant=\"body1\" color=\"text.secondary\" paragraph>\r\n            Add your first character to get started.\r\n          </Typography>\r\n          <Button \r\n            variant=\"contained\" \r\n            startIcon={<AddIcon />} \r\n            onClick={() => setIsAddDialogOpen(true)}\r\n          >\r\n            Add Character\r\n          </Button>\r\n        </Paper>\r\n      ) : (\r\n        <Grid container spacing={3}>\r\n          {characters.map(character => renderCharacterCard(character))}\r\n        </Grid>\r\n      )}\r\n      \r\n      {/* Add Character Dialog */}\r\n      <Dialog open={isAddDialogOpen} onClose={() => setIsAddDialogOpen(false)} maxWidth=\"md\" fullWidth>\r\n        <DialogTitle>Add New Character</DialogTitle>\r\n        <DialogContent>\r\n          <Grid container spacing={2} sx={{ mt: 0.5 }}>\r\n            <Grid item xs={12} md={8}>\r\n              <TextField\r\n                label=\"Name\"\r\n                fullWidth\r\n                value={newCharacter.name}\r\n                onChange={(e) => setNewCharacter({ ...newCharacter, name: e.target.value })}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} md={4}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Character Type</InputLabel>\r\n                <Select\r\n                  value={newCharacter.type}\r\n                  label=\"Character Type\"\r\n                  onChange={(e) => setNewCharacter({ \r\n                    ...newCharacter, \r\n                    type: e.target.value as 'npc' | 'merchant' | 'enemy' | 'player' \r\n                  })}\r\n                >\r\n                  <MenuItem value=\"npc\">NPC</MenuItem>\r\n                  <MenuItem value=\"merchant\">Merchant</MenuItem>\r\n                  <MenuItem value=\"enemy\">Enemy</MenuItem>\r\n                  <MenuItem value=\"player\">Player Character</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} md={4}>\r\n              <TextField\r\n                label=\"Hit Points (HP)\"\r\n                type=\"number\"\r\n                fullWidth\r\n                value={newCharacter.hp}\r\n                onChange={(e) => setNewCharacter({ \r\n                  ...newCharacter, \r\n                  hp: parseInt(e.target.value) || 1 \r\n                })}\r\n                inputProps={{ min: 1 }}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12}>\r\n              <Autocomplete\r\n                options={locations}\r\n                value={locations.find(loc => loc.id === newCharacter.locationId) || null}\r\n                onChange={(_, newValue) => setNewCharacter({ \r\n                  ...newCharacter, \r\n                  locationId: newValue?.id || '' \r\n                })}\r\n                getOptionLabel={(option) => option.name}\r\n                renderInput={(params) => (\r\n                  <TextField\r\n                    {...params}\r\n                    label=\"Location\"\r\n                    fullWidth\r\n                  />\r\n                )}\r\n                isOptionEqualToValue={(option, value) => option.id === value.id}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Description Type</InputLabel>\r\n                <Select\r\n                  value={newCharacter.descriptionType}\r\n                  label=\"Description Type\"\r\n                  onChange={(e) => setNewCharacter({ \r\n                    ...newCharacter, \r\n                    descriptionType: e.target.value as 'markdown' | 'image' | 'pdf' \r\n                  })}\r\n                >\r\n                  <MenuItem value=\"markdown\">Markdown</MenuItem>\r\n                  <MenuItem value=\"image\">Image</MenuItem>\r\n                  <MenuItem value=\"pdf\">PDF</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            \r\n            {newCharacter.descriptionType === 'markdown' ? (\r\n              <>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    label=\"Description\"\r\n                    multiline\r\n                    rows={6}\r\n                    fullWidth\r\n                    value={newCharacter.description}\r\n                    onChange={(e) => setNewCharacter({ ...newCharacter, description: e.target.value })}\r\n                  />\r\n                </Grid>\r\n                \r\n                <Grid item xs={12}>\r\n                  <Typography variant=\"subtitle2\" sx={{ mt: 1, mb: 1 }}>\r\n                    Preview\r\n                  </Typography>\r\n                  <Paper \r\n                    sx={{ \r\n                      p: 2, \r\n                      height: '200px', \r\n                      overflow: 'auto',\r\n                      bgcolor: 'background.default',\r\n                      border: 1,\r\n                      borderColor: 'divider'\r\n                    }}\r\n                  >\r\n                    <ReactMarkdown>\r\n                      {newCharacter.description}\r\n                    </ReactMarkdown>\r\n                  </Paper>\r\n                </Grid>\r\n              </>\r\n            ) : newCharacter.descriptionType === 'image' || newCharacter.descriptionType === 'pdf' ? (\r\n              <>\r\n                <Grid item xs={12}>\r\n                  <Autocomplete\r\n                    options={imageAssets}\r\n                    value={newCharacter.descriptionAssetName || null}\r\n                    onChange={(_, newValue) => setNewCharacter({ \r\n                      ...newCharacter, \r\n                      descriptionAssetName: newValue || '' \r\n                    })}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        label=\"Description Asset\"\r\n                        fullWidth\r\n                        helperText={`Select a ${newCharacter.descriptionType} file from assets`}\r\n                      />\r\n                    )}\r\n                  />\r\n                </Grid>\r\n                \r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    label=\"Brief Description\"\r\n                    multiline\r\n                    rows={3}\r\n                    fullWidth\r\n                    value={newCharacter.description}\r\n                    onChange={(e) => setNewCharacter({ ...newCharacter, description: e.target.value })}\r\n                    helperText=\"Add a brief description text to show in lists\"\r\n                  />\r\n                </Grid>\r\n              </>\r\n            ) : null}\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setIsAddDialogOpen(false)}>Cancel</Button>\r\n          <Button \r\n            onClick={handleAddCharacter} \r\n            variant=\"contained\"\r\n            disabled={!newCharacter.name}\r\n          >\r\n            Add Character\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      \r\n      {/* Edit Character Dialog */}\r\n      <Dialog open={isEditDialogOpen} onClose={() => setIsEditDialogOpen(false)} maxWidth=\"md\" fullWidth>\r\n        <DialogTitle>Edit Character</DialogTitle>\r\n        <DialogContent>\r\n          <Grid container spacing={2} sx={{ mt: 0.5 }}>\r\n            <Grid item xs={12} md={8}>\r\n              <TextField\r\n                label=\"Name\"\r\n                fullWidth\r\n                value={newCharacter.name}\r\n                onChange={(e) => setNewCharacter({ ...newCharacter, name: e.target.value })}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} md={4}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Character Type</InputLabel>\r\n                <Select\r\n                  value={newCharacter.type}\r\n                  label=\"Character Type\"\r\n                  onChange={(e) => setNewCharacter({ \r\n                    ...newCharacter, \r\n                    type: e.target.value as 'npc' | 'merchant' | 'enemy' | 'player' \r\n                  })}\r\n                >\r\n                  <MenuItem value=\"npc\">NPC</MenuItem>\r\n                  <MenuItem value=\"merchant\">Merchant</MenuItem>\r\n                  <MenuItem value=\"enemy\">Enemy</MenuItem>\r\n                  <MenuItem value=\"player\">Player Character</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} md={4}>\r\n              <TextField\r\n                label=\"Hit Points (HP)\"\r\n                type=\"number\"\r\n                fullWidth\r\n                value={newCharacter.hp}\r\n                onChange={(e) => setNewCharacter({ \r\n                  ...newCharacter, \r\n                  hp: parseInt(e.target.value) || 1 \r\n                })}\r\n                inputProps={{ min: 1 }}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12}>\r\n              <Autocomplete\r\n                options={locations}\r\n                value={locations.find(loc => loc.id === newCharacter.locationId) || null}\r\n                onChange={(_, newValue) => setNewCharacter({ \r\n                  ...newCharacter, \r\n                  locationId: newValue?.id || '' \r\n                })}\r\n                getOptionLabel={(option) => option.name}\r\n                renderInput={(params) => (\r\n                  <TextField\r\n                    {...params}\r\n                    label=\"Location\"\r\n                    fullWidth\r\n                  />\r\n                )}\r\n                isOptionEqualToValue={(option, value) => option.id === value.id}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Description Type</InputLabel>\r\n                <Select\r\n                  value={newCharacter.descriptionType}\r\n                  label=\"Description Type\"\r\n                  onChange={(e) => setNewCharacter({ \r\n                    ...newCharacter, \r\n                    descriptionType: e.target.value as 'markdown' | 'image' | 'pdf' \r\n                  })}\r\n                >\r\n                  <MenuItem value=\"markdown\">Markdown</MenuItem>\r\n                  <MenuItem value=\"image\">Image</MenuItem>\r\n                  <MenuItem value=\"pdf\">PDF</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            \r\n            {newCharacter.descriptionType === 'markdown' ? (\r\n              <>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    label=\"Description\"\r\n                    multiline\r\n                    rows={6}\r\n                    fullWidth\r\n                    value={newCharacter.description}\r\n                    onChange={(e) => setNewCharacter({ ...newCharacter, description: e.target.value })}\r\n                  />\r\n                </Grid>\r\n                \r\n                <Grid item xs={12}>\r\n                  <Typography variant=\"subtitle2\" sx={{ mt: 1, mb: 1 }}>\r\n                    Preview\r\n                  </Typography>\r\n                  <Paper \r\n                    sx={{ \r\n                      p: 2, \r\n                      height: '200px', \r\n                      overflow: 'auto',\r\n                      bgcolor: 'background.default',\r\n                      border: 1,\r\n                      borderColor: 'divider'\r\n                    }}\r\n                  >\r\n                    <ReactMarkdown>\r\n                      {newCharacter.description}\r\n                    </ReactMarkdown>\r\n                  </Paper>\r\n                </Grid>\r\n              </>\r\n            ) : newCharacter.descriptionType === 'image' || newCharacter.descriptionType === 'pdf' ? (\r\n              <>\r\n                <Grid item xs={12}>\r\n                  <Autocomplete\r\n                    options={imageAssets}\r\n                    value={newCharacter.descriptionAssetName || null}\r\n                    onChange={(_, newValue) => setNewCharacter({ \r\n                      ...newCharacter, \r\n                      descriptionAssetName: newValue || '' \r\n                    })}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        label=\"Description Asset\"\r\n                        fullWidth\r\n                        helperText={`Select a ${newCharacter.descriptionType} file from assets`}\r\n                      />\r\n                    )}\r\n                  />\r\n                </Grid>\r\n                \r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    label=\"Brief Description\"\r\n                    multiline\r\n                    rows={3}\r\n                    fullWidth\r\n                    value={newCharacter.description}\r\n                    onChange={(e) => setNewCharacter({ ...newCharacter, description: e.target.value })}\r\n                    helperText=\"Add a brief description text to show in lists\"\r\n                  />\r\n                </Grid>\r\n              </>\r\n            ) : null}\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setIsEditDialogOpen(false)}>Cancel</Button>\r\n          <Button \r\n            onClick={handleSaveCharacter} \r\n            variant=\"contained\"\r\n            disabled={!newCharacter.name}\r\n          >\r\n            Save Changes\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      \r\n      {/* Snackbar for notifications */}\r\n      <Snackbar\r\n        open={snackbarOpen}\r\n        autoHideDuration={6000}\r\n        onClose={handleCloseSnackbar}\r\n      >\r\n        <Alert onClose={handleCloseSnackbar} severity=\"success\" sx={{ width: '100%' }}>\r\n          {snackbarMessage}\r\n        </Alert>\r\n      </Snackbar>\r\n      \r\n      {/* Include the AudioTrackPanel */}\r\n      <AudioTrackPanel />\r\n    </Box>\r\n  );\r\n}; "],"names":["_interopRequireDefault","require$$0","Store","default_1","_createSvgIcon","require$$1","_jsxRuntime","require$$2","Inventory","VideogameAsset","stringify","values","options","settings","nameRe","nameReJsx","emptyOptions","name","re","whitespace","thing","empty","value","Schema","property","normal","space","merge","definitions","definition","normalize","Info","attribute","powers","boolean","increment","booleanish","overloadedBoolean","number","spaceSeparated","commaSeparated","commaOrSpaceSeparated","checks","types","DefinedInfo","mask","index","mark","check","key","create","properties","normals","info","aria","_","caseSensitiveTransform","attributes","caseInsensitiveTransform","html","svg","xlink","xmlns","xml","hastToReact","cap","dash","valid","find","schema","Type","rest","camelcase","dashes","kebab","$0","htmlBase","svgBase","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","NEWLINE","FORWARD_SLASH","ASTERISK","EMPTY_STRING","TYPE_COMMENT","TYPE_DECLARATION","inlineStyleParser","style","lineno","column","updatePosition","str","lines","i","position","start","node","Position","error","msg","err","match","m","comments","rules","c","comment","pos","declaration","prop","val","ret","trim","declarations","decls","decl","__importDefault","this","mod","cjs","StyleToObject","inline_style_parser_1","iterator","styleObject","hasIterator","utilities","CUSTOM_PROPERTY_REGEX","HYPHEN_REGEX","NO_HYPHEN_REGEX","VENDOR_PREFIX_REGEX","MS_VENDOR_PREFIX_REGEX","skipCamelCase","capitalize","character","trimHyphen","prefix","camelCase","style_to_object_1","utilities_1","StyleToJS","output","pointEnd","point","pointStart","type","end","stringifyPosition","VFileMessage","causeOrReason","optionsOrParentOrPlace","origin","reason","legacyCause","parent","own","emptyMap","tableElements","tableCellElement","docs","toJsxRuntime","tree","filePath","developmentCreate","productionCreate","state","result","one","element","mdxExpression","mdxJsxElement","mdxEsm","root","text","parentSchema","findComponentFromName","props","createElementProps","children","createChildren","child","addNode","addChildren","expression","assert","crashEstree","createJsxElementProps","jsx","jsxs","fn","jsxDEV","isStaticChildren","alignValue","createProperty","objectExpression","countsByName","count","commas","spaces","parseStyle","transformStylesToCssCasing","styleToJs","cause","message","allowExpression","identifiers","isIdentifierName","place","domCasing","cssCasing","from","transformStyleToCssCasing","to","toDash","urlAttributes","toString","includeImageAlt","includeHtml","all","decodeNamedCharacterReference","characterReference","splice","list","remove","items","chunkStart","parameters","push","hasOwnProperty","combineExtensions","extensions","syntaxExtension","extension","hook","left","right","code","constructs","existing","before","decodeNumericCharacterReference","base","normalizeIdentifier","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","regex","normalizeUri","skip","replace","next","factorySpace","effects","ok","max","limit","size","content","initializeContent","contentStart","afterContentStartConstruct","paragraphInitial","previous","lineStart","token","data","document","initializeDocument","containerConstruct","tokenizeContainer","self","stack","continued","childFlow","childToken","lineStartOffset","item","documentContinue","checkNewContainers","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","flowStart","thereIsANewContainer","thereIsNoNewContainer","containerContinue","flowContinue","writeToChild","endOfFile","stream","seen","entry","nok","classifyCharacter","resolveAll","events","context","called","resolve","attention","resolveAllAttention","tokenizeAttention","open","group","openingSequence","closingSequence","use","nextEvents","offset","movePoint","attentionMarkers","marker","inside","after","close","autolink","tokenizeAutolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","blankLine","tokenizeBlankLine","blockQuote","tokenizeBlockQuoteContinuation","exit","tokenizeBlockQuoteStart","contStart","contBefore","characterEscape","tokenizeCharacterEscape","tokenizeCharacterReference","test","numeric","nonLazyContinuation","tokenizeNonLazyContinuation","codeFenced","tokenizeCodeFenced","closeStart","tokenizeCloseStart","initialPrefix","sizeOpen","beforeSequenceOpen","tail","sequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","startBefore","beforeSequenceClose","sequenceClose","sequenceCloseAfter","codeIndented","tokenizeCodeIndented","furtherStart","tokenizeFurtherStart","afterPrefix","atBreak","codeText","resolveCodeText","tokenizeCodeText","tailExitIndex","headEnterIndex","enter","between","SpliceBuffer","initial","stop","deleteCount","removed","chunkedPush","subtokenize","eventsArray","jumps","event","lineIndex","otherIndex","otherEvent","subevents","more","subcontent","eventIndex","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","slice","resolveContent","tokenizeContent","continuationConstruct","tokenizeContinuation","chunkInside","contentEnd","contentContinue","startLookahead","prefixed","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","begin","escape","factoryWhitespace","tokenizeDefinition","titleBefore","tokenizeTitleBefore","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","afterWhitespace","beforeMarker","titleAfter","titleAfterOptionalWhitespace","hardBreakEscape","tokenizeHardBreakEscape","headingAtx","resolveHeadingAtx","tokenizeHeadingAtx","sequenceFurther","htmlBlockNames","htmlRawNames","htmlFlow","resolveToHtmlFlow","tokenizeHtmlFlow","blankLineBefore","tokenizeBlankLineBefore","nonLazyContinuationStart","tokenizeNonLazyContinuationStart","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","continuation","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationAfter","continuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","htmlText","tokenizeHtmlText","returnState","instruction","tagOpen","commentEnd","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelEnd","resolveAllLabelEnd","resolveToLabelEnd","tokenizeLabelEnd","resourceConstruct","tokenizeResource","referenceFullConstruct","tokenizeReferenceFull","referenceCollapsedConstruct","tokenizeReferenceCollapsed","newEvents","media","label","labelStart","defined","labelEndNok","labelEndOk","referenceNotFull","resourceStart","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFull","referenceFullAfter","referenceFullMissing","referenceCollapsedStart","referenceCollapsedOpen","labelStartImage","tokenizeLabelStartImage","labelStartLink","tokenizeLabelStartLink","lineEnding","tokenizeLineEnding","thematicBreak","tokenizeThematicBreak","sequence","tokenizeListContinuation","tokenizeListEnd","tokenizeListStart","listItemPrefixWhitespaceConstruct","tokenizeListItemPrefixWhitespace","indentConstruct","tokenizeIndent","initialSize","kind","atMarker","onBlank","endOfPrefix","otherPrefix","notBlank","notInCurrentItem","setextUnderline","resolveToSetextUnderline","tokenizeSetextUnderline","heading","paragraph","flow","initializeFlow","atBlankEnding","afterConstruct","resolver","createResolver","string","initializeFactory","field","resolveAllLineSuffixes","initializeText","notText","extraResolver","resolveAllText","chunks","bufferIndex","tabs","chunk","contentInitial","flowInitial","insideSpan","resolveText","disable","createTokenizer","parser","initialize","columnStart","resolveAllConstructs","constructFactory","onsuccessfulconstruct","onsuccessfulcheck","consume","defineSkip","now","sliceSerialize","sliceStream","write","main","addResult","expandTabs","serializeChunks","sliceChunks","_bufferIndex","_index","line","accountForPotentialSkip","chunkIndex","go","fields","construct","onreturn","bogusState","listOfConstructs","constructIndex","currentConstruct","handleListOfConstructs","handleMapOfConstructs","map","handleConstruct","store","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","restore","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","atTab","parse","defaultConstructs","creator","postprocess","search","preprocess","atCarriageReturn","preprocessor","encoding","endPosition","characterEscapeOrReference","decodeString","decode","$1","$2","hex","fromMarkdown","compiler","config","opener","link","onenterdata","codeFlow","emphasis","hardBreak","image","listItem","onenterlistitemvalue","onenterlistordered","onenterreference","strong","closer","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","onexitdata","onexitcharacterreferencemarker","onexitcharacterreferencevalue","onexitcharacterreference","onexitcodefenced","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","onexitresource","onexitsetextheading","onexitsetextheadinglinesequence","onexitsetextheadingtext","configure","compile","resume","listStack","prepareList","handler","defaultOnError","length","containerBalance","listSpread","firstBlankLineIndex","tailIndex","tailEvent","and","errorHandler","onExitError","ancestor","depth","siblings","referenceType","fragment","d","combined","remarkParse","doc","blockquote","strikethrough","footnoteReference","clobberPrefix","id","safeId","counter","reuseCounter","sup","revert","subtype","suffix","contents","imageReference","inlineCode","linkReference","results","loose","listLoose","listItemLoose","spread","table","rows","firstRow","tableContent","body","tableRow","align","cellIndex","cells","cell","tableCell","tab","trimLines","source","last","trimLine","handlers","ignore","VOID","PRIMITIVE","ARRAY","OBJECT","DATE","REGEXP","MAP","SET","ERROR","BIGINT","env","deserializer","$","as","out","unpair","arr","object","flags","set","deserialize","serialized","EMPTY","keys","typeOf","asString","shouldSkip","TYPE","serializer","strict","json","pair","entries","serialize","lossy","structuredClone$1","any","defaultFootnoteBackContent","rereferenceIndex","defaultFootnoteBackLabel","referenceIndex","footer","footnoteBackContent","footnoteBackLabel","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","listItems","backReferences","counts","tailTail","structuredClone","convert","castFactory","anyFactory","propsFactory","typeFactory","tests","checkAsRecord","nodeAsRecord","testFunction","looksLikeANode","CONTINUE","EXIT","SKIP","visitParents","visitor","reverse","is","step","factory","parents","visit","subresult","grandparents","toResult","nodeAsParent","testOrVisitor","visitorOrReverse","maybeReverse","overload","createState","definitionById","footnoteById","footnoteCounts","defaultHandlers","applyData","patch","wrap","handle","shallow","defaultUnknownHandler","nodes","trimMarkdownSpaceStart","hName","hChildren","hProperties","toHast","foot","remarkRehype","destination","file","hastTree","bail","hasOwn","toStr","defineProperty","gOPD","isArray","isPlainObject","obj","hasOwnConstructor","hasIsPrototypeOf","setProperty","target","getProperty","extend","src","copy","copyIsArray","clone","deep","prototype","trough","fns","pipeline","run","middlewareIndex","callback","middelware","middleware","wrapped","fnExpectsCallback","done","exception","then","minpath","basename","dirname","extname","join","path","assertPath","seenNonSlash","firstNonSlashEnd","extnameIndex","unmatchedSlash","startPart","startDot","preDotState","segments","joined","absolute","normalizeString","allowAboveRoot","lastSegmentLength","lastSlash","dots","lastSlashIndex","minproc","cwd","isUrl","fileUrlOrPath","urlToPath","getPathFromURLPosix","url","pathname","third","order","VFile","isUint8Array","assertNonEmpty","assertPart","stem","part","CallableInstance","proto","apply","Processor","attacher","assertUnfrozen","transformer","realFile","vfile","assertParser","assertCompiler","executor","reject","parseTree","realDone","compileTree","compileResult","looksLikeAValue","complete","assertDone","assertNode","transformers","outputTree","resultingTree","attachers","namespace","addPlugin","addList","addPreset","add","plugin","plugins","entryIndex","primary","currentPrimary","isPlainObj","unified","frozen","asyncName","looksLikeAVFile","changelog","emptyPlugins","emptyRemarkRehypeOptions","safeProtocol","deprecations","Markdown","processor","createProcessor","createFile","post","rehypePlugins","remarkPlugins","remarkRehypeOptions","allowedElements","allowElement","components","disallowedElements","skipHtml","unwrapDisallowed","urlTransform","defaultUrlTransform","deprecation","transform","Fragment","colon","questionMark","numberSign","CharactersView","isAddDialogOpen","setIsAddDialogOpen","useState","isEditDialogOpen","setIsEditDialogOpen","snackbarOpen","setSnackbarOpen","snackbarMessage","setSnackbarMessage","isSaving","setIsSaving","imageAssets","setImageAssets","characters","addCharacter","updateCharacter","deleteCharacter","saveDataToIndexedDB","locations","useStore","newCharacter","setNewCharacter","editingCharacter","setEditingCharacter","useEffect","imageAssetsData","AssetManager","asset","handleAddCharacter","resetCharacterForm","showSnackbar","handleEditCharacter","characterId","char","handleSaveCharacter","characterUpdate","handleDeleteCharacter","handleSaveData","handleCloseSnackbar","renderCharacterCard","location","loc","Grid","Card","CardContent","Box","Typography","Chip","PersonIcon","StoreIcon","SportsKabaddiIcon","VideogameAssetIcon","PlaceIcon","Divider","InventoryIcon","List","ListItem","ListItemText","IconButton","EditIcon","DeleteIcon","Button","SaveIcon","CircularProgress","AddIcon","Paper","Dialog","DialogTitle","DialogContent","TextField","e","FormControl","InputLabel","Select","MenuItem","Autocomplete","newValue","option","params","ReactMarkdown","DialogActions","Snackbar","Alert","AudioTrackPanel"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134]}